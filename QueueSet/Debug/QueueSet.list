
QueueSet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008560  08008560  00009560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ec  080089ec  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f4  080089f4  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000099f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089f8  080089f8  000099f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080089fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c10  200001d8  08008bd4  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004de8  08008bd4  0000ade8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faf2  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd4  00000000  00000000  00029cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d749  00000000  00000000  0002dcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000145d  00000000  00000000  0003c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000041c3  00000000  00000000  0003dbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bab1  00000000  00000000  00041d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aa7c  00000000  00000000  0005d821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f829d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000499c  00000000  00000000  000f82e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000fcc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008544 	.word	0x08008544

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008544 	.word	0x08008544

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <Tx_Task2>:
	}
}

uint8_t tx2_err = 0;
void Tx_Task2(void *param)
{
 8001030:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	{
		if((getMS() - prev_time) >= 500)
		{
			prev_time = getMS();
			msg.val1++;
			msg.val2 = msg.val2 + 0.1;
 8001034:	a717      	add	r7, pc, #92	@ (adr r7, 8001094 <Tx_Task2+0x64>)
 8001036:	e9d7 6700 	ldrd	r6, r7, [r7]
			if(xQueueSend(q_tx2_handle, &msg, pdMS_TO_TICKS(5)) != pdPASS){
 800103a:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 800109c <Tx_Task2+0x6c>
				tx2_err++;
 800103e:	4d14      	ldr	r5, [pc, #80]	@ (8001090 <Tx_Task2+0x60>)
	uint32_t prev_time = 0;
 8001040:	2400      	movs	r4, #0
		if((getMS() - prev_time) >= 500)
 8001042:	f001 ffa3 	bl	8002f8c <xTaskGetTickCount>
 8001046:	1b00      	subs	r0, r0, r4
 8001048:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800104c:	d3f9      	bcc.n	8001042 <Tx_Task2+0x12>
			prev_time = getMS();
 800104e:	f001 ff9d 	bl	8002f8c <xTaskGetTickCount>
			msg.val1++;
 8001052:	f89d 3000 	ldrb.w	r3, [sp]
			prev_time = getMS();
 8001056:	4604      	mov	r4, r0
			msg.val1++;
 8001058:	3301      	adds	r3, #1
			msg.val2 = msg.val2 + 0.1;
 800105a:	9801      	ldr	r0, [sp, #4]
			msg.val1++;
 800105c:	f88d 3000 	strb.w	r3, [sp]
			msg.val2 = msg.val2 + 0.1;
 8001060:	f7ff fa7a 	bl	8000558 <__aeabi_f2d>
 8001064:	4632      	mov	r2, r6
 8001066:	463b      	mov	r3, r7
 8001068:	f7ff f918 	bl	800029c <__adddf3>
 800106c:	f7ff fdc4 	bl	8000bf8 <__aeabi_d2f>
			if(xQueueSend(q_tx2_handle, &msg, pdMS_TO_TICKS(5)) != pdPASS){
 8001070:	2300      	movs	r3, #0
			msg.val2 = msg.val2 + 0.1;
 8001072:	9001      	str	r0, [sp, #4]
			if(xQueueSend(q_tx2_handle, &msg, pdMS_TO_TICKS(5)) != pdPASS){
 8001074:	2205      	movs	r2, #5
 8001076:	f8d8 0000 	ldr.w	r0, [r8]
 800107a:	4669      	mov	r1, sp
 800107c:	f001 fb39 	bl	80026f2 <xQueueGenericSend>
 8001080:	2801      	cmp	r0, #1
 8001082:	d0de      	beq.n	8001042 <Tx_Task2+0x12>
				tx2_err++;
 8001084:	782b      	ldrb	r3, [r5, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	702b      	strb	r3, [r5, #0]
 800108a:	e7da      	b.n	8001042 <Tx_Task2+0x12>
 800108c:	f3af 8000 	nop.w
 8001090:	200001ff 	.word	0x200001ff
 8001094:	9999999a 	.word	0x9999999a
 8001098:	3fb99999 	.word	0x3fb99999
 800109c:	20000208 	.word	0x20000208

080010a0 <Tx_Task1>:
{
 80010a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			if(xQueueSend(q_tx1_handle, &msg, pdMS_TO_TICKS(5)) != pdPASS){
 80010a2:	4e15      	ldr	r6, [pc, #84]	@ (80010f8 <Tx_Task1+0x58>)
				tx1_err++;
 80010a4:	4d15      	ldr	r5, [pc, #84]	@ (80010fc <Tx_Task1+0x5c>)
	uint32_t prev_time = 0;
 80010a6:	2400      	movs	r4, #0
		if((getMS() - prev_time) >= 500)
 80010a8:	f001 ff70 	bl	8002f8c <xTaskGetTickCount>
 80010ac:	1b00      	subs	r0, r0, r4
 80010ae:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80010b2:	d31c      	bcc.n	80010ee <Tx_Task1+0x4e>
			prev_time = getMS();
 80010b4:	f001 ff6a 	bl	8002f8c <xTaskGetTickCount>
			msg.val1++;
 80010b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010bc:	3301      	adds	r3, #1
 80010be:	f88d 3004 	strb.w	r3, [sp, #4]
			msg.val2++;
 80010c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80010c6:	3301      	adds	r3, #1
 80010c8:	f88d 3005 	strb.w	r3, [sp, #5]
			msg.val3++;
 80010cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80010d0:	3301      	adds	r3, #1
 80010d2:	f88d 3006 	strb.w	r3, [sp, #6]
			prev_time = getMS();
 80010d6:	4604      	mov	r4, r0
			if(xQueueSend(q_tx1_handle, &msg, pdMS_TO_TICKS(5)) != pdPASS){
 80010d8:	2300      	movs	r3, #0
 80010da:	6830      	ldr	r0, [r6, #0]
 80010dc:	2205      	movs	r2, #5
 80010de:	a901      	add	r1, sp, #4
 80010e0:	f001 fb07 	bl	80026f2 <xQueueGenericSend>
 80010e4:	2801      	cmp	r0, #1
				tx1_err++;
 80010e6:	bf1e      	ittt	ne
 80010e8:	782b      	ldrbne	r3, [r5, #0]
 80010ea:	3301      	addne	r3, #1
 80010ec:	702b      	strbne	r3, [r5, #0]
		vTaskDelay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f002 f85c 	bl	80031ac <vTaskDelay>
		if((getMS() - prev_time) >= 500)
 80010f4:	e7d8      	b.n	80010a8 <Tx_Task1+0x8>
 80010f6:	bf00      	nop
 80010f8:	2000020c 	.word	0x2000020c
 80010fc:	20000200 	.word	0x20000200

08001100 <Rx_Task>:
}

msg_type1_t msg1;
msg_type2_t msg2;
void Rx_Task(void *param)
{
 8001100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001104:	b090      	sub	sp, #64	@ 0x40
	char buff[50] = {"\0"};
 8001106:	2232      	movs	r2, #50	@ 0x32
 8001108:	2100      	movs	r1, #0
 800110a:	a803      	add	r0, sp, #12
 800110c:	f003 fde1 	bl	8004cd2 <memset>

	while(1)
	{
		QueueSetMemberHandle_t active_member = NULL;
		active_member = xQueueSelectFromSet(q_set_handle, portMAX_DELAY);
 8001110:	4d1b      	ldr	r5, [pc, #108]	@ (8001180 <Rx_Task+0x80>)

		if(active_member == q_tx1_handle){
 8001112:	4e1c      	ldr	r6, [pc, #112]	@ (8001184 <Rx_Task+0x84>)
			xQueueReceive(q_tx1_handle, &msg1, pdMS_TO_TICKS(0));
			sprintf(buff, "v1:%d-v2:%d-v3:%d\r\n", msg1.val1, msg1.val2, msg1.val3);
			HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), pdMS_TO_TICKS(20));
		}else if(active_member == q_tx2_handle){
 8001114:	4f1c      	ldr	r7, [pc, #112]	@ (8001188 <Rx_Task+0x88>)
		active_member = xQueueSelectFromSet(q_set_handle, portMAX_DELAY);
 8001116:	6828      	ldr	r0, [r5, #0]
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	f001 fcf8 	bl	8002b10 <xQueueSelectFromSet>
		if(active_member == q_tx1_handle){
 8001120:	6832      	ldr	r2, [r6, #0]
 8001122:	4282      	cmp	r2, r0
 8001124:	d116      	bne.n	8001154 <Rx_Task+0x54>
			xQueueReceive(q_tx1_handle, &msg1, pdMS_TO_TICKS(0));
 8001126:	4c19      	ldr	r4, [pc, #100]	@ (800118c <Rx_Task+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	4621      	mov	r1, r4
 800112c:	f001 fc07 	bl	800293e <xQueueReceive>
			sprintf(buff, "v1:%d-v2:%d-v3:%d\r\n", msg1.val1, msg1.val2, msg1.val3);
 8001130:	78a3      	ldrb	r3, [r4, #2]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	7863      	ldrb	r3, [r4, #1]
 8001136:	7822      	ldrb	r2, [r4, #0]
 8001138:	4915      	ldr	r1, [pc, #84]	@ (8001190 <Rx_Task+0x90>)
 800113a:	a803      	add	r0, sp, #12
 800113c:	f003 fd64 	bl	8004c08 <siprintf>
			xQueueReceive(q_tx2_handle, &msg2, pdMS_TO_TICKS(0));
			sprintf(buff, "v1:%d-v2:%f\r\n", msg2.val1, msg2.val2);
			HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), pdMS_TO_TICKS(20));
 8001140:	a803      	add	r0, sp, #12
 8001142:	f7ff f89d 	bl	8000280 <strlen>
 8001146:	2314      	movs	r3, #20
 8001148:	b282      	uxth	r2, r0
 800114a:	a903      	add	r1, sp, #12
 800114c:	4811      	ldr	r0, [pc, #68]	@ (8001194 <Rx_Task+0x94>)
 800114e:	f001 f888 	bl	8002262 <HAL_UART_Transmit>
 8001152:	e7e0      	b.n	8001116 <Rx_Task+0x16>
		}else if(active_member == q_tx2_handle){
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4282      	cmp	r2, r0
 8001158:	d1dd      	bne.n	8001116 <Rx_Task+0x16>
			xQueueReceive(q_tx2_handle, &msg2, pdMS_TO_TICKS(0));
 800115a:	4c0f      	ldr	r4, [pc, #60]	@ (8001198 <Rx_Task+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	4621      	mov	r1, r4
 8001160:	f001 fbed 	bl	800293e <xQueueReceive>
			sprintf(buff, "v1:%d-v2:%f\r\n", msg2.val1, msg2.val2);
 8001164:	6860      	ldr	r0, [r4, #4]
 8001166:	f894 8000 	ldrb.w	r8, [r4]
 800116a:	f7ff f9f5 	bl	8000558 <__aeabi_f2d>
 800116e:	4642      	mov	r2, r8
 8001170:	e9cd 0100 	strd	r0, r1, [sp]
 8001174:	4909      	ldr	r1, [pc, #36]	@ (800119c <Rx_Task+0x9c>)
 8001176:	a803      	add	r0, sp, #12
 8001178:	f003 fd46 	bl	8004c08 <siprintf>
 800117c:	e7e0      	b.n	8001140 <Rx_Task+0x40>
 800117e:	bf00      	nop
 8001180:	20000204 	.word	0x20000204
 8001184:	2000020c 	.word	0x2000020c
 8001188:	20000208 	.word	0x20000208
 800118c:	200001fc 	.word	0x200001fc
 8001190:	08008560 	.word	0x08008560
 8001194:	2000021c 	.word	0x2000021c
 8001198:	200001f4 	.word	0x200001f4
 800119c:	08008574 	.word	0x08008574

080011a0 <SystemClock_Config>:
{
 80011a0:	b510      	push	{r4, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a4:	2214      	movs	r2, #20
 80011a6:	2100      	movs	r1, #0
 80011a8:	a809      	add	r0, sp, #36	@ 0x24
 80011aa:	f003 fd92 	bl	8004cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ae:	2214      	movs	r2, #20
 80011b0:	2100      	movs	r1, #0
 80011b2:	a803      	add	r0, sp, #12
 80011b4:	f003 fd8d 	bl	8004cd2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <SystemClock_Config+0x94>)
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80011c0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80011c4:	6411      	str	r1, [r2, #64]	@ 0x40
 80011c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80011c8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80011cc:	9201      	str	r2, [sp, #4]
 80011ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <SystemClock_Config+0x98>)
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80011da:	6011      	str	r1, [r2, #0]
 80011dc:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011de:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011e4:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ea:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f2:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	2101      	movs	r1, #1
 80011f8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fa:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fe:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001202:	9412      	str	r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001204:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f000 fb51 	bl	80018ac <HAL_RCC_OscConfig>
 800120a:	b108      	cbz	r0, 8001210 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120e:	e7fe      	b.n	800120e <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001220:	2103      	movs	r1, #3
 8001222:	a803      	add	r0, sp, #12
 8001224:	f000 fd1e 	bl	8001c64 <HAL_RCC_ClockConfig>
 8001228:	b108      	cbz	r0, 800122e <SystemClock_Config+0x8e>
 800122a:	b672      	cpsid	i
  while (1)
 800122c:	e7fe      	b.n	800122c <SystemClock_Config+0x8c>
}
 800122e:	b014      	add	sp, #80	@ 0x50
 8001230:	bd10      	pop	{r4, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <main>:
{
 800123c:	b500      	push	{lr}
 800123e:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 8001240:	f000 f9ea 	bl	8001618 <HAL_Init>
  SystemClock_Config();
 8001244:	f7ff ffac 	bl	80011a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	2214      	movs	r2, #20
 800124a:	2100      	movs	r1, #0
 800124c:	eb0d 0002 	add.w	r0, sp, r2
 8001250:	f003 fd3f 	bl	8004cd2 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	2400      	movs	r4, #0
 8001256:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <main+0x118>)
 8001258:	9403      	str	r4, [sp, #12]
 800125a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800125c:	483e      	ldr	r0, [pc, #248]	@ (8001358 <main+0x11c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	f042 0204 	orr.w	r2, r2, #4
 8001262:	631a      	str	r2, [r3, #48]	@ 0x30
 8001264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001266:	f002 0204 	and.w	r2, r2, #4
 800126a:	9203      	str	r2, [sp, #12]
 800126c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	9404      	str	r4, [sp, #16]
 8001270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800127e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001282:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001286:	f000 fb0b 	bl	80018a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BTN_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800128e:	4833      	ldr	r0, [pc, #204]	@ (800135c <main+0x120>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001292:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2501      	movs	r5, #1
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800129a:	f000 fa3b 	bl	8001714 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2320      	movs	r3, #32
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012a0:	482d      	ldr	r0, [pc, #180]	@ (8001358 <main+0x11c>)
 80012a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f000 fa32 	bl	8001714 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80012b0:	482b      	ldr	r0, [pc, #172]	@ (8001360 <main+0x124>)
  huart2.Init.BaudRate = 115200;
 80012b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001364 <main+0x128>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b4:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80012b6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012ba:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012be:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c4:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ca:	f000 ff9b 	bl	8002204 <HAL_UART_Init>
 80012ce:	4604      	mov	r4, r0
 80012d0:	b108      	cbz	r0, 80012d6 <main+0x9a>
 80012d2:	b672      	cpsid	i
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <main+0x98>
  osKernelInitialize();
 80012d6:	f001 f81f 	bl	8002318 <osKernelInitialize>
  xTaskCreate(Tx_Task1, "Tx_Task1", 512, NULL, 2, &tx1_task_handle);
 80012da:	2602      	movs	r6, #2
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <main+0x12c>)
 80012de:	4923      	ldr	r1, [pc, #140]	@ (800136c <main+0x130>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	9600      	str	r6, [sp, #0]
 80012e4:	4623      	mov	r3, r4
 80012e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ea:	4821      	ldr	r0, [pc, #132]	@ (8001370 <main+0x134>)
 80012ec:	f001 fdc8 	bl	8002e80 <xTaskCreate>
  xTaskCreate(Tx_Task2, "Tx_Task2", 512, NULL, 2, &tx2_task_handle);
 80012f0:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <main+0x138>)
 80012f2:	4921      	ldr	r1, [pc, #132]	@ (8001378 <main+0x13c>)
 80012f4:	4821      	ldr	r0, [pc, #132]	@ (800137c <main+0x140>)
 80012f6:	e9cd 6300 	strd	r6, r3, [sp]
 80012fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012fe:	4623      	mov	r3, r4
 8001300:	f001 fdbe 	bl	8002e80 <xTaskCreate>
  xTaskCreate(Rx_Task, "Rx_Task", 512, NULL, 1, &rx_task_handle);
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <main+0x144>)
 8001306:	491f      	ldr	r1, [pc, #124]	@ (8001384 <main+0x148>)
 8001308:	481f      	ldr	r0, [pc, #124]	@ (8001388 <main+0x14c>)
  q_tx1_handle = xQueueCreate(5, sizeof(msg_type1_t));
 800130a:	4e20      	ldr	r6, [pc, #128]	@ (800138c <main+0x150>)
  xTaskCreate(Rx_Task, "Rx_Task", 512, NULL, 1, &rx_task_handle);
 800130c:	e9cd 5300 	strd	r5, r3, [sp]
 8001310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001314:	4623      	mov	r3, r4
 8001316:	f001 fdb3 	bl	8002e80 <xTaskCreate>
  q_tx1_handle = xQueueCreate(5, sizeof(msg_type1_t));
 800131a:	4622      	mov	r2, r4
 800131c:	2103      	movs	r1, #3
 800131e:	2005      	movs	r0, #5
 8001320:	f001 f9be 	bl	80026a0 <xQueueGenericCreate>
  q_tx2_handle = xQueueCreate(5, sizeof(msg_type2_t));
 8001324:	4622      	mov	r2, r4
 8001326:	2108      	movs	r1, #8
  q_tx1_handle = xQueueCreate(5, sizeof(msg_type1_t));
 8001328:	6030      	str	r0, [r6, #0]
  q_tx2_handle = xQueueCreate(5, sizeof(msg_type2_t));
 800132a:	2005      	movs	r0, #5
 800132c:	f001 f9b8 	bl	80026a0 <xQueueGenericCreate>
 8001330:	4c17      	ldr	r4, [pc, #92]	@ (8001390 <main+0x154>)
  q_set_handle = xQueueCreateSet(30);
 8001332:	4d18      	ldr	r5, [pc, #96]	@ (8001394 <main+0x158>)
  q_tx2_handle = xQueueCreate(5, sizeof(msg_type2_t));
 8001334:	6020      	str	r0, [r4, #0]
  q_set_handle = xQueueCreateSet(30);
 8001336:	201e      	movs	r0, #30
 8001338:	f001 fbd5 	bl	8002ae6 <xQueueCreateSet>
 800133c:	4601      	mov	r1, r0
 800133e:	6028      	str	r0, [r5, #0]
  xQueueAddToSet(q_tx1_handle, q_set_handle);
 8001340:	6830      	ldr	r0, [r6, #0]
 8001342:	f001 fbd4 	bl	8002aee <xQueueAddToSet>
  xQueueAddToSet(q_tx2_handle, q_set_handle);
 8001346:	6829      	ldr	r1, [r5, #0]
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	f001 fbd0 	bl	8002aee <xQueueAddToSet>
  vTaskStartScheduler();
 800134e:	f001 fdc5 	bl	8002edc <vTaskStartScheduler>
  while (1)
 8001352:	e7fe      	b.n	8001352 <main+0x116>
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020800 	.word	0x40020800
 8001360:	2000021c 	.word	0x2000021c
 8001364:	40004400 	.word	0x40004400
 8001368:	20000218 	.word	0x20000218
 800136c:	08008582 	.word	0x08008582
 8001370:	080010a1 	.word	0x080010a1
 8001374:	20000214 	.word	0x20000214
 8001378:	0800858b 	.word	0x0800858b
 800137c:	08001031 	.word	0x08001031
 8001380:	20000210 	.word	0x20000210
 8001384:	08008594 	.word	0x08008594
 8001388:	08001101 	.word	0x08001101
 800138c:	2000020c 	.word	0x2000020c
 8001390:	20000208 	.word	0x20000208
 8001394:	20000204 	.word	0x20000204

08001398 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1)
 8001398:	6802      	ldr	r2, [r0, #0]
 800139a:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800139c:	429a      	cmp	r2, r3
 800139e:	d101      	bne.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80013a0:	f000 b954 	b.w	800164c <HAL_IncTick>
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <HAL_MspInit+0x3c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	9200      	str	r2, [sp, #0]
 80013b4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013b6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80013ba:	6459      	str	r1, [r3, #68]	@ 0x44
 80013bc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013be:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80013c2:	9100      	str	r1, [sp, #0]
 80013c4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	9201      	str	r2, [sp, #4]
 80013c8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80013ca:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80013ce:	6419      	str	r1, [r3, #64]	@ 0x40
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013da:	210f      	movs	r1, #15
 80013dc:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	f000 b957 	b.w	8001694 <HAL_NVIC_SetPriority>
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b510      	push	{r4, lr}
 80013ee:	4604      	mov	r4, r0
 80013f0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	2214      	movs	r2, #20
 80013f4:	2100      	movs	r1, #0
 80013f6:	a803      	add	r0, sp, #12
 80013f8:	f003 fc6b 	bl	8004cd2 <memset>
  if(huart->Instance==USART2)
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_UART_MspInit+0x64>)
 8001400:	429a      	cmp	r2, r3
 8001402:	d122      	bne.n	800144a <HAL_UART_MspInit+0x5e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001404:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8001408:	2100      	movs	r1, #0
 800140a:	9101      	str	r1, [sp, #4]
 800140c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	4811      	ldr	r0, [pc, #68]	@ (8001454 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001410:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
 8001416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001418:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800141c:	9201      	str	r2, [sp, #4]
 800141e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	9102      	str	r1, [sp, #8]
 8001422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	631a      	str	r2, [r3, #48]	@ 0x30
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	220c      	movs	r2, #12
 8001436:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001438:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143e:	2307      	movs	r3, #7
 8001440:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	a903      	add	r1, sp, #12
 8001446:	f000 f965 	bl	8001714 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800144a:	b008      	add	sp, #32
 800144c:	bd10      	pop	{r4, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	b088      	sub	sp, #32
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800145c:	2400      	movs	r4, #0
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_InitTick+0x7c>)
 8001460:	9402      	str	r4, [sp, #8]
 8001462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001464:	4d1c      	ldr	r5, [pc, #112]	@ (80014d8 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	645a      	str	r2, [r3, #68]	@ 0x44
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001472:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001474:	9302      	str	r3, [sp, #8]
{
 8001476:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001478:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800147a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147c:	f000 fcac 	bl	8001dd8 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001480:	f000 fc9a 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_InitTick+0x84>)
 8001486:	602b      	str	r3, [r5, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001488:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800148c:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_InitTick+0x88>)
 8001490:	fbb0 f0f3 	udiv	r0, r0, r3
 8001494:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001496:	6068      	str	r0, [r5, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8001498:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 800149a:	612c      	str	r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	61ac      	str	r4, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 80014a0:	f000 fdc4 	bl	800202c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80014a4:	4604      	mov	r4, r0
 80014a6:	b980      	cbnz	r0, 80014ca <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014a8:	4628      	mov	r0, r5
 80014aa:	f000 fcb5 	bl	8001e18 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80014ae:	4604      	mov	r4, r0
 80014b0:	b958      	cbnz	r0, 80014ca <HAL_InitTick+0x72>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014b2:	2019      	movs	r0, #25
 80014b4:	f000 f920 	bl	80016f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b8:	2e0f      	cmp	r6, #15
 80014ba:	d809      	bhi.n	80014d0 <HAL_InitTick+0x78>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80014bc:	4622      	mov	r2, r4
 80014be:	4631      	mov	r1, r6
 80014c0:	2019      	movs	r0, #25
 80014c2:	f000 f8e7 	bl	8001694 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <HAL_InitTick+0x8c>)
 80014c8:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80014ca:	4620      	mov	r0, r4
 80014cc:	b008      	add	sp, #32
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 80014d0:	2401      	movs	r4, #1
 80014d2:	e7fa      	b.n	80014ca <HAL_InitTick+0x72>
 80014d4:	40023800 	.word	0x40023800
 80014d8:	20000264 	.word	0x20000264
 80014dc:	40010000 	.word	0x40010000
 80014e0:	000f4240 	.word	0x000f4240
 80014e4:	20000008 	.word	0x20000008

080014e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler>

080014ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler>

080014ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler>

080014ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler>

080014f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler>

080014f2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	4770      	bx	lr

080014f4 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f4:	4801      	ldr	r0, [pc, #4]	@ (80014fc <TIM1_UP_TIM10_IRQHandler+0x8>)
 80014f6:	f000 bcc5 	b.w	8001e84 <HAL_TIM_IRQHandler>
 80014fa:	bf00      	nop
 80014fc:	20000264 	.word	0x20000264

08001500 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001500:	2001      	movs	r0, #1
 8001502:	4770      	bx	lr

08001504 <_kill>:

int _kill(int pid, int sig)
{
 8001504:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001506:	f003 fc95 	bl	8004e34 <__errno>
 800150a:	2316      	movs	r3, #22
 800150c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800150e:	f04f 30ff 	mov.w	r0, #4294967295
 8001512:	bd08      	pop	{r3, pc}

08001514 <_exit>:

void _exit (int status)
{
 8001514:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001516:	f003 fc8d 	bl	8004e34 <__errno>
 800151a:	2316      	movs	r3, #22
 800151c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800151e:	e7fe      	b.n	800151e <_exit+0xa>

08001520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	460d      	mov	r5, r1
 8001524:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	460e      	mov	r6, r1
 8001528:	1b73      	subs	r3, r6, r5
 800152a:	429c      	cmp	r4, r3
 800152c:	dc01      	bgt.n	8001532 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800152e:	4620      	mov	r0, r4
 8001530:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001532:	f3af 8000 	nop.w
 8001536:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	e7f5      	b.n	8001528 <_read+0x8>

0800153c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	460d      	mov	r5, r1
 8001540:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	460e      	mov	r6, r1
 8001544:	1b73      	subs	r3, r6, r5
 8001546:	429c      	cmp	r4, r3
 8001548:	dc01      	bgt.n	800154e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800154a:	4620      	mov	r0, r4
 800154c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800154e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001552:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	e7f5      	b.n	8001544 <_write+0x8>

08001558 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	4770      	bx	lr

0800155e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800155e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001562:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001564:	2000      	movs	r0, #0
 8001566:	4770      	bx	lr

08001568 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001568:	2001      	movs	r0, #1
 800156a:	4770      	bx	lr

0800156c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800156c:	2000      	movs	r0, #0
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <_sbrk+0x30>)
 8001572:	6811      	ldr	r1, [r2, #0]
{
 8001574:	b510      	push	{r4, lr}
 8001576:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001578:	b909      	cbnz	r1, 800157e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800157a:	490a      	ldr	r1, [pc, #40]	@ (80015a4 <_sbrk+0x34>)
 800157c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	6810      	ldr	r0, [r2, #0]
 8001580:	4909      	ldr	r1, [pc, #36]	@ (80015a8 <_sbrk+0x38>)
 8001582:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <_sbrk+0x3c>)
 8001584:	4403      	add	r3, r0
 8001586:	1b09      	subs	r1, r1, r4
 8001588:	428b      	cmp	r3, r1
 800158a:	d906      	bls.n	800159a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800158c:	f003 fc52 	bl	8004e34 <__errno>
 8001590:	230c      	movs	r3, #12
 8001592:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001594:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001598:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800159a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800159c:	e7fc      	b.n	8001598 <_sbrk+0x28>
 800159e:	bf00      	nop
 80015a0:	200002ac 	.word	0x200002ac
 80015a4:	20004de8 	.word	0x20004de8
 80015a8:	20020000 	.word	0x20020000
 80015ac:	00000400 	.word	0x00000400

080015b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4a03      	ldr	r2, [pc, #12]	@ (80015c0 <SystemInit+0x10>)
 80015b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80015b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c8:	f7ff fff2 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	@ (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f003 fc25 	bl	8004e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fe21 	bl	800123c <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001608:	080089fc 	.word	0x080089fc
  ldr r2, =_sbss
 800160c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001610:	20004de8 	.word	0x20004de8

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_Init+0x30>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001622:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800162a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001632:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f81b 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff ff0c 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff feb4 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001644:	2000      	movs	r0, #0
 8001646:	bd08      	pop	{r3, pc}
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800164c:	4a03      	ldr	r2, [pc, #12]	@ (800165c <HAL_IncTick+0x10>)
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_IncTick+0x14>)
 8001650:	6811      	ldr	r1, [r2, #0]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	440b      	add	r3, r1
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200002b0 	.word	0x200002b0
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001664:	4b01      	ldr	r3, [pc, #4]	@ (800166c <HAL_GetTick+0x8>)
 8001666:	6818      	ldr	r0, [r3, #0]
}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200002b0 	.word	0x200002b0

08001670 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001672:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001674:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001680:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800168c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b530      	push	{r4, r5, lr}
 8001698:	68dc      	ldr	r4, [r3, #12]
 800169a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	bf28      	it	cs
 80016a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b0:	bf8c      	ite	hi
 80016b2:	3c03      	subhi	r4, #3
 80016b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b6:	fa05 f303 	lsl.w	r3, r5, r3
 80016ba:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016be:	40a5      	lsls	r5, r4
 80016c0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80016c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	bfac      	ite	ge
 80016ce:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	4a08      	ldrlt	r2, [pc, #32]	@ (80016f4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	bfb8      	it	lt
 80016da:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	bfaa      	itet	ge
 80016e2:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016ec:	bd30      	pop	{r4, r5, pc}
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	e000ed14 	.word	0xe000ed14

080016f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016f8:	2800      	cmp	r0, #0
 80016fa:	db07      	blt.n	800170c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <HAL_NVIC_EnableIRQ+0x18>)
 80016fe:	0941      	lsrs	r1, r0, #5
 8001700:	2301      	movs	r3, #1
 8001702:	f000 001f 	and.w	r0, r0, #31
 8001706:	4083      	lsls	r3, r0
 8001708:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 800189c <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171c:	4a5d      	ldr	r2, [pc, #372]	@ (8001894 <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001720:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001722:	2401      	movs	r4, #1
 8001724:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800172a:	43ac      	bics	r4, r5
 800172c:	f040 80a3 	bne.w	8001876 <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001730:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001732:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001734:	f005 0403 	and.w	r4, r5, #3
 8001738:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173c:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001740:	1e67      	subs	r7, r4, #1
 8001742:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001748:	d834      	bhi.n	80017b4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800174a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800174c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001750:	68cf      	ldr	r7, [r1, #12]
 8001752:	fa07 f708 	lsl.w	r7, r7, r8
 8001756:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800175a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800175c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175e:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001766:	409f      	lsls	r7, r3
 8001768:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800176c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800176e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001770:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	688f      	ldr	r7, [r1, #8]
 8001776:	fa07 f708 	lsl.w	r7, r7, r8
 800177a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001780:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	d119      	bne.n	80017b8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001784:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001788:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001790:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001794:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001798:	f04f 0e0f 	mov.w	lr, #15
 800179c:	fa0e fe0b 	lsl.w	lr, lr, fp
 80017a0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a4:	690f      	ldr	r7, [r1, #16]
 80017a6:	fa07 f70b 	lsl.w	r7, r7, fp
 80017aa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	f8ca 7020 	str.w	r7, [sl, #32]
 80017b2:	e001      	b.n	80017b8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b4:	2c03      	cmp	r4, #3
 80017b6:	d1da      	bne.n	800176e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80017b8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ba:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017be:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c2:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80017c8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ca:	d054      	beq.n	8001876 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	2400      	movs	r4, #0
 80017ce:	9401      	str	r4, [sp, #4]
 80017d0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80017d4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80017d8:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80017dc:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80017e0:	f023 0703 	bic.w	r7, r3, #3
 80017e4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80017e8:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80017ec:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80017f0:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80017f8:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001800:	240f      	movs	r4, #15
 8001802:	fa04 f40c 	lsl.w	r4, r4, ip
 8001806:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180a:	4c23      	ldr	r4, [pc, #140]	@ (8001898 <HAL_GPIO_Init+0x184>)
 800180c:	42a0      	cmp	r0, r4
 800180e:	d039      	beq.n	8001884 <HAL_GPIO_Init+0x170>
 8001810:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001814:	42a0      	cmp	r0, r4
 8001816:	d037      	beq.n	8001888 <HAL_GPIO_Init+0x174>
 8001818:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800181c:	42a0      	cmp	r0, r4
 800181e:	d035      	beq.n	800188c <HAL_GPIO_Init+0x178>
 8001820:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001824:	42a0      	cmp	r0, r4
 8001826:	d033      	beq.n	8001890 <HAL_GPIO_Init+0x17c>
 8001828:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800182c:	42a0      	cmp	r0, r4
 800182e:	bf14      	ite	ne
 8001830:	2407      	movne	r4, #7
 8001832:	2404      	moveq	r4, #4
 8001834:	fa04 f40c 	lsl.w	r4, r4, ip
 8001838:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 800183e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001840:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001842:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001846:	bf0c      	ite	eq
 8001848:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800184a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 800184c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800184e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001854:	bf0c      	ite	eq
 8001856:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001858:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 800185a:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800185c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001862:	bf0c      	ite	eq
 8001864:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001866:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8001868:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800186e:	bf54      	ite	pl
 8001870:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001872:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001874:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	3301      	adds	r3, #1
 8001878:	2b10      	cmp	r3, #16
 800187a:	f47f af51 	bne.w	8001720 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800187e:	b003      	add	sp, #12
 8001880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001884:	2400      	movs	r4, #0
 8001886:	e7d5      	b.n	8001834 <HAL_GPIO_Init+0x120>
 8001888:	2401      	movs	r4, #1
 800188a:	e7d3      	b.n	8001834 <HAL_GPIO_Init+0x120>
 800188c:	2402      	movs	r4, #2
 800188e:	e7d1      	b.n	8001834 <HAL_GPIO_Init+0x120>
 8001890:	2403      	movs	r4, #3
 8001892:	e7cf      	b.n	8001834 <HAL_GPIO_Init+0x120>
 8001894:	40013c00 	.word	0x40013c00
 8001898:	40020000 	.word	0x40020000
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	b10a      	cbz	r2, 80018a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	6181      	str	r1, [r0, #24]
  }
}
 80018a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	0409      	lsls	r1, r1, #16
 80018a8:	e7fb      	b.n	80018a2 <HAL_GPIO_WritePin+0x2>
	...

080018ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	4604      	mov	r4, r0
 80018b2:	b340      	cbz	r0, 8001906 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b4:	6803      	ldr	r3, [r0, #0]
 80018b6:	07de      	lsls	r6, r3, #31
 80018b8:	d410      	bmi.n	80018dc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	079d      	lsls	r5, r3, #30
 80018be:	d45b      	bmi.n	8001978 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	0719      	lsls	r1, r3, #28
 80018c4:	f100 809d 	bmi.w	8001a02 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	075a      	lsls	r2, r3, #29
 80018cc:	f100 80bd 	bmi.w	8001a4a <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	69a3      	ldr	r3, [r4, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 8124 	bne.w	8001b20 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	e02c      	b.n	8001936 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	f002 020c 	and.w	r2, r2, #12
 80018e4:	2a04      	cmp	r2, #4
 80018e6:	d007      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ee:	2a08      	cmp	r2, #8
 80018f0:	d10b      	bne.n	800190a <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0259      	lsls	r1, r3, #9
 80018f6:	d508      	bpl.n	800190a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	4b86      	ldr	r3, [pc, #536]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	039a      	lsls	r2, r3, #14
 80018fe:	d5dc      	bpl.n	80018ba <HAL_RCC_OscConfig+0xe>
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1d9      	bne.n	80018ba <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190a:	6863      	ldr	r3, [r4, #4]
 800190c:	4d81      	ldr	r5, [pc, #516]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 800190e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001912:	d113      	bne.n	800193c <HAL_RCC_OscConfig+0x90>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800191c:	f7ff fea2 	bl	8001664 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	4e7c      	ldr	r6, [pc, #496]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8001922:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	6833      	ldr	r3, [r6, #0]
 8001926:	039b      	lsls	r3, r3, #14
 8001928:	d4c7      	bmi.n	80018ba <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192a:	f7ff fe9b 	bl	8001664 <HAL_GetTick>
 800192e:	1b40      	subs	r0, r0, r5
 8001930:	2864      	cmp	r0, #100	@ 0x64
 8001932:	d9f7      	bls.n	8001924 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001934:	2003      	movs	r0, #3
}
 8001936:	b002      	add	sp, #8
 8001938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001940:	d104      	bne.n	800194c <HAL_RCC_OscConfig+0xa0>
 8001942:	682b      	ldr	r3, [r5, #0]
 8001944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001948:	602b      	str	r3, [r5, #0]
 800194a:	e7e3      	b.n	8001914 <HAL_RCC_OscConfig+0x68>
 800194c:	682a      	ldr	r2, [r5, #0]
 800194e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001952:	602a      	str	r2, [r5, #0]
 8001954:	682a      	ldr	r2, [r5, #0]
 8001956:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800195a:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1dd      	bne.n	800191c <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8001960:	f7ff fe80 	bl	8001664 <HAL_GetTick>
 8001964:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	039f      	lsls	r7, r3, #14
 800196a:	d5a6      	bpl.n	80018ba <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fe7a 	bl	8001664 <HAL_GetTick>
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	2864      	cmp	r0, #100	@ 0x64
 8001974:	d9f7      	bls.n	8001966 <HAL_RCC_OscConfig+0xba>
 8001976:	e7dd      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001978:	4b66      	ldr	r3, [pc, #408]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	f012 0f0c 	tst.w	r2, #12
 8001980:	d007      	beq.n	8001992 <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001988:	2a08      	cmp	r2, #8
 800198a:	d111      	bne.n	80019b0 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	025d      	lsls	r5, r3, #9
 8001990:	d40e      	bmi.n	80019b0 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4a60      	ldr	r2, [pc, #384]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	0799      	lsls	r1, r3, #30
 8001998:	d502      	bpl.n	80019a0 <HAL_RCC_OscConfig+0xf4>
 800199a:	68e3      	ldr	r3, [r4, #12]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d1b2      	bne.n	8001906 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	6921      	ldr	r1, [r4, #16]
 80019a4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019ac:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	e787      	b.n	80018c0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b0:	68e2      	ldr	r2, [r4, #12]
 80019b2:	4b59      	ldr	r3, [pc, #356]	@ (8001b18 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	b1b2      	cbz	r2, 80019e4 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ba:	f7ff fe53 	bl	8001664 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019be:	4d55      	ldr	r5, [pc, #340]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80019c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	079b      	lsls	r3, r3, #30
 80019c6:	d507      	bpl.n	80019d8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	6922      	ldr	r2, [r4, #16]
 80019cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019d4:	602b      	str	r3, [r5, #0]
 80019d6:	e773      	b.n	80018c0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fe44 	bl	8001664 <HAL_GetTick>
 80019dc:	1b80      	subs	r0, r0, r6
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9ef      	bls.n	80019c2 <HAL_RCC_OscConfig+0x116>
 80019e2:	e7a7      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80019e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019e6:	f7ff fe3d 	bl	8001664 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4e4a      	ldr	r6, [pc, #296]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80019ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	6833      	ldr	r3, [r6, #0]
 80019f0:	079f      	lsls	r7, r3, #30
 80019f2:	f57f af65 	bpl.w	80018c0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fe35 	bl	8001664 <HAL_GetTick>
 80019fa:	1b40      	subs	r0, r0, r5
 80019fc:	2802      	cmp	r0, #2
 80019fe:	d9f6      	bls.n	80019ee <HAL_RCC_OscConfig+0x142>
 8001a00:	e798      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a02:	6962      	ldr	r2, [r4, #20]
 8001a04:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	b182      	cbz	r2, 8001a2a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fe29 	bl	8001664 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	4e40      	ldr	r6, [pc, #256]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001a14:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001a18:	079b      	lsls	r3, r3, #30
 8001a1a:	f53f af55 	bmi.w	80018c8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fe21 	bl	8001664 <HAL_GetTick>
 8001a22:	1b40      	subs	r0, r0, r5
 8001a24:	2802      	cmp	r0, #2
 8001a26:	d9f6      	bls.n	8001a16 <HAL_RCC_OscConfig+0x16a>
 8001a28:	e784      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8001a2a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fe19 	bl	8001664 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a32:	4e38      	ldr	r6, [pc, #224]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001a34:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a36:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001a38:	079f      	lsls	r7, r3, #30
 8001a3a:	f57f af45 	bpl.w	80018c8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fe11 	bl	8001664 <HAL_GetTick>
 8001a42:	1b40      	subs	r0, r0, r5
 8001a44:	2802      	cmp	r0, #2
 8001a46:	d9f6      	bls.n	8001a36 <HAL_RCC_OscConfig+0x18a>
 8001a48:	e774      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 8001a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4e:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8001a52:	d128      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	9201      	str	r2, [sp, #4]
 8001a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a58:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a68:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4d2c      	ldr	r5, [pc, #176]	@ (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	05d8      	lsls	r0, r3, #23
 8001a70:	d51b      	bpl.n	8001aaa <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a72:	68a3      	ldr	r3, [r4, #8]
 8001a74:	4d27      	ldr	r5, [pc, #156]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d127      	bne.n	8001aca <HAL_RCC_OscConfig+0x21e>
 8001a7a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001a82:	f7ff fdef 	bl	8001664 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	4e23      	ldr	r6, [pc, #140]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001a88:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001a90:	079a      	lsls	r2, r3, #30
 8001a92:	d539      	bpl.n	8001b08 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 8001a94:	2f00      	cmp	r7, #0
 8001a96:	f43f af1b 	beq.w	80018d0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b14 <HAL_RCC_OscConfig+0x268>)
 8001a9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa4:	e714      	b.n	80018d0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2700      	movs	r7, #0
 8001aa8:	e7df      	b.n	8001a6a <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fdd7 	bl	8001664 <HAL_GetTick>
 8001ab6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	05d9      	lsls	r1, r3, #23
 8001abc:	d4d9      	bmi.n	8001a72 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7ff fdd1 	bl	8001664 <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f7      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x20c>
 8001ac8:	e734      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d104      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x22c>
 8001ace:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	672b      	str	r3, [r5, #112]	@ 0x70
 8001ad6:	e7d0      	b.n	8001a7a <HAL_RCC_OscConfig+0x1ce>
 8001ad8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	672a      	str	r2, [r5, #112]	@ 0x70
 8001ae0:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001ae2:	f022 0204 	bic.w	r2, r2, #4
 8001ae6:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ca      	bne.n	8001a82 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8001aec:	f7ff fdba 	bl	8001664 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001af4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001af8:	079b      	lsls	r3, r3, #30
 8001afa:	d5cb      	bpl.n	8001a94 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fdb2 	bl	8001664 <HAL_GetTick>
 8001b00:	1b80      	subs	r0, r0, r6
 8001b02:	4540      	cmp	r0, r8
 8001b04:	d9f7      	bls.n	8001af6 <HAL_RCC_OscConfig+0x24a>
 8001b06:	e715      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff fdac 	bl	8001664 <HAL_GetTick>
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	4540      	cmp	r0, r8
 8001b10:	d9bd      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1e2>
 8001b12:	e70f      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
 8001b14:	40023800 	.word	0x40023800
 8001b18:	42470000 	.word	0x42470000
 8001b1c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b20:	4d37      	ldr	r5, [pc, #220]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
 8001b22:	68aa      	ldr	r2, [r5, #8]
 8001b24:	f002 020c 	and.w	r2, r2, #12
 8001b28:	2a08      	cmp	r2, #8
 8001b2a:	d03e      	beq.n	8001baa <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <HAL_RCC_OscConfig+0x358>)
 8001b30:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8001b34:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b36:	d12b      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8001b38:	f7ff fd94 	bl	8001664 <HAL_GetTick>
 8001b3c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	0199      	lsls	r1, r3, #6
 8001b42:	d41f      	bmi.n	8001b84 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b44:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b4c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b50:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b56:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001b58:	0852      	lsrs	r2, r2, #1
 8001b5a:	3a01      	subs	r2, #1
 8001b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b60:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b62:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b64:	4d26      	ldr	r5, [pc, #152]	@ (8001c00 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8001b66:	2201      	movs	r2, #1
 8001b68:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fd7b 	bl	8001664 <HAL_GetTick>
 8001b6e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	019a      	lsls	r2, r3, #6
 8001b74:	f53f aeb0 	bmi.w	80018d8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff fd74 	bl	8001664 <HAL_GetTick>
 8001b7c:	1b00      	subs	r0, r0, r4
 8001b7e:	2802      	cmp	r0, #2
 8001b80:	d9f6      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2c4>
 8001b82:	e6d7      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fd6e 	bl	8001664 <HAL_GetTick>
 8001b88:	1b80      	subs	r0, r0, r6
 8001b8a:	2802      	cmp	r0, #2
 8001b8c:	d9d7      	bls.n	8001b3e <HAL_RCC_OscConfig+0x292>
 8001b8e:	e6d1      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001b90:	f7ff fd68 	bl	8001664 <HAL_GetTick>
 8001b94:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	682b      	ldr	r3, [r5, #0]
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	f57f ae9d 	bpl.w	80018d8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fd61 	bl	8001664 <HAL_GetTick>
 8001ba2:	1b00      	subs	r0, r0, r4
 8001ba4:	2802      	cmp	r0, #2
 8001ba6:	d9f6      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
 8001ba8:	e6c4      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	f43f aeab 	beq.w	8001906 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8001bb0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	4291      	cmp	r1, r2
 8001bba:	f47f aea4 	bne.w	8001906 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	428a      	cmp	r2, r1
 8001bc6:	f47f ae9e 	bne.w	8001906 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bcc:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bd6:	f47f ae96 	bne.w	8001906 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bda:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001bdc:	0852      	lsrs	r2, r2, #1
 8001bde:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001be2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001be8:	f47f ae8d 	bne.w	8001906 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001bee:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001bf6:	bf14      	ite	ne
 8001bf8:	2001      	movne	r0, #1
 8001bfa:	2000      	moveq	r0, #0
 8001bfc:	e69b      	b.n	8001936 <HAL_RCC_OscConfig+0x8a>
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470000 	.word	0x42470000

08001c08 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c08:	4913      	ldr	r1, [pc, #76]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c0a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0c:	688b      	ldr	r3, [r1, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d01c      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x48>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c20:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	bf14      	ite	ne
 8001c26:	480d      	ldrne	r0, [pc, #52]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c28:	480d      	ldreq	r0, [pc, #52]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c2e:	bf18      	it	ne
 8001c30:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c32:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	fba1 0100 	umull	r0, r1, r1, r0
 8001c3a:	f7ff f82d 	bl	8000c98 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001c4a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c4e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c52:	e7fc      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001c56:	e7fa      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x46>
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	017d7840 	.word	0x017d7840
 8001c60:	00f42400 	.word	0x00f42400

08001c64 <HAL_RCC_ClockConfig>:
{
 8001c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c68:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	b910      	cbnz	r0, 8001c74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
}
 8001c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b43      	ldr	r3, [pc, #268]	@ (8001d84 <HAL_RCC_ClockConfig+0x120>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f002 0207 	and.w	r2, r2, #7
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	d328      	bcc.n	8001cd2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	6821      	ldr	r1, [r4, #0]
 8001c82:	078f      	lsls	r7, r1, #30
 8001c84:	d42d      	bmi.n	8001ce2 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	07c8      	lsls	r0, r1, #31
 8001c88:	d440      	bmi.n	8001d0c <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <HAL_RCC_ClockConfig+0x120>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f002 0207 	and.w	r2, r2, #7
 8001c92:	42aa      	cmp	r2, r5
 8001c94:	d865      	bhi.n	8001d62 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	0751      	lsls	r1, r2, #29
 8001c9a:	d46b      	bmi.n	8001d74 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	0713      	lsls	r3, r2, #28
 8001c9e:	d507      	bpl.n	8001cb0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca0:	4a39      	ldr	r2, [pc, #228]	@ (8001d88 <HAL_RCC_ClockConfig+0x124>)
 8001ca2:	6921      	ldr	r1, [r4, #16]
 8001ca4:	6893      	ldr	r3, [r2, #8]
 8001ca6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001caa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb0:	f7ff ffaa 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001cb4:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_ClockConfig+0x124>)
 8001cb6:	4a35      	ldr	r2, [pc, #212]	@ (8001d8c <HAL_RCC_ClockConfig+0x128>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	40d8      	lsrs	r0, r3
 8001cc2:	4b33      	ldr	r3, [pc, #204]	@ (8001d90 <HAL_RCC_ClockConfig+0x12c>)
 8001cc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001cc6:	4b33      	ldr	r3, [pc, #204]	@ (8001d94 <HAL_RCC_ClockConfig+0x130>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f7ff fbc5 	bl	8001458 <HAL_InitTick>
  return HAL_OK;
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e7ce      	b.n	8001c70 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	b2ca      	uxtb	r2, r1
 8001cd4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	d1c6      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xa>
 8001ce0:	e7ce      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <HAL_RCC_ClockConfig+0x124>)
 8001ce4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	bf1e      	ittt	ne
 8001cea:	689a      	ldrne	r2, [r3, #8]
 8001cec:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8001cf0:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf4:	bf42      	ittt	mi
 8001cf6:	689a      	ldrmi	r2, [r3, #8]
 8001cf8:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8001cfc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	68a0      	ldr	r0, [r4, #8]
 8001d02:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001d06:	4302      	orrs	r2, r0
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	e7bc      	b.n	8001c86 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	6862      	ldr	r2, [r4, #4]
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <HAL_RCC_ClockConfig+0x124>)
 8001d10:	2a01      	cmp	r2, #1
 8001d12:	d11c      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	d0a8      	beq.n	8001c6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1c:	4e1a      	ldr	r6, [pc, #104]	@ (8001d88 <HAL_RCC_ClockConfig+0x124>)
 8001d1e:	68b3      	ldr	r3, [r6, #8]
 8001d20:	f023 0303 	bic.w	r3, r3, #3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d28:	f7ff fc9c 	bl	8001664 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001d30:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	68b3      	ldr	r3, [r6, #8]
 8001d34:	6862      	ldr	r2, [r4, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d3e:	d0a4      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fc90 	bl	8001664 <HAL_GetTick>
 8001d44:	1bc0      	subs	r0, r0, r7
 8001d46:	4540      	cmp	r0, r8
 8001d48:	d9f3      	bls.n	8001d32 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	e790      	b.n	8001c70 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4e:	1e91      	subs	r1, r2, #2
 8001d50:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d54:	d802      	bhi.n	8001d5c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d5a:	e7de      	b.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	f013 0f02 	tst.w	r3, #2
 8001d60:	e7db      	b.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	b2ea      	uxtb	r2, r5
 8001d64:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	42ab      	cmp	r3, r5
 8001d6e:	f47f af7e 	bne.w	8001c6e <HAL_RCC_ClockConfig+0xa>
 8001d72:	e790      	b.n	8001c96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4904      	ldr	r1, [pc, #16]	@ (8001d88 <HAL_RCC_ClockConfig+0x124>)
 8001d76:	68e0      	ldr	r0, [r4, #12]
 8001d78:	688b      	ldr	r3, [r1, #8]
 8001d7a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	608b      	str	r3, [r1, #8]
 8001d82:	e78b      	b.n	8001c9c <HAL_RCC_ClockConfig+0x38>
 8001d84:	40023c00 	.word	0x40023c00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	0800878c 	.word	0x0800878c
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000008 	.word	0x20000008

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001da6:	6810      	ldr	r0, [r2, #0]
}
 8001da8:	40d8      	lsrs	r0, r3
 8001daa:	4770      	bx	lr
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08008784 	.word	0x08008784
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dc6:	6810      	ldr	r0, [r2, #0]
}
 8001dc8:	40d8      	lsrs	r0, r3
 8001dca:	4770      	bx	lr
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08008784 	.word	0x08008784
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_GetClockConfig+0x34>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001dec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8001df4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001dfe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_RCC_GetClockConfig+0x38>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	600b      	str	r3, [r1, #0]
}
 8001e0a:	4770      	bx	lr
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e18:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d128      	bne.n	8001e72 <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e26:	6803      	ldr	r3, [r0, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e30:	4a11      	ldr	r2, [pc, #68]	@ (8001e78 <HAL_TIM_Base_Start_IT+0x60>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d012      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x44>
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3a:	d00f      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x44>
 8001e3c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x44>
 8001e44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x44>
 8001e4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x44>
 8001e54:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d104      	bne.n	8001e66 <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e62:	2a06      	cmp	r2, #6
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_Base_Start_IT+0x56>
    {
      __HAL_TIM_ENABLE(htim);
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2000      	movs	r0, #0
 8001e70:	4770      	bx	lr
    return HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000

08001e7c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8001e7c:	4770      	bx	lr

08001e7e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8001e84:	6803      	ldr	r3, [r0, #0]
{
 8001e86:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001e88:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e8a:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e8c:	07b1      	lsls	r1, r6, #30
{
 8001e8e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e90:	d50d      	bpl.n	8001eae <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e92:	07aa      	lsls	r2, r5, #30
 8001e94:	d50b      	bpl.n	8001eae <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e96:	f06f 0202 	mvn.w	r2, #2
 8001e9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	079b      	lsls	r3, r3, #30
 8001ea4:	d069      	beq.n	8001f7a <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	f7ff ffea 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eae:	0771      	lsls	r1, r6, #29
 8001eb0:	d510      	bpl.n	8001ed4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eb2:	076a      	lsls	r2, r5, #29
 8001eb4:	d50e      	bpl.n	8001ed4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	f06f 0204 	mvn.w	r2, #4
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eca:	d05c      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ecc:	f7ff ffd7 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ed4:	0733      	lsls	r3, r6, #28
 8001ed6:	d50f      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ed8:	0728      	lsls	r0, r5, #28
 8001eda:	d50d      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	f06f 0208 	mvn.w	r2, #8
 8001ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001eec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eee:	d050      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	f7ff ffc5 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ef8:	06f2      	lsls	r2, r6, #27
 8001efa:	d510      	bpl.n	8001f1e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001efc:	06eb      	lsls	r3, r5, #27
 8001efe:	d50e      	bpl.n	8001f1e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	f06f 0210 	mvn.w	r2, #16
 8001f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f08:	2208      	movs	r2, #8
 8001f0a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f14:	d043      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	f7ff ffb2 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f1e:	07f0      	lsls	r0, r6, #31
 8001f20:	d508      	bpl.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	07e9      	lsls	r1, r5, #31
 8001f24:	d506      	bpl.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fa32 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f34:	0632      	lsls	r2, r6, #24
 8001f36:	d508      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f38:	062b      	lsls	r3, r5, #24
 8001f3a:	d506      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 f89e 	bl	8002086 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f4a:	0670      	lsls	r0, r6, #25
 8001f4c:	d508      	bpl.n	8001f60 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f4e:	0669      	lsls	r1, r5, #25
 8001f50:	d506      	bpl.n	8001f60 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f58:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff ff91 	bl	8001e82 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f60:	06b2      	lsls	r2, r6, #26
 8001f62:	d522      	bpl.n	8001faa <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f64:	06ab      	lsls	r3, r5, #26
 8001f66:	d520      	bpl.n	8001faa <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001f6e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f70:	611a      	str	r2, [r3, #16]
}
 8001f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001f76:	f000 b885 	b.w	8002084 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	f7ff ff7f 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7ff ff7e 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f84:	e791      	b.n	8001eaa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	f7ff ff79 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff ff78 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f90:	e79e      	b.n	8001ed0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	f7ff ff73 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff ff72 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f9c:	e7aa      	b.n	8001ef4 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	f7ff ff6d 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7ff ff6c 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fa8:	e7b7      	b.n	8001f1a <HAL_TIM_IRQHandler+0x96>
}
 8001faa:	bd70      	pop	{r4, r5, r6, pc}

08001fac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8001fae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	4290      	cmp	r0, r2
 8001fb2:	d00e      	beq.n	8001fd2 <TIM_Base_SetConfig+0x26>
 8001fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001fb8:	d00b      	beq.n	8001fd2 <TIM_Base_SetConfig+0x26>
 8001fba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001fbe:	4290      	cmp	r0, r2
 8001fc0:	d007      	beq.n	8001fd2 <TIM_Base_SetConfig+0x26>
 8001fc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_Base_SetConfig+0x26>
 8001fca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d108      	bne.n	8001fe4 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001fd2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fda:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	e00a      	b.n	8001ffa <TIM_Base_SetConfig+0x4e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe4:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <TIM_Base_SetConfig+0x7c>)
 8001fe6:	4290      	cmp	r0, r2
 8001fe8:	d0f7      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fee:	4290      	cmp	r0, r2
 8001ff0:	d0f3      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001ff2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ff6:	4290      	cmp	r0, r2
 8001ff8:	d0ef      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ffa:	694a      	ldr	r2, [r1, #20]
 8001ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002000:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002002:	688a      	ldr	r2, [r1, #8]
 8002004:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002006:	680a      	ldr	r2, [r1, #0]
 8002008:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200a:	4a06      	ldr	r2, [pc, #24]	@ (8002024 <TIM_Base_SetConfig+0x78>)
 800200c:	4290      	cmp	r0, r2
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200e:	bf04      	itt	eq
 8002010:	690a      	ldreq	r2, [r1, #16]
 8002012:	6302      	streq	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002014:	6802      	ldr	r2, [r0, #0]
 8002016:	f042 0204 	orr.w	r2, r2, #4
 800201a:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	2201      	movs	r2, #1
 800201e:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 8002020:	6003      	str	r3, [r0, #0]
}
 8002022:	4770      	bx	lr
 8002024:	40010000 	.word	0x40010000
 8002028:	40014000 	.word	0x40014000

0800202c <HAL_TIM_Base_Init>:
{
 800202c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800202e:	4604      	mov	r4, r0
 8002030:	b330      	cbz	r0, 8002080 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002036:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800203a:	b91b      	cbnz	r3, 8002044 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800203c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002040:	f7ff fee8 	bl	8001e14 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002044:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002046:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204c:	1d21      	adds	r1, r4, #4
 800204e:	f7ff ffad 	bl	8001fac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002052:	2301      	movs	r3, #1
 8002054:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8002058:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800205e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002062:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002066:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800206e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002072:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002076:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800207a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800207e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002080:	2001      	movs	r0, #1
 8002082:	e7fc      	b.n	800207e <HAL_TIM_Base_Init+0x52>

08002084 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002084:	4770      	bx	lr

08002086 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002086:	4770      	bx	lr

08002088 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002088:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208a:	f102 030c 	add.w	r3, r2, #12
 800208e:	e853 3f00 	ldrex	r3, [r3]
 8002092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	320c      	adds	r2, #12
 8002098:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	2900      	cmp	r1, #0
 80020a0:	d1f2      	bne.n	8002088 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	f102 0314 	add.w	r3, r2, #20
 80020a6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ae:	f102 0c14 	add.w	ip, r2, #20
 80020b2:	e84c 3100 	strex	r1, r3, [ip]
 80020b6:	2900      	cmp	r1, #0
 80020b8:	d1f3      	bne.n	80020a2 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10b      	bne.n	80020d8 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c0:	f102 030c 	add.w	r3, r2, #12
 80020c4:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020cc:	f102 0c0c 	add.w	ip, r2, #12
 80020d0:	e84c 3100 	strex	r1, r3, [ip]
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d1f3      	bne.n	80020c0 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020d8:	2320      	movs	r3, #32
 80020da:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020de:	2300      	movs	r3, #0
 80020e0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80020e2:	4770      	bx	lr

080020e4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e4:	6802      	ldr	r2, [r0, #0]
 80020e6:	68c1      	ldr	r1, [r0, #12]
{
 80020e8:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ea:	6913      	ldr	r3, [r2, #16]
 80020ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020f0:	430b      	orrs	r3, r1
 80020f2:	6113      	str	r3, [r2, #16]
{
 80020f4:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020f6:	6883      	ldr	r3, [r0, #8]
 80020f8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80020fa:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020fc:	4303      	orrs	r3, r0
 80020fe:	6968      	ldr	r0, [r5, #20]
 8002100:	4303      	orrs	r3, r0
 8002102:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002104:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8002108:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800210c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800210e:	430b      	orrs	r3, r1
 8002110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002112:	6953      	ldr	r3, [r2, #20]
 8002114:	69a9      	ldr	r1, [r5, #24]
 8002116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211a:	430b      	orrs	r3, r1
 800211c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <UART_SetConfig+0xb8>)
 8002120:	429a      	cmp	r2, r3
 8002122:	d003      	beq.n	800212c <UART_SetConfig+0x48>
 8002124:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002128:	429a      	cmp	r2, r3
 800212a:	d124      	bne.n	8002176 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800212c:	f7ff fe44 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002130:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002132:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002134:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002138:	e9d5 4300 	ldrd	r4, r3, [r5]
 800213c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002140:	d11c      	bne.n	800217c <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002142:	18da      	adds	r2, r3, r3
 8002144:	f04f 0500 	mov.w	r5, #0
 8002148:	eb45 0305 	adc.w	r3, r5, r5
 800214c:	f7fe fda4 	bl	8000c98 <__aeabi_uldivmod>
 8002150:	2264      	movs	r2, #100	@ 0x64
 8002152:	fbb0 f1f2 	udiv	r1, r0, r2
 8002156:	fb02 0311 	mls	r3, r2, r1, r0
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	3332      	adds	r3, #50	@ 0x32
 800215e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002162:	f003 0207 	and.w	r2, r3, #7
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800216c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002170:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002172:	60a3      	str	r3, [r4, #8]
  }
}
 8002174:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002176:	f7ff fe0f 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 800217a:	e7d9      	b.n	8002130 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800217c:	009a      	lsls	r2, r3, #2
 800217e:	0f9b      	lsrs	r3, r3, #30
 8002180:	f7fe fd8a 	bl	8000c98 <__aeabi_uldivmod>
 8002184:	2264      	movs	r2, #100	@ 0x64
 8002186:	fbb0 f1f2 	udiv	r1, r0, r2
 800218a:	fb02 0311 	mls	r3, r2, r1, r0
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	3332      	adds	r3, #50	@ 0x32
 8002192:	fbb3 f3f2 	udiv	r3, r3, r2
 8002196:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800219a:	e7ea      	b.n	8002172 <UART_SetConfig+0x8e>
 800219c:	40011000 	.word	0x40011000

080021a0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80021a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021a2:	4605      	mov	r5, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	4617      	mov	r7, r2
 80021a8:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021aa:	682a      	ldr	r2, [r5, #0]
 80021ac:	6813      	ldr	r3, [r2, #0]
 80021ae:	ea34 0303 	bics.w	r3, r4, r3
 80021b2:	d101      	bne.n	80021b8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80021b4:	2000      	movs	r0, #0
 80021b6:	e021      	b.n	80021fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80021b8:	1c70      	adds	r0, r6, #1
 80021ba:	d0f7      	beq.n	80021ac <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7ff fa52 	bl	8001664 <HAL_GetTick>
 80021c0:	1bc0      	subs	r0, r0, r7
 80021c2:	4286      	cmp	r6, r0
 80021c4:	d31c      	bcc.n	8002200 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 80021c6:	b1de      	cbz	r6, 8002200 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	0751      	lsls	r1, r2, #29
 80021ce:	d5ec      	bpl.n	80021aa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80021d0:	2c80      	cmp	r4, #128	@ 0x80
 80021d2:	d0ea      	beq.n	80021aa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80021d4:	2c40      	cmp	r4, #64	@ 0x40
 80021d6:	d0e8      	beq.n	80021aa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	0712      	lsls	r2, r2, #28
 80021dc:	d5e5      	bpl.n	80021aa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021de:	2400      	movs	r4, #0
 80021e0:	9401      	str	r4, [sp, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80021ea:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021ec:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80021ee:	f7ff ff4b 	bl	8002088 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021f2:	2308      	movs	r3, #8
 80021f4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80021f6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80021fa:	2001      	movs	r0, #1
}
 80021fc:	b003      	add	sp, #12
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002200:	2003      	movs	r0, #3
 8002202:	e7fb      	b.n	80021fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08002204 <HAL_UART_Init>:
{
 8002204:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002206:	4604      	mov	r4, r0
 8002208:	b348      	cbz	r0, 800225e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800220a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800220e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002212:	b91b      	cbnz	r3, 800221c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002214:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002218:	f7ff f8e8 	bl	80013ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800221c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	2324      	movs	r3, #36	@ 0x24
 8002220:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002224:	68d3      	ldr	r3, [r2, #12]
 8002226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800222a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff ff59 	bl	80020e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800223a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002242:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800224a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800224e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002250:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002252:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002256:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800225a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800225c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e7fc      	b.n	800225c <HAL_UART_Init+0x58>

08002262 <HAL_UART_Transmit>:
{
 8002262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002266:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002268:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800226c:	2b20      	cmp	r3, #32
{
 800226e:	4604      	mov	r4, r0
 8002270:	460e      	mov	r6, r1
 8002272:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002274:	d13f      	bne.n	80022f6 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8002276:	2900      	cmp	r1, #0
 8002278:	d03f      	beq.n	80022fa <HAL_UART_Transmit+0x98>
 800227a:	2a00      	cmp	r2, #0
 800227c:	d03d      	beq.n	80022fa <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002280:	2500      	movs	r5, #0
 8002282:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002284:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002288:	f7ff f9ec 	bl	8001664 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800228e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8002294:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8002296:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	d103      	bne.n	80022a2 <HAL_UART_Transmit+0x40>
 800229a:	6923      	ldr	r3, [r4, #16]
 800229c:	b90b      	cbnz	r3, 80022a2 <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 800229e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80022a0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80022a2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	b953      	cbnz	r3, 80022be <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022a8:	4643      	mov	r3, r8
 80022aa:	464a      	mov	r2, r9
 80022ac:	2140      	movs	r1, #64	@ 0x40
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff ff76 	bl	80021a0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80022b4:	2320      	movs	r3, #32
 80022b6:	b950      	cbnz	r0, 80022ce <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 80022b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80022bc:	e00a      	b.n	80022d4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	4643      	mov	r3, r8
 80022c0:	464a      	mov	r2, r9
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff6b 	bl	80021a0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80022ca:	b128      	cbz	r0, 80022d8 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80022cc:	2320      	movs	r3, #32
 80022ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
}
 80022d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022d8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80022da:	b94e      	cbnz	r6, 80022f0 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80022e6:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80022e8:	3901      	subs	r1, #1
 80022ea:	b289      	uxth	r1, r1
 80022ec:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80022ee:	e7d8      	b.n	80022a2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80022f4:	e7f6      	b.n	80022e4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80022f6:	2002      	movs	r0, #2
 80022f8:	e7ec      	b.n	80022d4 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
 80022fc:	e7ea      	b.n	80022d4 <HAL_UART_Transmit+0x72>

080022fe <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80022fe:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8002300:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002304:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002306:	f001 f87b 	bl	8003400 <xTaskGetSchedulerState>
 800230a:	2801      	cmp	r0, #1
 800230c:	d003      	beq.n	8002316 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800230e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002312:	f001 bb7f 	b.w	8003a14 <xPortSysTickHandler>
}
 8002316:	bd08      	pop	{r3, pc}

08002318 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002318:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800231c:	b92b      	cbnz	r3, 800232a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <osKernelInitialize+0x20>)
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	b928      	cbnz	r0, 8002330 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002328:	4770      	bx	lr
    stat = osErrorISR;
 800232a:	f06f 0005 	mvn.w	r0, #5
 800232e:	4770      	bx	lr
    } else {
      stat = osError;
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000a04 	.word	0x20000a04

0800233c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <vApplicationGetIdleTaskMemory+0x10>)
 800233e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <vApplicationGetIdleTaskMemory+0x14>)
 8002342:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	2000095c 	.word	0x2000095c
 8002350:	2000075c 	.word	0x2000075c

08002354 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <vApplicationGetTimerTaskMemory+0x10>)
 8002356:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002358:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <vApplicationGetTimerTaskMemory+0x14>)
 800235a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800235c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	4770      	bx	lr
 8002364:	200006b4 	.word	0x200006b4
 8002368:	200002b4 	.word	0x200002b4

0800236c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800236c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002370:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002374:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002378:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800237a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002380:	4770      	bx	lr

08002382 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002386:	4770      	bx	lr

08002388 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002388:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800238a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002390:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002392:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002394:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002396:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002398:	3301      	adds	r3, #1
 800239a:	6003      	str	r3, [r0, #0]
}
 800239c:	4770      	bx	lr

0800239e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800239e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023a0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023a2:	1c63      	adds	r3, r4, #1
 80023a4:	d10a      	bne.n	80023bc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023a6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023ac:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023ae:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80023b0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80023b2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80023b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80023b6:	3301      	adds	r3, #1
 80023b8:	6003      	str	r3, [r0, #0]
}
 80023ba:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023bc:	f100 0208 	add.w	r2, r0, #8
 80023c0:	4613      	mov	r3, r2
 80023c2:	6852      	ldr	r2, [r2, #4]
 80023c4:	6815      	ldr	r5, [r2, #0]
 80023c6:	42a5      	cmp	r5, r4
 80023c8:	d9fa      	bls.n	80023c0 <vListInsert+0x22>
 80023ca:	e7ed      	b.n	80023a8 <vListInsert+0xa>

080023cc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023cc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 80023d0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023d2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023da:	bf08      	it	eq
 80023dc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023de:	2200      	movs	r2, #0
 80023e0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	3a01      	subs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023e8:	6818      	ldr	r0, [r3, #0]
}
 80023ea:	4770      	bx	lr

080023ec <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023f0:	f001 faa8 	bl	8003944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023f4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80023f6:	f001 fac5 	bl	8003984 <vPortExitCritical>

	return xReturn;
}
 80023fa:	fab4 f084 	clz	r0, r4
 80023fe:	0940      	lsrs	r0, r0, #5
 8002400:	bd10      	pop	{r4, pc}

08002402 <prvCopyDataToQueue>:
{
 8002402:	b570      	push	{r4, r5, r6, lr}
 8002404:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002406:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002408:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 800240a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800240c:	b942      	cbnz	r2, 8002420 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800240e:	6806      	ldr	r6, [r0, #0]
 8002410:	b99e      	cbnz	r6, 800243a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002412:	6880      	ldr	r0, [r0, #8]
 8002414:	f001 f804 	bl	8003420 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002418:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800241a:	3501      	adds	r5, #1
 800241c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800241e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002420:	b96e      	cbnz	r6, 800243e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002422:	6840      	ldr	r0, [r0, #4]
 8002424:	f002 fd33 	bl	8004e8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800242c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800242e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002430:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002432:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002434:	bf24      	itt	cs
 8002436:	6823      	ldrcs	r3, [r4, #0]
 8002438:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800243a:	2000      	movs	r0, #0
 800243c:	e7ed      	b.n	800241a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800243e:	68c0      	ldr	r0, [r0, #12]
 8002440:	f002 fd25 	bl	8004e8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002444:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	4251      	negs	r1, r2
 800244a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800244c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800244e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002450:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002452:	bf3e      	ittt	cc
 8002454:	68a3      	ldrcc	r3, [r4, #8]
 8002456:	185b      	addcc	r3, r3, r1
 8002458:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800245a:	2e02      	cmp	r6, #2
 800245c:	d1ed      	bne.n	800243a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800245e:	b10d      	cbz	r5, 8002464 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002460:	3d01      	subs	r5, #1
 8002462:	e7ea      	b.n	800243a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002464:	4628      	mov	r0, r5
 8002466:	e7d8      	b.n	800241a <prvCopyDataToQueue+0x18>

08002468 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8002468:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800246a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
	{
 800246c:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800246e:	b944      	cbnz	r4, 8002482 <prvNotifyQueueSetContainer+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	e7fe      	b.n	8002480 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002482:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002484:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002486:	429a      	cmp	r2, r3
 8002488:	d308      	bcc.n	800249c <prvNotifyQueueSetContainer+0x34>
 800248a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	e7fe      	b.n	800249a <prvNotifyQueueSetContainer+0x32>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800249c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800249e:	4293      	cmp	r3, r2
 80024a0:	d91b      	bls.n	80024da <prvNotifyQueueSetContainer+0x72>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80024a2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80024a6:	2200      	movs	r2, #0
 80024a8:	a901      	add	r1, sp, #4
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff ffa9 	bl	8002402 <prvCopyDataToQueue>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80024b0:	b26d      	sxtb	r5, r5

			if( cTxLock == queueUNLOCKED )
 80024b2:	1c6b      	adds	r3, r5, #1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80024b4:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
 80024b6:	d10b      	bne.n	80024d0 <prvNotifyQueueSetContainer+0x68>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80024ba:	b133      	cbz	r3, 80024ca <prvNotifyQueueSetContainer+0x62>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80024bc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80024c0:	f000 ff10 	bl	80032e4 <xTaskRemoveFromEventList>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80024c4:	2800      	cmp	r0, #0
 80024c6:	bf18      	it	ne
 80024c8:	2601      	movne	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 80024ca:	4630      	mov	r0, r6
 80024cc:	b002      	add	sp, #8
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024d0:	3501      	adds	r5, #1
 80024d2:	b26d      	sxtb	r5, r5
 80024d4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80024d8:	e7f7      	b.n	80024ca <prvNotifyQueueSetContainer+0x62>
	BaseType_t xReturn = pdFALSE;
 80024da:	2600      	movs	r6, #0
 80024dc:	e7f5      	b.n	80024ca <prvNotifyQueueSetContainer+0x62>

080024de <prvCopyDataFromQueue>:
{
 80024de:	4603      	mov	r3, r0
 80024e0:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80024e4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024e6:	b16a      	cbz	r2, 8002504 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024e8:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024ea:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024ec:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024ee:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024f0:	bf28      	it	cs
 80024f2:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024f4:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024f6:	bf28      	it	cs
 80024f8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024fa:	68d9      	ldr	r1, [r3, #12]
}
 80024fc:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002500:	f002 bcc5 	b.w	8004e8e <memcpy>
}
 8002504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002508:	4770      	bx	lr

0800250a <prvUnlockQueue>:
{
 800250a:	b570      	push	{r4, r5, r6, lr}
 800250c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800250e:	f001 fa19 	bl	8003944 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002512:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002516:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800251a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800251c:	2d00      	cmp	r5, #0
 800251e:	dd0c      	ble.n	800253a <prvUnlockQueue+0x30>
				if( pxQueue->pxQueueSetContainer != NULL )
 8002520:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002522:	b143      	cbz	r3, 8002536 <prvUnlockQueue+0x2c>
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff9f 	bl	8002468 <prvNotifyQueueSetContainer>
 800252a:	b108      	cbz	r0, 8002530 <prvUnlockQueue+0x26>
						vTaskMissedYield();
 800252c:	f000 ff62 	bl	80033f4 <vTaskMissedYield>
			--cTxLock;
 8002530:	3d01      	subs	r5, #1
 8002532:	b26d      	sxtb	r5, r5
 8002534:	e7f2      	b.n	800251c <prvUnlockQueue+0x12>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002536:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002538:	b9b3      	cbnz	r3, 8002568 <prvUnlockQueue+0x5e>
		pxQueue->cTxLock = queueUNLOCKED;
 800253a:	23ff      	movs	r3, #255	@ 0xff
 800253c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8002540:	f001 fa20 	bl	8003984 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002544:	f001 f9fe 	bl	8003944 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002548:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800254c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002550:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002552:	2d00      	cmp	r5, #0
 8002554:	dd01      	ble.n	800255a <prvUnlockQueue+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002556:	6923      	ldr	r3, [r4, #16]
 8002558:	b953      	cbnz	r3, 8002570 <prvUnlockQueue+0x66>
		pxQueue->cRxLock = queueUNLOCKED;
 800255a:	23ff      	movs	r3, #255	@ 0xff
 800255c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8002560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002564:	f001 ba0e 	b.w	8003984 <vPortExitCritical>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002568:	4630      	mov	r0, r6
 800256a:	f000 febb 	bl	80032e4 <xTaskRemoveFromEventList>
 800256e:	e7dc      	b.n	800252a <prvUnlockQueue+0x20>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002570:	4630      	mov	r0, r6
 8002572:	f000 feb7 	bl	80032e4 <xTaskRemoveFromEventList>
 8002576:	b108      	cbz	r0, 800257c <prvUnlockQueue+0x72>
					vTaskMissedYield();
 8002578:	f000 ff3c 	bl	80033f4 <vTaskMissedYield>
				--cRxLock;
 800257c:	3d01      	subs	r5, #1
 800257e:	b26d      	sxtb	r5, r5
 8002580:	e7e7      	b.n	8002552 <prvUnlockQueue+0x48>

08002582 <xQueueGenericReset>:
{
 8002582:	b538      	push	{r3, r4, r5, lr}
 8002584:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002586:	4604      	mov	r4, r0
 8002588:	b940      	cbnz	r0, 800259c <xQueueGenericReset+0x1a>
 800258a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	e7fe      	b.n	800259a <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800259c:	f001 f9d2 	bl	8003944 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80025a4:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025a6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a8:	434b      	muls	r3, r1
 80025aa:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ac:	1a5b      	subs	r3, r3, r1
 80025ae:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b0:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80025b2:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025b4:	2000      	movs	r0, #0
 80025b6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b8:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025be:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80025c2:	b9a5      	cbnz	r5, 80025ee <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025c4:	6923      	ldr	r3, [r4, #16]
 80025c6:	b173      	cbz	r3, 80025e6 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c8:	f104 0010 	add.w	r0, r4, #16
 80025cc:	f000 fe8a 	bl	80032e4 <xTaskRemoveFromEventList>
 80025d0:	b148      	cbz	r0, 80025e6 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80025d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80025e6:	f001 f9cd 	bl	8003984 <vPortExitCritical>
}
 80025ea:	2001      	movs	r0, #1
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ee:	f104 0010 	add.w	r0, r4, #16
 80025f2:	f7ff febb 	bl	800236c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025f6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80025fa:	f7ff feb7 	bl	800236c <vListInitialise>
 80025fe:	e7f2      	b.n	80025e6 <xQueueGenericReset+0x64>

08002600 <xQueueGenericCreateStatic>:
	{
 8002600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002602:	460d      	mov	r5, r1
 8002604:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002606:	b940      	cbnz	r0, 800261a <xQueueGenericCreateStatic+0x1a>
 8002608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	e7fe      	b.n	8002618 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800261a:	b943      	cbnz	r3, 800262e <xQueueGenericCreateStatic+0x2e>
 800261c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	e7fe      	b.n	800262c <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800262e:	b14a      	cbz	r2, 8002644 <xQueueGenericCreateStatic+0x44>
 8002630:	b991      	cbnz	r1, 8002658 <xQueueGenericCreateStatic+0x58>
 8002632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	e7fe      	b.n	8002642 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002644:	b141      	cbz	r1, 8002658 <xQueueGenericCreateStatic+0x58>
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	e7fe      	b.n	8002656 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002658:	2354      	movs	r3, #84	@ 0x54
 800265a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	2b54      	cmp	r3, #84	@ 0x54
 8002660:	d008      	beq.n	8002674 <xQueueGenericCreateStatic+0x74>
 8002662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	e7fe      	b.n	8002672 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002674:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002676:	2d00      	cmp	r5, #0
 8002678:	bf08      	it	eq
 800267a:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800267c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002680:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8002684:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002686:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002688:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800268a:	f7ff ff7a 	bl	8002582 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800268e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002692:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
	}
 8002696:	4620      	mov	r0, r4
		pxNewQueue->pxQueueSetContainer = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	64a3      	str	r3, [r4, #72]	@ 0x48
	}
 800269c:	b003      	add	sp, #12
 800269e:	bd30      	pop	{r4, r5, pc}

080026a0 <xQueueGenericCreate>:
	{
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	460d      	mov	r5, r1
 80026a4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026a6:	4606      	mov	r6, r0
 80026a8:	b940      	cbnz	r0, 80026bc <xQueueGenericCreate+0x1c>
 80026aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	e7fe      	b.n	80026ba <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026bc:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026be:	3054      	adds	r0, #84	@ 0x54
 80026c0:	f001 faa6 	bl	8003c10 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80026c4:	4604      	mov	r4, r0
 80026c6:	b180      	cbz	r0, 80026ea <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80026ce:	b175      	cbz	r5, 80026ee <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d0:	f100 0354 	add.w	r3, r0, #84	@ 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026d4:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80026d6:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026da:	2101      	movs	r1, #1
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ff50 	bl	8002582 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
 80026e2:	2300      	movs	r3, #0
		pxNewQueue->ucQueueType = ucQueueType;
 80026e4:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
 80026e8:	64a3      	str	r3, [r4, #72]	@ 0x48
	}
 80026ea:	4620      	mov	r0, r4
 80026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026ee:	4603      	mov	r3, r0
 80026f0:	e7f0      	b.n	80026d4 <xQueueGenericCreate+0x34>

080026f2 <xQueueGenericSend>:
{
 80026f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80026f6:	460f      	mov	r7, r1
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	461d      	mov	r5, r3
	configASSERT( pxQueue );
 80026fc:	4604      	mov	r4, r0
 80026fe:	b940      	cbnz	r0, 8002712 <xQueueGenericSend+0x20>
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	e7fe      	b.n	8002710 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002712:	b951      	cbnz	r1, 800272a <xQueueGenericSend+0x38>
 8002714:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002716:	b143      	cbz	r3, 800272a <xQueueGenericSend+0x38>
 8002718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	e7fe      	b.n	8002728 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800272a:	2d02      	cmp	r5, #2
 800272c:	d10b      	bne.n	8002746 <xQueueGenericSend+0x54>
 800272e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d008      	beq.n	8002746 <xQueueGenericSend+0x54>
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	e7fe      	b.n	8002744 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002746:	f000 fe5b 	bl	8003400 <xTaskGetSchedulerState>
 800274a:	4606      	mov	r6, r0
 800274c:	b1b8      	cbz	r0, 800277e <xQueueGenericSend+0x8c>
 800274e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002750:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8002754:	f001 f8f6 	bl	8003944 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002758:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800275a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800275c:	429a      	cmp	r2, r3
 800275e:	d21a      	bcs.n	8002796 <xQueueGenericSend+0xa4>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002760:	462a      	mov	r2, r5
 8002762:	4639      	mov	r1, r7
 8002764:	4620      	mov	r0, r4
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002766:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002768:	f7ff fe4b 	bl	8002402 <prvCopyDataToQueue>
					if( pxQueue->pxQueueSetContainer != NULL )
 800276c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800276e:	b9d3      	cbnz	r3, 80027a6 <xQueueGenericSend+0xb4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002770:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002772:	b1f3      	cbz	r3, 80027b2 <xQueueGenericSend+0xc0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002774:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002778:	f000 fdb4 	bl	80032e4 <xTaskRemoveFromEventList>
 800277c:	e019      	b.n	80027b2 <xQueueGenericSend+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0e5      	beq.n	8002750 <xQueueGenericSend+0x5e>
 8002784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	e7fe      	b.n	8002794 <xQueueGenericSend+0xa2>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002796:	2d02      	cmp	r5, #2
 8002798:	d0e2      	beq.n	8002760 <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800279a:	9b01      	ldr	r3, [sp, #4]
 800279c:	b9d3      	cbnz	r3, 80027d4 <xQueueGenericSend+0xe2>
					taskEXIT_CRITICAL();
 800279e:	f001 f8f1 	bl	8003984 <vPortExitCritical>
					return errQUEUE_FULL;
 80027a2:	2000      	movs	r0, #0
 80027a4:	e013      	b.n	80027ce <xQueueGenericSend+0xdc>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80027a6:	2d02      	cmp	r5, #2
 80027a8:	d100      	bne.n	80027ac <xQueueGenericSend+0xba>
 80027aa:	b96e      	cbnz	r6, 80027c8 <xQueueGenericSend+0xd6>
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fe5b 	bl	8002468 <prvNotifyQueueSetContainer>
						else if( xYieldRequired != pdFALSE )
 80027b2:	b148      	cbz	r0, 80027c8 <xQueueGenericSend+0xd6>
							queueYIELD_IF_USING_PREEMPTION();
 80027b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80027b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027c8:	f001 f8dc 	bl	8003984 <vPortExitCritical>
				return pdPASS;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	b004      	add	sp, #16
 80027d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				else if( xEntryTimeSet == pdFALSE )
 80027d4:	b916      	cbnz	r6, 80027dc <xQueueGenericSend+0xea>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d6:	a802      	add	r0, sp, #8
 80027d8:	f000 fdc4 	bl	8003364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80027dc:	f001 f8d2 	bl	8003984 <vPortExitCritical>
		vTaskSuspendAll();
 80027e0:	f000 fbcc 	bl	8002f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027e4:	f001 f8ae 	bl	8003944 <vPortEnterCritical>
 80027e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80027ec:	2bff      	cmp	r3, #255	@ 0xff
 80027ee:	bf08      	it	eq
 80027f0:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80027f4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80027f8:	2bff      	cmp	r3, #255	@ 0xff
 80027fa:	bf08      	it	eq
 80027fc:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8002800:	f001 f8c0 	bl	8003984 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002804:	a901      	add	r1, sp, #4
 8002806:	a802      	add	r0, sp, #8
 8002808:	f000 fdb8 	bl	800337c <xTaskCheckForTimeOut>
 800280c:	bb38      	cbnz	r0, 800285e <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 800280e:	f001 f899 	bl	8003944 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002812:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002814:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002816:	429a      	cmp	r2, r3
 8002818:	d10e      	bne.n	8002838 <xQueueGenericSend+0x146>
	taskEXIT_CRITICAL();
 800281a:	f001 f8b3 	bl	8003984 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800281e:	9901      	ldr	r1, [sp, #4]
 8002820:	f104 0010 	add.w	r0, r4, #16
 8002824:	f000 fd26 	bl	8003274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff fe6e 	bl	800250a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800282e:	f000 fc49 	bl	80030c4 <xTaskResumeAll>
 8002832:	b148      	cbz	r0, 8002848 <xQueueGenericSend+0x156>
 8002834:	2601      	movs	r6, #1
 8002836:	e78d      	b.n	8002754 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8002838:	f001 f8a4 	bl	8003984 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff fe64 	bl	800250a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002842:	f000 fc3f 	bl	80030c4 <xTaskResumeAll>
 8002846:	e7f5      	b.n	8002834 <xQueueGenericSend+0x142>
					portYIELD_WITHIN_API();
 8002848:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800284c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002850:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	e7ea      	b.n	8002834 <xQueueGenericSend+0x142>
			prvUnlockQueue( pxQueue );
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff fe53 	bl	800250a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002864:	f000 fc2e 	bl	80030c4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8002868:	e79b      	b.n	80027a2 <xQueueGenericSend+0xb0>

0800286a <xQueueGenericSendFromISR>:
{
 800286a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800286e:	4689      	mov	r9, r1
 8002870:	4617      	mov	r7, r2
 8002872:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8002874:	4604      	mov	r4, r0
 8002876:	b940      	cbnz	r0, 800288a <xQueueGenericSendFromISR+0x20>
 8002878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	e7fe      	b.n	8002888 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800288a:	b951      	cbnz	r1, 80028a2 <xQueueGenericSendFromISR+0x38>
 800288c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800288e:	b143      	cbz	r3, 80028a2 <xQueueGenericSendFromISR+0x38>
 8002890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	e7fe      	b.n	80028a0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a2:	2e02      	cmp	r6, #2
 80028a4:	d10b      	bne.n	80028be <xQueueGenericSendFromISR+0x54>
 80028a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d008      	beq.n	80028be <xQueueGenericSendFromISR+0x54>
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	e7fe      	b.n	80028bc <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028be:	f001 f953 	bl	8003b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028c2:	f3ef 8811 	mrs	r8, BASEPRI
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80028d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d301      	bcc.n	80028e2 <xQueueGenericSendFromISR+0x78>
 80028de:	2e02      	cmp	r6, #2
 80028e0:	d12b      	bne.n	800293a <xQueueGenericSendFromISR+0xd0>
			const int8_t cTxLock = pxQueue->cTxLock;
 80028e2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028e6:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80028ea:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ec:	4632      	mov	r2, r6
 80028ee:	4649      	mov	r1, r9
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fd86 	bl	8002402 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80028f6:	1c6b      	adds	r3, r5, #1
 80028f8:	d11a      	bne.n	8002930 <xQueueGenericSendFromISR+0xc6>
					if( pxQueue->pxQueueSetContainer != NULL )
 80028fa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80028fc:	b183      	cbz	r3, 8002920 <xQueueGenericSendFromISR+0xb6>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80028fe:	2e02      	cmp	r6, #2
 8002900:	d102      	bne.n	8002908 <xQueueGenericSendFromISR+0x9e>
 8002902:	f1ba 0f00 	cmp.w	sl, #0
 8002906:	d106      	bne.n	8002916 <xQueueGenericSendFromISR+0xac>
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff fdad 	bl	8002468 <prvNotifyQueueSetContainer>
 800290e:	b110      	cbz	r0, 8002916 <xQueueGenericSendFromISR+0xac>
							if( pxHigherPriorityTaskWoken != NULL )
 8002910:	b10f      	cbz	r7, 8002916 <xQueueGenericSendFromISR+0xac>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002912:	2301      	movs	r3, #1
 8002914:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8002916:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002918:	f388 8811 	msr	BASEPRI, r8
}
 800291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002920:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f7      	beq.n	8002916 <xQueueGenericSendFromISR+0xac>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002926:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800292a:	f000 fcdb 	bl	80032e4 <xTaskRemoveFromEventList>
 800292e:	e7ee      	b.n	800290e <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002930:	3501      	adds	r5, #1
 8002932:	b26d      	sxtb	r5, r5
 8002934:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8002938:	e7ed      	b.n	8002916 <xQueueGenericSendFromISR+0xac>
			xReturn = errQUEUE_FULL;
 800293a:	2000      	movs	r0, #0
 800293c:	e7ec      	b.n	8002918 <xQueueGenericSendFromISR+0xae>

0800293e <xQueueReceive>:
{
 800293e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002942:	460e      	mov	r6, r1
 8002944:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002946:	4604      	mov	r4, r0
 8002948:	b940      	cbnz	r0, 800295c <xQueueReceive+0x1e>
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	e7fe      	b.n	800295a <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800295c:	b951      	cbnz	r1, 8002974 <xQueueReceive+0x36>
 800295e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002960:	b143      	cbz	r3, 8002974 <xQueueReceive+0x36>
 8002962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	e7fe      	b.n	8002972 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002974:	f000 fd44 	bl	8003400 <xTaskGetSchedulerState>
 8002978:	4605      	mov	r5, r0
 800297a:	b318      	cbz	r0, 80029c4 <xQueueReceive+0x86>
 800297c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800297e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8002982:	f000 ffdf 	bl	8003944 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002986:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002988:	b347      	cbz	r7, 80029dc <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800298a:	4631      	mov	r1, r6
 800298c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800298e:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002990:	f7ff fda5 	bl	80024de <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002994:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002996:	6923      	ldr	r3, [r4, #16]
 8002998:	b173      	cbz	r3, 80029b8 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800299a:	f104 0010 	add.w	r0, r4, #16
 800299e:	f000 fca1 	bl	80032e4 <xTaskRemoveFromEventList>
 80029a2:	b148      	cbz	r0, 80029b8 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80029a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80029a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80029b8:	f000 ffe4 	bl	8003984 <vPortExitCritical>
				return pdPASS;
 80029bc:	2001      	movs	r0, #1
}
 80029be:	b004      	add	sp, #16
 80029c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0d9      	beq.n	800297e <xQueueReceive+0x40>
 80029ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	e7fe      	b.n	80029da <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80029dc:	9b01      	ldr	r3, [sp, #4]
 80029de:	b91b      	cbnz	r3, 80029e8 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80029e0:	f000 ffd0 	bl	8003984 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80029e4:	2000      	movs	r0, #0
 80029e6:	e7ea      	b.n	80029be <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80029e8:	b915      	cbnz	r5, 80029f0 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ea:	a802      	add	r0, sp, #8
 80029ec:	f000 fcba 	bl	8003364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80029f0:	f000 ffc8 	bl	8003984 <vPortExitCritical>
		vTaskSuspendAll();
 80029f4:	f000 fac2 	bl	8002f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029f8:	f000 ffa4 	bl	8003944 <vPortEnterCritical>
 80029fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002a00:	2bff      	cmp	r3, #255	@ 0xff
 8002a02:	bf08      	it	eq
 8002a04:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8002a08:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002a0c:	2bff      	cmp	r3, #255	@ 0xff
 8002a0e:	bf08      	it	eq
 8002a10:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8002a14:	f000 ffb6 	bl	8003984 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a18:	a901      	add	r1, sp, #4
 8002a1a:	a802      	add	r0, sp, #8
 8002a1c:	f000 fcae 	bl	800337c <xTaskCheckForTimeOut>
 8002a20:	bb00      	cbnz	r0, 8002a64 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fce2 	bl	80023ec <prvIsQueueEmpty>
 8002a28:	b1b0      	cbz	r0, 8002a58 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a2a:	9901      	ldr	r1, [sp, #4]
 8002a2c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002a30:	f000 fc20 	bl	8003274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff fd68 	bl	800250a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a3a:	f000 fb43 	bl	80030c4 <xTaskResumeAll>
 8002a3e:	b948      	cbnz	r0, 8002a54 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8002a40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	2501      	movs	r5, #1
 8002a56:	e794      	b.n	8002982 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7ff fd56 	bl	800250a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a5e:	f000 fb31 	bl	80030c4 <xTaskResumeAll>
 8002a62:	e7f7      	b.n	8002a54 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff fd50 	bl	800250a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a6a:	f000 fb2b 	bl	80030c4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff fcbc 	bl	80023ec <prvIsQueueEmpty>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d0ed      	beq.n	8002a54 <xQueueReceive+0x116>
 8002a78:	e7b4      	b.n	80029e4 <xQueueReceive+0xa6>
	...

08002a7c <vQueueAddToRegistry>:
	{
 8002a7c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a7e:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a80:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a82:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002a86:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8002a8a:	b91d      	cbnz	r5, 8002a94 <vQueueAddToRegistry+0x18>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a90:	6060      	str	r0, [r4, #4]
	}
 8002a92:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a94:	3301      	adds	r3, #1
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d1f3      	bne.n	8002a82 <vQueueAddToRegistry+0x6>
 8002a9a:	e7fa      	b.n	8002a92 <vQueueAddToRegistry+0x16>
 8002a9c:	20000a08 	.word	0x20000a08

08002aa0 <vQueueWaitForMessageRestricted>:
	{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
 8002aa8:	f000 ff4c 	bl	8003944 <vPortEnterCritical>
 8002aac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002ab0:	2bff      	cmp	r3, #255	@ 0xff
 8002ab2:	bf04      	itt	eq
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8002aba:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002abe:	2bff      	cmp	r3, #255	@ 0xff
 8002ac0:	bf04      	itt	eq
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8002ac8:	f000 ff5c 	bl	8003984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002acc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ace:	b92b      	cbnz	r3, 8002adc <vQueueWaitForMessageRestricted+0x3c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ad0:	4632      	mov	r2, r6
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002ad8:	f000 fbe6 	bl	80032a8 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8002adc:	4620      	mov	r0, r4
	}
 8002ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002ae2:	f7ff bd12 	b.w	800250a <prvUnlockQueue>

08002ae6 <xQueueCreateSet>:
		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2104      	movs	r1, #4
 8002aea:	f7ff bdd9 	b.w	80026a0 <xQueueGenericCreate>

08002aee <xQueueAddToSet>:
	{
 8002aee:	b570      	push	{r4, r5, r6, lr}
 8002af0:	4605      	mov	r5, r0
 8002af2:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8002af4:	f000 ff26 	bl	8003944 <vPortEnterCritical>
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8002af8:	6cac      	ldr	r4, [r5, #72]	@ 0x48
 8002afa:	b93c      	cbnz	r4, 8002b0c <xQueueAddToSet+0x1e>
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8002afc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8002afe:	b90b      	cbnz	r3, 8002b04 <xQueueAddToSet+0x16>
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8002b00:	64ae      	str	r6, [r5, #72]	@ 0x48
				xReturn = pdPASS;
 8002b02:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8002b04:	f000 ff3e 	bl	8003984 <vPortExitCritical>
	}
 8002b08:	4620      	mov	r0, r4
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = pdFAIL;
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	e7f9      	b.n	8002b04 <xQueueAddToSet+0x16>

08002b10 <xQueueSelectFromSet>:
	{
 8002b10:	b507      	push	{r0, r1, r2, lr}
	QueueSetMemberHandle_t xReturn = NULL;
 8002b12:	2300      	movs	r3, #0
	{
 8002b14:	460a      	mov	r2, r1
		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8002b16:	a901      	add	r1, sp, #4
	QueueSetMemberHandle_t xReturn = NULL;
 8002b18:	9301      	str	r3, [sp, #4]
		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8002b1a:	f7ff ff10 	bl	800293e <xQueueReceive>
	}
 8002b1e:	9801      	ldr	r0, [sp, #4]
 8002b20:	b003      	add	sp, #12
 8002b22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002b28 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b2e:	f000 ff09 	bl	8003944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b32:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8002b34:	4e30      	ldr	r6, [pc, #192]	@ (8002bf8 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4f30      	ldr	r7, [pc, #192]	@ (8002bfc <prvAddNewTaskToReadyList+0xd4>)
 8002b3a:	3201      	adds	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002b3e:	6835      	ldr	r5, [r6, #0]
 8002b40:	2d00      	cmp	r5, #0
 8002b42:	d14b      	bne.n	8002bdc <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b44:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d11f      	bne.n	8002b8c <prvAddNewTaskToReadyList+0x64>
 8002b4c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b4e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b50:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b52:	f7ff fc0b 	bl	800236c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b56:	2d38      	cmp	r5, #56	@ 0x38
 8002b58:	f108 0814 	add.w	r8, r8, #20
 8002b5c:	d1f7      	bne.n	8002b4e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b5e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8002c24 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8002b62:	4d27      	ldr	r5, [pc, #156]	@ (8002c00 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8002b64:	4640      	mov	r0, r8
 8002b66:	f7ff fc01 	bl	800236c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f7ff fbfe 	bl	800236c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b70:	4824      	ldr	r0, [pc, #144]	@ (8002c04 <prvAddNewTaskToReadyList+0xdc>)
 8002b72:	f7ff fbfb 	bl	800236c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b76:	4824      	ldr	r0, [pc, #144]	@ (8002c08 <prvAddNewTaskToReadyList+0xe0>)
 8002b78:	f7ff fbf8 	bl	800236c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b7c:	4823      	ldr	r0, [pc, #140]	@ (8002c0c <prvAddNewTaskToReadyList+0xe4>)
 8002b7e:	f7ff fbf5 	bl	800236c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b82:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <prvAddNewTaskToReadyList+0xe8>)
 8002b84:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b88:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <prvAddNewTaskToReadyList+0xec>)
 8002b8a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002b8c:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <prvAddNewTaskToReadyList+0xf0>)
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002b94:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b96:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002b98:	6811      	ldr	r1, [r2, #0]
 8002b9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002b9c:	2014      	movs	r0, #20
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	fb00 7003 	mla	r0, r0, r3, r7
 8002ba4:	f104 0104 	add.w	r1, r4, #4
 8002ba8:	bf88      	it	hi
 8002baa:	6013      	strhi	r3, [r2, #0]
 8002bac:	f7ff fbec 	bl	8002388 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002bb0:	f000 fee8 	bl	8003984 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <prvAddNewTaskToReadyList+0xf8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b173      	cbz	r3, 8002bd8 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bba:	6833      	ldr	r3, [r6, #0]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d209      	bcs.n	8002bd8 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8002bc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
}
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002bdc:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <prvAddNewTaskToReadyList+0xf8>)
 8002bde:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002be0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d1d2      	bne.n	8002b8c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002be6:	6832      	ldr	r2, [r6, #0]
 8002be8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bea:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002bec:	bf98      	it	ls
 8002bee:	6034      	strls	r4, [r6, #0]
 8002bf0:	e7cc      	b.n	8002b8c <prvAddNewTaskToReadyList+0x64>
 8002bf2:	bf00      	nop
 8002bf4:	20000a6c 	.word	0x20000a6c
 8002bf8:	20000f40 	.word	0x20000f40
 8002bfc:	20000ae0 	.word	0x20000ae0
 8002c00:	20000ab8 	.word	0x20000ab8
 8002c04:	20000a9c 	.word	0x20000a9c
 8002c08:	20000a88 	.word	0x20000a88
 8002c0c:	20000a70 	.word	0x20000a70
 8002c10:	20000ab4 	.word	0x20000ab4
 8002c14:	20000ab0 	.word	0x20000ab0
 8002c18:	20000a50 	.word	0x20000a50
 8002c1c:	20000a64 	.word	0x20000a64
 8002c20:	20000a60 	.word	0x20000a60
 8002c24:	20000acc 	.word	0x20000acc

08002c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c2c:	4d15      	ldr	r5, [pc, #84]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8002c2e:	681c      	ldr	r4, [r3, #0]
{
 8002c30:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c32:	6828      	ldr	r0, [r5, #0]
 8002c34:	3004      	adds	r0, #4
{
 8002c36:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c38:	f7ff fbc8 	bl	80023cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c3c:	1c73      	adds	r3, r6, #1
 8002c3e:	d107      	bne.n	8002c50 <prvAddCurrentTaskToDelayedList+0x28>
 8002c40:	b137      	cbz	r7, 8002c50 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c42:	6829      	ldr	r1, [r5, #0]
 8002c44:	4810      	ldr	r0, [pc, #64]	@ (8002c88 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c4a:	3104      	adds	r1, #4
 8002c4c:	f7ff bb9c 	b.w	8002388 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	19a4      	adds	r4, r4, r6
 8002c54:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c56:	d307      	bcc.n	8002c68 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <prvAddCurrentTaskToDelayedList+0x64>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	6829      	ldr	r1, [r5, #0]
}
 8002c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c62:	3104      	adds	r1, #4
 8002c64:	f7ff bb9b 	b.w	800239e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c68:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <prvAddCurrentTaskToDelayedList+0x68>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	6829      	ldr	r1, [r5, #0]
 8002c6e:	3104      	adds	r1, #4
 8002c70:	f7ff fb95 	bl	800239e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002c7a:	bf88      	it	hi
 8002c7c:	601c      	strhi	r4, [r3, #0]
}
 8002c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c80:	20000a68 	.word	0x20000a68
 8002c84:	20000f40 	.word	0x20000f40
 8002c88:	20000a70 	.word	0x20000a70
 8002c8c:	20000ab0 	.word	0x20000ab0
 8002c90:	20000ab4 	.word	0x20000ab4
 8002c94:	20000a4c 	.word	0x20000a4c

08002c98 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c98:	4a06      	ldr	r2, [pc, #24]	@ (8002cb4 <prvResetNextTaskUnblockTime+0x1c>)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <prvResetNextTaskUnblockTime+0x20>)
 8002ca0:	b919      	cbnz	r1, 8002caa <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ca2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ca6:	601a      	str	r2, [r3, #0]
}
 8002ca8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cae:	68d2      	ldr	r2, [r2, #12]
 8002cb0:	6852      	ldr	r2, [r2, #4]
 8002cb2:	e7f8      	b.n	8002ca6 <prvResetNextTaskUnblockTime+0xe>
 8002cb4:	20000ab4 	.word	0x20000ab4
 8002cb8:	20000a4c 	.word	0x20000a4c

08002cbc <prvDeleteTCB>:
	{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002cc0:	3054      	adds	r0, #84	@ 0x54
 8002cc2:	f002 f823 	bl	8004d0c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cc6:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8002cca:	b93b      	cbnz	r3, 8002cdc <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8002ccc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002cce:	f001 f837 	bl	8003d40 <vPortFree>
				vPortFree( pxTCB );
 8002cd2:	4620      	mov	r0, r4
	}
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002cd8:	f001 b832 	b.w	8003d40 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d0f8      	beq.n	8002cd2 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d008      	beq.n	8002cf6 <prvDeleteTCB+0x3a>
 8002ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	e7fe      	b.n	8002cf4 <prvDeleteTCB+0x38>
	}
 8002cf6:	bd10      	pop	{r4, pc}

08002cf8 <prvIdleTask>:
{
 8002cf8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cfa:	4c13      	ldr	r4, [pc, #76]	@ (8002d48 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfc:	4f13      	ldr	r7, [pc, #76]	@ (8002d4c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002cfe:	4d14      	ldr	r5, [pc, #80]	@ (8002d50 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	b973      	cbnz	r3, 8002d22 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d04:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <prvIdleTask+0x5c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d9f8      	bls.n	8002cfe <prvIdleTask+0x6>
				taskYIELD();
 8002d0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	e7ed      	b.n	8002cfe <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8002d22:	f000 fe0f 	bl	8003944 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d2a:	1d30      	adds	r0, r6, #4
 8002d2c:	f7ff fb4e 	bl	80023cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002d3c:	f000 fe22 	bl	8003984 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002d40:	4630      	mov	r0, r6
 8002d42:	f7ff ffbb 	bl	8002cbc <prvDeleteTCB>
 8002d46:	e7db      	b.n	8002d00 <prvIdleTask+0x8>
 8002d48:	20000a84 	.word	0x20000a84
 8002d4c:	20000a88 	.word	0x20000a88
 8002d50:	20000a6c 	.word	0x20000a6c
 8002d54:	20000ae0 	.word	0x20000ae0

08002d58 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d60:	0096      	lsls	r6, r2, #2
 8002d62:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002d64:	4607      	mov	r7, r0
 8002d66:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d68:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002d6a:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002d6c:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d6e:	f001 ffb0 	bl	8004cd2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002d74:	3e04      	subs	r6, #4
 8002d76:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d78:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	d041      	beq.n	8002e04 <prvInitialiseNewTask.constprop.0+0xac>
 8002d80:	1e6b      	subs	r3, r5, #1
 8002d82:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8002d86:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d88:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002d8c:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002d90:	b109      	cbz	r1, 8002d96 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d92:	42ab      	cmp	r3, r5
 8002d94:	d1f8      	bne.n	8002d88 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d96:	2300      	movs	r3, #0
 8002d98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d9c:	9d08      	ldr	r5, [sp, #32]
 8002d9e:	2d37      	cmp	r5, #55	@ 0x37
 8002da0:	bf28      	it	cs
 8002da2:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8002da4:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8002da8:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002daa:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dac:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002dae:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db2:	f7ff fae6 	bl	8002382 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db6:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dba:	f104 0018 	add.w	r0, r4, #24
 8002dbe:	f7ff fae0 	bl	8002382 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002dc2:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002dc6:	224c      	movs	r2, #76	@ 0x4c
 8002dc8:	4651      	mov	r1, sl
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dcc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dce:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dd0:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002dd4:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8002dd8:	f001 ff7b 	bl	8004cd2 <memset>
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <prvInitialiseNewTask.constprop.0+0xb4>)
 8002dde:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002de0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002de4:	33d0      	adds	r3, #208	@ 0xd0
 8002de6:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002de8:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dea:	4642      	mov	r2, r8
 8002dec:	4639      	mov	r1, r7
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 fd7e 	bl	80038f0 <pxPortInitialiseStack>
 8002df4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8002df6:	f1b9 0f00 	cmp.w	r9, #0
 8002dfa:	d001      	beq.n	8002e00 <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dfc:	f8c9 4000 	str.w	r4, [r9]
}
 8002e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e04:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8002e08:	e7c8      	b.n	8002d9c <prvInitialiseNewTask.constprop.0+0x44>
 8002e0a:	bf00      	nop
 8002e0c:	20004c9c 	.word	0x20004c9c

08002e10 <xTaskCreateStatic>:
	{
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002e18:	b945      	cbnz	r5, 8002e2c <xTaskCreateStatic+0x1c>
 8002e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	e7fe      	b.n	8002e2a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002e2c:	b944      	cbnz	r4, 8002e40 <xTaskCreateStatic+0x30>
 8002e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	e7fe      	b.n	8002e3e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e40:	26a8      	movs	r6, #168	@ 0xa8
 8002e42:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e44:	9e05      	ldr	r6, [sp, #20]
 8002e46:	2ea8      	cmp	r6, #168	@ 0xa8
 8002e48:	d008      	beq.n	8002e5c <xTaskCreateStatic+0x4c>
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	e7fe      	b.n	8002e5a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e5c:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e5e:	2502      	movs	r5, #2
 8002e60:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e64:	ad04      	add	r5, sp, #16
 8002e66:	9501      	str	r5, [sp, #4]
 8002e68:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8002e6a:	9402      	str	r4, [sp, #8]
 8002e6c:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e6e:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e70:	f7ff ff72 	bl	8002d58 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff fe57 	bl	8002b28 <prvAddNewTaskToReadyList>
	}
 8002e7a:	9804      	ldr	r0, [sp, #16]
 8002e7c:	b006      	add	sp, #24
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}

08002e80 <xTaskCreate>:
	{
 8002e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e84:	4607      	mov	r7, r0
 8002e86:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e88:	0090      	lsls	r0, r2, #2
	{
 8002e8a:	4688      	mov	r8, r1
 8002e8c:	4616      	mov	r6, r2
 8002e8e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e90:	f000 febe 	bl	8003c10 <pvPortMalloc>
			if( pxStack != NULL )
 8002e94:	4605      	mov	r5, r0
 8002e96:	b920      	cbnz	r0, 8002ea2 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8002e9c:	b005      	add	sp, #20
 8002e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ea2:	20a8      	movs	r0, #168	@ 0xa8
 8002ea4:	f000 feb4 	bl	8003c10 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	b198      	cbz	r0, 8002ed4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8002eb4:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002eba:	9002      	str	r0, [sp, #8]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	f7ff ff47 	bl	8002d58 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff fe2c 	bl	8002b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	e7e3      	b.n	8002e9c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f000 ff33 	bl	8003d40 <vPortFree>
		if( pxNewTCB != NULL )
 8002eda:	e7dd      	b.n	8002e98 <xTaskCreate+0x18>

08002edc <vTaskStartScheduler>:
{
 8002edc:	b510      	push	{r4, lr}
 8002ede:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ee0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ee2:	aa07      	add	r2, sp, #28
 8002ee4:	a906      	add	r1, sp, #24
 8002ee6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ee8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002eec:	f7ff fa26 	bl	800233c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ef0:	9b05      	ldr	r3, [sp, #20]
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	9b06      	ldr	r3, [sp, #24]
 8002ef6:	9a07      	ldr	r2, [sp, #28]
 8002ef8:	4919      	ldr	r1, [pc, #100]	@ (8002f60 <vTaskStartScheduler+0x84>)
 8002efa:	481a      	ldr	r0, [pc, #104]	@ (8002f64 <vTaskStartScheduler+0x88>)
 8002efc:	e9cd 4300 	strd	r4, r3, [sp]
 8002f00:	4623      	mov	r3, r4
 8002f02:	f7ff ff85 	bl	8002e10 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002f06:	b340      	cbz	r0, 8002f5a <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8002f08:	f000 fb1e 	bl	8003548 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002f0c:	2801      	cmp	r0, #1
 8002f0e:	d119      	bne.n	8002f44 <vTaskStartScheduler+0x68>
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <vTaskStartScheduler+0x8c>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	@ (8002f6c <vTaskStartScheduler+0x90>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3354      	adds	r3, #84	@ 0x54
 8002f28:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <vTaskStartScheduler+0x94>)
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f32:	4b10      	ldr	r3, [pc, #64]	@ (8002f74 <vTaskStartScheduler+0x98>)
 8002f34:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f36:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <vTaskStartScheduler+0x9c>)
 8002f38:	601c      	str	r4, [r3, #0]
}
 8002f3a:	b008      	add	sp, #32
 8002f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002f40:	f000 bd90 	b.w	8003a64 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f44:	3001      	adds	r0, #1
 8002f46:	d108      	bne.n	8002f5a <vTaskStartScheduler+0x7e>
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	e7fe      	b.n	8002f58 <vTaskStartScheduler+0x7c>
}
 8002f5a:	b008      	add	sp, #32
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	bf00      	nop
 8002f60:	0800859c 	.word	0x0800859c
 8002f64:	08002cf9 	.word	0x08002cf9
 8002f68:	20000f40 	.word	0x20000f40
 8002f6c:	2000001c 	.word	0x2000001c
 8002f70:	20000a4c 	.word	0x20000a4c
 8002f74:	20000a60 	.word	0x20000a60
 8002f78:	20000a68 	.word	0x20000a68

08002f7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002f7c:	4a02      	ldr	r2, [pc, #8]	@ (8002f88 <vTaskSuspendAll+0xc>)
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000a48 	.word	0x20000a48

08002f8c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002f8c:	4b01      	ldr	r3, [pc, #4]	@ (8002f94 <xTaskGetTickCount+0x8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000a68 	.word	0x20000a68

08002f98 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f98:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <xTaskIncrementTick+0x100>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
{
 8002f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d172      	bne.n	800308a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800309c <xTaskIncrementTick+0x104>)
 8002fa6:	681c      	ldr	r4, [r3, #0]
 8002fa8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002faa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fac:	b9bc      	cbnz	r4, 8002fde <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002fae:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <xTaskIncrementTick+0x108>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	b142      	cbz	r2, 8002fc8 <xTaskIncrementTick+0x30>
 8002fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	e7fe      	b.n	8002fc6 <xTaskIncrementTick+0x2e>
 8002fc8:	4a36      	ldr	r2, [pc, #216]	@ (80030a4 <xTaskIncrementTick+0x10c>)
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	6810      	ldr	r0, [r2, #0]
 8002fce:	6018      	str	r0, [r3, #0]
 8002fd0:	6011      	str	r1, [r2, #0]
 8002fd2:	4a35      	ldr	r2, [pc, #212]	@ (80030a8 <xTaskIncrementTick+0x110>)
 8002fd4:	6813      	ldr	r3, [r2, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	f7ff fe5d 	bl	8002c98 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fde:	4d33      	ldr	r5, [pc, #204]	@ (80030ac <xTaskIncrementTick+0x114>)
 8002fe0:	4e33      	ldr	r6, [pc, #204]	@ (80030b0 <xTaskIncrementTick+0x118>)
 8002fe2:	682b      	ldr	r3, [r5, #0]
 8002fe4:	4f33      	ldr	r7, [pc, #204]	@ (80030b4 <xTaskIncrementTick+0x11c>)
 8002fe6:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8002fe8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fec:	d212      	bcs.n	8003014 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ff2:	2114      	movs	r1, #20
 8002ff4:	434a      	muls	r2, r1
 8002ff6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8002ff8:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80030b8 <xTaskIncrementTick+0x120>)
 8002ffc:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8002ffe:	bf28      	it	cs
 8003000:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8003004:	2a00      	cmp	r2, #0
 8003006:	bf18      	it	ne
 8003008:	f04f 0b01 	movne.w	fp, #1
}
 800300c:	4658      	mov	r0, fp
 800300e:	b003      	add	sp, #12
 8003010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003014:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80030a0 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8003018:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80030c0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800301c:	f8d9 2000 	ldr.w	r2, [r9]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	b91a      	cbnz	r2, 800302c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	602a      	str	r2, [r5, #0]
					break;
 800302a:	e7e0      	b.n	8002fee <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800302c:	f8d9 2000 	ldr.w	r2, [r9]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003036:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800303a:	428c      	cmp	r4, r1
 800303c:	d201      	bcs.n	8003042 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800303e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003040:	e7d5      	b.n	8002fee <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003042:	f108 0304 	add.w	r3, r8, #4
 8003046:	4618      	mov	r0, r3
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	f7ff f9bf 	bl	80023cc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800304e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8003052:	b119      	cbz	r1, 800305c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003054:	f108 0018 	add.w	r0, r8, #24
 8003058:	f7ff f9b8 	bl	80023cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800305c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8003060:	f8da 1000 	ldr.w	r1, [sl]
 8003064:	2314      	movs	r3, #20
 8003066:	4288      	cmp	r0, r1
 8003068:	bf88      	it	hi
 800306a:	f8ca 0000 	strhi.w	r0, [sl]
 800306e:	9901      	ldr	r1, [sp, #4]
 8003070:	fb03 6000 	mla	r0, r3, r0, r6
 8003074:	f7ff f988 	bl	8002388 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003078:	6838      	ldr	r0, [r7, #0]
 800307a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800307e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8003080:	4291      	cmp	r1, r2
 8003082:	bf28      	it	cs
 8003084:	f04f 0b01 	movcs.w	fp, #1
 8003088:	e7c8      	b.n	800301c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800308a:	4a0c      	ldr	r2, [pc, #48]	@ (80030bc <xTaskIncrementTick+0x124>)
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003092:	f04f 0b00 	mov.w	fp, #0
 8003096:	e7b9      	b.n	800300c <xTaskIncrementTick+0x74>
 8003098:	20000a48 	.word	0x20000a48
 800309c:	20000a68 	.word	0x20000a68
 80030a0:	20000ab4 	.word	0x20000ab4
 80030a4:	20000ab0 	.word	0x20000ab0
 80030a8:	20000a54 	.word	0x20000a54
 80030ac:	20000a4c 	.word	0x20000a4c
 80030b0:	20000ae0 	.word	0x20000ae0
 80030b4:	20000f40 	.word	0x20000f40
 80030b8:	20000a58 	.word	0x20000a58
 80030bc:	20000a5c 	.word	0x20000a5c
 80030c0:	20000a64 	.word	0x20000a64

080030c4 <xTaskResumeAll>:
{
 80030c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80030c8:	4c30      	ldr	r4, [pc, #192]	@ (800318c <xTaskResumeAll+0xc8>)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	b943      	cbnz	r3, 80030e0 <xTaskResumeAll+0x1c>
 80030ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	e7fe      	b.n	80030de <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80030e0:	f000 fc30 	bl	8003944 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ea:	6824      	ldr	r4, [r4, #0]
 80030ec:	b12c      	cbz	r4, 80030fa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80030ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80030f0:	f000 fc48 	bl	8003984 <vPortExitCritical>
}
 80030f4:	4620      	mov	r0, r4
 80030f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <xTaskResumeAll+0xcc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f5      	beq.n	80030ee <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003102:	4d24      	ldr	r5, [pc, #144]	@ (8003194 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8003104:	4e24      	ldr	r6, [pc, #144]	@ (8003198 <xTaskResumeAll+0xd4>)
 8003106:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80031a8 <xTaskResumeAll+0xe4>
 800310a:	e01d      	b.n	8003148 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800310c:	68eb      	ldr	r3, [r5, #12]
 800310e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003110:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003112:	f104 0018 	add.w	r0, r4, #24
 8003116:	f7ff f959 	bl	80023cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800311a:	4638      	mov	r0, r7
 800311c:	f7ff f956 	bl	80023cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003120:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003122:	6832      	ldr	r2, [r6, #0]
 8003124:	2014      	movs	r0, #20
 8003126:	4293      	cmp	r3, r2
 8003128:	fb00 8003 	mla	r0, r0, r3, r8
 800312c:	4639      	mov	r1, r7
 800312e:	bf88      	it	hi
 8003130:	6033      	strhi	r3, [r6, #0]
 8003132:	f7ff f929 	bl	8002388 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003136:	4b19      	ldr	r3, [pc, #100]	@ (800319c <xTaskResumeAll+0xd8>)
 8003138:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8003142:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <xTaskResumeAll+0xdc>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1de      	bne.n	800310c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800314e:	b10c      	cbz	r4, 8003154 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8003150:	f7ff fda2 	bl	8002c98 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003154:	4d13      	ldr	r5, [pc, #76]	@ (80031a4 <xTaskResumeAll+0xe0>)
 8003156:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8003158:	b144      	cbz	r4, 800316c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800315a:	4e11      	ldr	r6, [pc, #68]	@ (80031a0 <xTaskResumeAll+0xdc>)
 800315c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800315e:	f7ff ff1b 	bl	8002f98 <xTaskIncrementTick>
 8003162:	b100      	cbz	r0, 8003166 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8003164:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003166:	3c01      	subs	r4, #1
 8003168:	d1f9      	bne.n	800315e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800316a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <xTaskResumeAll+0xdc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0bc      	beq.n	80030ee <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003174:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003188:	2401      	movs	r4, #1
 800318a:	e7b1      	b.n	80030f0 <xTaskResumeAll+0x2c>
 800318c:	20000a48 	.word	0x20000a48
 8003190:	20000a6c 	.word	0x20000a6c
 8003194:	20000a9c 	.word	0x20000a9c
 8003198:	20000a64 	.word	0x20000a64
 800319c:	20000f40 	.word	0x20000f40
 80031a0:	20000a58 	.word	0x20000a58
 80031a4:	20000a5c 	.word	0x20000a5c
 80031a8:	20000ae0 	.word	0x20000ae0

080031ac <vTaskDelay>:
	{
 80031ac:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031ae:	b950      	cbnz	r0, 80031c6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80031b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	f3bf 8f6f 	isb	sy
	}
 80031c4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <vTaskDelay+0x44>)
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	b141      	cbz	r1, 80031de <vTaskDelay+0x32>
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	e7fe      	b.n	80031dc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80031de:	f7ff fecd 	bl	8002f7c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031e2:	f7ff fd21 	bl	8002c28 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80031e6:	f7ff ff6d 	bl	80030c4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d0e0      	beq.n	80031b0 <vTaskDelay+0x4>
 80031ee:	e7e9      	b.n	80031c4 <vTaskDelay+0x18>
 80031f0:	20000a48 	.word	0x20000a48

080031f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <vTaskSwitchContext+0x68>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <vTaskSwitchContext+0x6c>)
{
 80031fa:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031fc:	b112      	cbz	r2, 8003204 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003204:	4d17      	ldr	r5, [pc, #92]	@ (8003264 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8003206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003208:	682a      	ldr	r2, [r5, #0]
 800320a:	4917      	ldr	r1, [pc, #92]	@ (8003268 <vTaskSwitchContext+0x74>)
 800320c:	2614      	movs	r6, #20
 800320e:	fb06 f302 	mul.w	r3, r6, r2
 8003212:	18c8      	adds	r0, r1, r3
 8003214:	58cc      	ldr	r4, [r1, r3]
 8003216:	b1ac      	cbz	r4, 8003244 <vTaskSwitchContext+0x50>
 8003218:	6844      	ldr	r4, [r0, #4]
 800321a:	3308      	adds	r3, #8
 800321c:	6864      	ldr	r4, [r4, #4]
 800321e:	6044      	str	r4, [r0, #4]
 8003220:	440b      	add	r3, r1
 8003222:	429c      	cmp	r4, r3
 8003224:	bf04      	itt	eq
 8003226:	6863      	ldreq	r3, [r4, #4]
 8003228:	6043      	streq	r3, [r0, #4]
 800322a:	2314      	movs	r3, #20
 800322c:	fb03 1102 	mla	r1, r3, r2, r1
 8003230:	684b      	ldr	r3, [r1, #4]
 8003232:	68d9      	ldr	r1, [r3, #12]
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <vTaskSwitchContext+0x78>)
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0c      	ldr	r2, [pc, #48]	@ (8003270 <vTaskSwitchContext+0x7c>)
 800323e:	3354      	adds	r3, #84	@ 0x54
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	e7de      	b.n	8003202 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003244:	b942      	cbnz	r2, 8003258 <vTaskSwitchContext+0x64>
 8003246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	e7fe      	b.n	8003256 <vTaskSwitchContext+0x62>
 8003258:	3a01      	subs	r2, #1
 800325a:	e7d8      	b.n	800320e <vTaskSwitchContext+0x1a>
 800325c:	20000a48 	.word	0x20000a48
 8003260:	20000a58 	.word	0x20000a58
 8003264:	20000a64 	.word	0x20000a64
 8003268:	20000ae0 	.word	0x20000ae0
 800326c:	20000f40 	.word	0x20000f40
 8003270:	2000001c 	.word	0x2000001c

08003274 <vTaskPlaceOnEventList>:
{
 8003274:	b510      	push	{r4, lr}
 8003276:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003278:	b940      	cbnz	r0, 800328c <vTaskPlaceOnEventList+0x18>
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	e7fe      	b.n	800328a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <vTaskPlaceOnEventList+0x30>)
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	3118      	adds	r1, #24
 8003292:	f7ff f884 	bl	800239e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003296:	4620      	mov	r0, r4
 8003298:	2101      	movs	r1, #1
}
 800329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800329e:	f7ff bcc3 	b.w	8002c28 <prvAddCurrentTaskToDelayedList>
 80032a2:	bf00      	nop
 80032a4:	20000f40 	.word	0x20000f40

080032a8 <vTaskPlaceOnEventListRestricted>:
	{
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	460d      	mov	r5, r1
 80032ac:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80032ae:	b940      	cbnz	r0, 80032c2 <vTaskPlaceOnEventListRestricted+0x1a>
 80032b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	e7fe      	b.n	80032c0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032c2:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <vTaskPlaceOnEventListRestricted+0x38>)
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	3118      	adds	r1, #24
 80032c8:	f7ff f85e 	bl	8002388 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80032cc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032ce:	4621      	mov	r1, r4
 80032d0:	bf0c      	ite	eq
 80032d2:	4628      	moveq	r0, r5
 80032d4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80032d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032dc:	f7ff bca4 	b.w	8002c28 <prvAddCurrentTaskToDelayedList>
 80032e0:	20000f40 	.word	0x20000f40

080032e4 <xTaskRemoveFromEventList>:
{
 80032e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e6:	68c3      	ldr	r3, [r0, #12]
 80032e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80032ea:	b944      	cbnz	r4, 80032fe <xTaskRemoveFromEventList+0x1a>
 80032ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	e7fe      	b.n	80032fc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032fe:	f104 0518 	add.w	r5, r4, #24
 8003302:	4628      	mov	r0, r5
 8003304:	f7ff f862 	bl	80023cc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003308:	4b10      	ldr	r3, [pc, #64]	@ (800334c <xTaskRemoveFromEventList+0x68>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b9db      	cbnz	r3, 8003346 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800330e:	1d25      	adds	r5, r4, #4
 8003310:	4628      	mov	r0, r5
 8003312:	f7ff f85b 	bl	80023cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003316:	4a0e      	ldr	r2, [pc, #56]	@ (8003350 <xTaskRemoveFromEventList+0x6c>)
 8003318:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800331a:	6811      	ldr	r1, [r2, #0]
 800331c:	428b      	cmp	r3, r1
 800331e:	bf88      	it	hi
 8003320:	6013      	strhi	r3, [r2, #0]
 8003322:	4a0c      	ldr	r2, [pc, #48]	@ (8003354 <xTaskRemoveFromEventList+0x70>)
 8003324:	2014      	movs	r0, #20
 8003326:	4629      	mov	r1, r5
 8003328:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800332c:	f7ff f82c 	bl	8002388 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003330:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <xTaskRemoveFromEventList+0x74>)
 8003332:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800333a:	bf83      	ittte	hi
 800333c:	4b07      	ldrhi	r3, [pc, #28]	@ (800335c <xTaskRemoveFromEventList+0x78>)
 800333e:	2001      	movhi	r0, #1
 8003340:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003342:	2000      	movls	r0, #0
}
 8003344:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003346:	4806      	ldr	r0, [pc, #24]	@ (8003360 <xTaskRemoveFromEventList+0x7c>)
 8003348:	4629      	mov	r1, r5
 800334a:	e7ef      	b.n	800332c <xTaskRemoveFromEventList+0x48>
 800334c:	20000a48 	.word	0x20000a48
 8003350:	20000a64 	.word	0x20000a64
 8003354:	20000ae0 	.word	0x20000ae0
 8003358:	20000f40 	.word	0x20000f40
 800335c:	20000a58 	.word	0x20000a58
 8003360:	20000a9c 	.word	0x20000a9c

08003364 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <vTaskInternalSetTimeOutState+0x10>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800336a:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <vTaskInternalSetTimeOutState+0x14>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6043      	str	r3, [r0, #4]
}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000a54 	.word	0x20000a54
 8003378:	20000a68 	.word	0x20000a68

0800337c <xTaskCheckForTimeOut>:
{
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003380:	4605      	mov	r5, r0
 8003382:	b940      	cbnz	r0, 8003396 <xTaskCheckForTimeOut+0x1a>
 8003384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	e7fe      	b.n	8003394 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003396:	b941      	cbnz	r1, 80033aa <xTaskCheckForTimeOut+0x2e>
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	e7fe      	b.n	80033a8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80033aa:	f000 facb 	bl	8003944 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80033ae:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <xTaskCheckForTimeOut+0x70>)
 80033b0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	d010      	beq.n	80033da <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033b8:	480d      	ldr	r0, [pc, #52]	@ (80033f0 <xTaskCheckForTimeOut+0x74>)
 80033ba:	682e      	ldr	r6, [r5, #0]
 80033bc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033be:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033c0:	4286      	cmp	r6, r0
 80033c2:	d001      	beq.n	80033c8 <xTaskCheckForTimeOut+0x4c>
 80033c4:	428a      	cmp	r2, r1
 80033c6:	d90f      	bls.n	80033e8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033c8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033ca:	4283      	cmp	r3, r0
 80033cc:	d90a      	bls.n	80033e4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80033ce:	1a5b      	subs	r3, r3, r1
 80033d0:	4413      	add	r3, r2
 80033d2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7ff ffc5 	bl	8003364 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80033da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80033dc:	f000 fad2 	bl	8003984 <vPortExitCritical>
}
 80033e0:	4620      	mov	r0, r4
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80033e8:	2401      	movs	r4, #1
 80033ea:	e7f7      	b.n	80033dc <xTaskCheckForTimeOut+0x60>
 80033ec:	20000a68 	.word	0x20000a68
 80033f0:	20000a54 	.word	0x20000a54

080033f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80033f4:	4b01      	ldr	r3, [pc, #4]	@ (80033fc <vTaskMissedYield+0x8>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	4770      	bx	lr
 80033fc:	20000a58 	.word	0x20000a58

08003400 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <xTaskGetSchedulerState+0x18>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b133      	cbz	r3, 8003414 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <xTaskGetSchedulerState+0x1c>)
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	fab0 f080 	clz	r0, r0
 800340e:	0940      	lsrs	r0, r0, #5
 8003410:	0040      	lsls	r0, r0, #1
 8003412:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003414:	2001      	movs	r0, #1
	}
 8003416:	4770      	bx	lr
 8003418:	20000a60 	.word	0x20000a60
 800341c:	20000a48 	.word	0x20000a48

08003420 <xTaskPriorityDisinherit>:
	{
 8003420:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8003422:	b908      	cbnz	r0, 8003428 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8003424:	2000      	movs	r0, #0
	}
 8003426:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <xTaskPriorityDisinherit+0x78>)
 800342a:	681c      	ldr	r4, [r3, #0]
 800342c:	4284      	cmp	r4, r0
 800342e:	d008      	beq.n	8003442 <xTaskPriorityDisinherit+0x22>
 8003430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	e7fe      	b.n	8003440 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003442:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003444:	b943      	cbnz	r3, 8003458 <xTaskPriorityDisinherit+0x38>
 8003446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	e7fe      	b.n	8003456 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003458:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800345a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800345c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800345e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003460:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003462:	d0df      	beq.n	8003424 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1dd      	bne.n	8003424 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003468:	1d25      	adds	r5, r4, #4
 800346a:	4628      	mov	r0, r5
 800346c:	f7fe ffae 	bl	80023cc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003470:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003472:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003474:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003478:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800347a:	4a08      	ldr	r2, [pc, #32]	@ (800349c <xTaskPriorityDisinherit+0x7c>)
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	428b      	cmp	r3, r1
 8003480:	bf88      	it	hi
 8003482:	6013      	strhi	r3, [r2, #0]
 8003484:	4a06      	ldr	r2, [pc, #24]	@ (80034a0 <xTaskPriorityDisinherit+0x80>)
 8003486:	2014      	movs	r0, #20
 8003488:	fb00 2003 	mla	r0, r0, r3, r2
 800348c:	4629      	mov	r1, r5
 800348e:	f7fe ff7b 	bl	8002388 <vListInsertEnd>
					xReturn = pdTRUE;
 8003492:	2001      	movs	r0, #1
		return xReturn;
 8003494:	e7c7      	b.n	8003426 <xTaskPriorityDisinherit+0x6>
 8003496:	bf00      	nop
 8003498:	20000f40 	.word	0x20000f40
 800349c:	20000a64 	.word	0x20000a64
 80034a0:	20000ae0 	.word	0x20000ae0

080034a4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80034a4:	4291      	cmp	r1, r2
{
 80034a6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034a8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034aa:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80034ac:	d80a      	bhi.n	80034c4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	6983      	ldr	r3, [r0, #24]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20d      	bcs.n	80034d2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <prvInsertTimerInActiveList+0x34>)
 80034b8:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	f7fe ff6f 	bl	800239e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80034c0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80034c2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d201      	bcs.n	80034cc <prvInsertTimerInActiveList+0x28>
 80034c8:	4299      	cmp	r1, r3
 80034ca:	d202      	bcs.n	80034d2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <prvInsertTimerInActiveList+0x38>)
 80034ce:	1d01      	adds	r1, r0, #4
 80034d0:	e7f3      	b.n	80034ba <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80034d2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80034d4:	e7f5      	b.n	80034c2 <prvInsertTimerInActiveList+0x1e>
 80034d6:	bf00      	nop
 80034d8:	20001044 	.word	0x20001044
 80034dc:	20001048 	.word	0x20001048

080034e0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80034e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80034e2:	4c11      	ldr	r4, [pc, #68]	@ (8003528 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80034e4:	f000 fa2e 	bl	8003944 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80034e8:	6825      	ldr	r5, [r4, #0]
 80034ea:	b9bd      	cbnz	r5, 800351c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80034ec:	4f0f      	ldr	r7, [pc, #60]	@ (800352c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80034ee:	4e10      	ldr	r6, [pc, #64]	@ (8003530 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80034f0:	4638      	mov	r0, r7
 80034f2:	f7fe ff3b 	bl	800236c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7fe ff38 	bl	800236c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80034fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80034fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003538 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8003500:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003504:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8003506:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003508:	200a      	movs	r0, #10
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <prvCheckForValidListAndQueue+0x60>)
 800350c:	9500      	str	r5, [sp, #0]
 800350e:	f7ff f877 	bl	8002600 <xQueueGenericCreateStatic>
 8003512:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003514:	b110      	cbz	r0, 800351c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003516:	490b      	ldr	r1, [pc, #44]	@ (8003544 <prvCheckForValidListAndQueue+0x64>)
 8003518:	f7ff fab0 	bl	8002a7c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800351c:	b003      	add	sp, #12
 800351e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8003522:	f000 ba2f 	b.w	8003984 <vPortExitCritical>
 8003526:	bf00      	nop
 8003528:	20001040 	.word	0x20001040
 800352c:	20001060 	.word	0x20001060
 8003530:	2000104c 	.word	0x2000104c
 8003534:	20001048 	.word	0x20001048
 8003538:	20000f98 	.word	0x20000f98
 800353c:	20001044 	.word	0x20001044
 8003540:	20000f44 	.word	0x20000f44
 8003544:	080085a1 	.word	0x080085a1

08003548 <xTimerCreateTimerTask>:
{
 8003548:	b510      	push	{r4, lr}
 800354a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800354c:	f7ff ffc8 	bl	80034e0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8003550:	4b12      	ldr	r3, [pc, #72]	@ (800359c <xTimerCreateTimerTask+0x54>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b1b3      	cbz	r3, 8003584 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003556:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003558:	aa07      	add	r2, sp, #28
 800355a:	a906      	add	r1, sp, #24
 800355c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800355e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003562:	f7fe fef7 	bl	8002354 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003566:	9b05      	ldr	r3, [sp, #20]
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	9b06      	ldr	r3, [sp, #24]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2302      	movs	r3, #2
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	9a07      	ldr	r2, [sp, #28]
 8003574:	490a      	ldr	r1, [pc, #40]	@ (80035a0 <xTimerCreateTimerTask+0x58>)
 8003576:	480b      	ldr	r0, [pc, #44]	@ (80035a4 <xTimerCreateTimerTask+0x5c>)
 8003578:	4623      	mov	r3, r4
 800357a:	f7ff fc49 	bl	8002e10 <xTaskCreateStatic>
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <xTimerCreateTimerTask+0x60>)
 8003580:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003582:	b940      	cbnz	r0, 8003596 <xTimerCreateTimerTask+0x4e>
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003594:	e7fe      	b.n	8003594 <xTimerCreateTimerTask+0x4c>
}
 8003596:	2001      	movs	r0, #1
 8003598:	b008      	add	sp, #32
 800359a:	bd10      	pop	{r4, pc}
 800359c:	20001040 	.word	0x20001040
 80035a0:	080085a6 	.word	0x080085a6
 80035a4:	080036a9 	.word	0x080036a9
 80035a8:	2000103c 	.word	0x2000103c

080035ac <xTimerGenericCommand>:
{
 80035ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80035ae:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80035b0:	4604      	mov	r4, r0
{
 80035b2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80035b4:	b940      	cbnz	r0, 80035c8 <xTimerGenericCommand+0x1c>
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	e7fe      	b.n	80035c6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80035c8:	4d0d      	ldr	r5, [pc, #52]	@ (8003600 <xTimerGenericCommand+0x54>)
 80035ca:	6828      	ldr	r0, [r5, #0]
 80035cc:	b180      	cbz	r0, 80035f0 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035ce:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035d0:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035d4:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035d6:	dc0d      	bgt.n	80035f4 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035d8:	f7ff ff12 	bl	8003400 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035dc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035de:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035e0:	bf08      	it	eq
 80035e2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035e4:	6828      	ldr	r0, [r5, #0]
 80035e6:	bf18      	it	ne
 80035e8:	461a      	movne	r2, r3
 80035ea:	4669      	mov	r1, sp
 80035ec:	f7ff f881 	bl	80026f2 <xQueueGenericSend>
}
 80035f0:	b004      	add	sp, #16
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035f4:	2300      	movs	r3, #0
 80035f6:	4669      	mov	r1, sp
 80035f8:	f7ff f937 	bl	800286a <xQueueGenericSendFromISR>
 80035fc:	e7f8      	b.n	80035f0 <xTimerGenericCommand+0x44>
 80035fe:	bf00      	nop
 8003600:	20001040 	.word	0x20001040

08003604 <prvSampleTimeNow>:
{
 8003604:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8003608:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80036a4 <prvSampleTimeNow+0xa0>
{
 800360c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800360e:	f7ff fcbd 	bl	8002f8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003612:	f8d8 3000 	ldr.w	r3, [r8]
 8003616:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8003618:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800361a:	d909      	bls.n	8003630 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800361c:	4f1f      	ldr	r7, [pc, #124]	@ (800369c <prvSampleTimeNow+0x98>)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	b96a      	cbnz	r2, 8003640 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8003624:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <prvSampleTimeNow+0x9c>)
 8003626:	6811      	ldr	r1, [r2, #0]
 8003628:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800362a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <prvSampleTimeNow+0x2e>
 8003630:	2300      	movs	r3, #0
}
 8003632:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8003634:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8003636:	f8c8 5000 	str.w	r5, [r8]
}
 800363a:	b002      	add	sp, #8
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003640:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003642:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003644:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003648:	f104 0a04 	add.w	sl, r4, #4
 800364c:	4650      	mov	r0, sl
 800364e:	f7fe febd 	bl	80023cc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003652:	6a23      	ldr	r3, [r4, #32]
 8003654:	4620      	mov	r0, r4
 8003656:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003658:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800365c:	075b      	lsls	r3, r3, #29
 800365e:	d5de      	bpl.n	800361e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003660:	69a3      	ldr	r3, [r4, #24]
 8003662:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8003664:	4599      	cmp	r9, r3
 8003666:	d206      	bcs.n	8003676 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003668:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800366a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800366c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800366e:	4651      	mov	r1, sl
 8003670:	f7fe fe95 	bl	800239e <vListInsert>
 8003674:	e7d3      	b.n	800361e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003676:	2300      	movs	r3, #0
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	464a      	mov	r2, r9
 800367c:	4619      	mov	r1, r3
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff ff94 	bl	80035ac <xTimerGenericCommand>
				configASSERT( xResult );
 8003684:	2800      	cmp	r0, #0
 8003686:	d1ca      	bne.n	800361e <prvSampleTimeNow+0x1a>
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	e7fe      	b.n	8003698 <prvSampleTimeNow+0x94>
 800369a:	bf00      	nop
 800369c:	20001048 	.word	0x20001048
 80036a0:	20001044 	.word	0x20001044
 80036a4:	20001038 	.word	0x20001038

080036a8 <prvTimerTask>:
{
 80036a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036ac:	4d6e      	ldr	r5, [pc, #440]	@ (8003868 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036ae:	4e6f      	ldr	r6, [pc, #444]	@ (800386c <prvTimerTask+0x1c4>)
{
 80036b0:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	f8d3 8000 	ldr.w	r8, [r3]
 80036b8:	f1b8 0f00 	cmp.w	r8, #0
 80036bc:	d035      	beq.n	800372a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036c4:	2400      	movs	r4, #0
	vTaskSuspendAll();
 80036c6:	f7ff fc59 	bl	8002f7c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ca:	a804      	add	r0, sp, #16
 80036cc:	f7ff ff9a 	bl	8003604 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80036d0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036d2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d169      	bne.n	80037ac <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036d8:	2c00      	cmp	r4, #0
 80036da:	d14c      	bne.n	8003776 <prvTimerTask+0xce>
 80036dc:	4540      	cmp	r0, r8
 80036de:	d350      	bcc.n	8003782 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 80036e0:	f7ff fcf0 	bl	80030c4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036ea:	1d38      	adds	r0, r7, #4
 80036ec:	f7fe fe6e 	bl	80023cc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036f4:	0758      	lsls	r0, r3, #29
 80036f6:	d51a      	bpl.n	800372e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	4643      	mov	r3, r8
 80036fc:	464a      	mov	r2, r9
 80036fe:	4441      	add	r1, r8
 8003700:	4638      	mov	r0, r7
 8003702:	f7ff fecf 	bl	80034a4 <prvInsertTimerInActiveList>
 8003706:	b1b0      	cbz	r0, 8003736 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003708:	9400      	str	r4, [sp, #0]
 800370a:	4623      	mov	r3, r4
 800370c:	4642      	mov	r2, r8
 800370e:	4621      	mov	r1, r4
 8003710:	4638      	mov	r0, r7
 8003712:	f7ff ff4b 	bl	80035ac <xTimerGenericCommand>
			configASSERT( xResult );
 8003716:	b970      	cbnz	r0, 8003736 <prvTimerTask+0x8e>
 8003718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	e7fe      	b.n	8003728 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800372a:	2401      	movs	r4, #1
 800372c:	e7cb      	b.n	80036c6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	4638      	mov	r0, r7
 800373a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800373c:	6830      	ldr	r0, [r6, #0]
 800373e:	2200      	movs	r2, #0
 8003740:	a904      	add	r1, sp, #16
 8003742:	f7ff f8fc 	bl	800293e <xQueueReceive>
 8003746:	2800      	cmp	r0, #0
 8003748:	d0b3      	beq.n	80036b2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800374a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800374c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800374e:	2b00      	cmp	r3, #0
 8003750:	db2f      	blt.n	80037b2 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003752:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003754:	6963      	ldr	r3, [r4, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d132      	bne.n	80037c0 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800375a:	a803      	add	r0, sp, #12
 800375c:	f7ff ff52 	bl	8003604 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8003760:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003762:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8003764:	2b09      	cmp	r3, #9
 8003766:	d8e9      	bhi.n	800373c <prvTimerTask+0x94>
 8003768:	e8df f003 	tbb	[pc, r3]
 800376c:	572e2e2e 	.word	0x572e2e2e
 8003770:	2e2e765e 	.word	0x2e2e765e
 8003774:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003776:	4b3e      	ldr	r3, [pc, #248]	@ (8003870 <prvTimerTask+0x1c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	fab4 f484 	clz	r4, r4
 8003780:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003782:	6830      	ldr	r0, [r6, #0]
 8003784:	4622      	mov	r2, r4
 8003786:	eba8 0109 	sub.w	r1, r8, r9
 800378a:	f7ff f989 	bl	8002aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800378e:	f7ff fc99 	bl	80030c4 <xTaskResumeAll>
 8003792:	2800      	cmp	r0, #0
 8003794:	d1d2      	bne.n	800373c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8003796:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	e7c7      	b.n	800373c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80037ac:	f7ff fc8a 	bl	80030c4 <xTaskResumeAll>
}
 80037b0:	e7c4      	b.n	800373c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80037b2:	9b05      	ldr	r3, [sp, #20]
 80037b4:	9907      	ldr	r1, [sp, #28]
 80037b6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037b8:	9b04      	ldr	r3, [sp, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dbbe      	blt.n	800373c <prvTimerTask+0x94>
 80037be:	e7c8      	b.n	8003752 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c0:	1d20      	adds	r0, r4, #4
 80037c2:	f7fe fe03 	bl	80023cc <uxListRemove>
 80037c6:	e7c8      	b.n	800375a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037cc:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037d6:	9b05      	ldr	r3, [sp, #20]
 80037d8:	4620      	mov	r0, r4
 80037da:	4419      	add	r1, r3
 80037dc:	f7ff fe62 	bl	80034a4 <prvInsertTimerInActiveList>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d0ab      	beq.n	800373c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037e4:	6a23      	ldr	r3, [r4, #32]
 80037e6:	4620      	mov	r0, r4
 80037e8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80037ee:	0759      	lsls	r1, r3, #29
 80037f0:	d5a4      	bpl.n	800373c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037f2:	69a2      	ldr	r2, [r4, #24]
 80037f4:	9905      	ldr	r1, [sp, #20]
 80037f6:	2300      	movs	r3, #0
 80037f8:	440a      	add	r2, r1
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	4620      	mov	r0, r4
 8003800:	f7ff fed4 	bl	80035ac <xTimerGenericCommand>
							configASSERT( xResult );
 8003804:	2800      	cmp	r0, #0
 8003806:	d199      	bne.n	800373c <prvTimerTask+0x94>
 8003808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	e7fe      	b.n	8003818 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800381a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8003826:	e789      	b.n	800373c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003828:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003834:	9905      	ldr	r1, [sp, #20]
 8003836:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003838:	b941      	cbnz	r1, 800384c <prvTimerTask+0x1a4>
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	e7fe      	b.n	800384a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800384c:	4603      	mov	r3, r0
 800384e:	4401      	add	r1, r0
 8003850:	4620      	mov	r0, r4
 8003852:	f7ff fe27 	bl	80034a4 <prvInsertTimerInActiveList>
					break;
 8003856:	e771      	b.n	800373c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003858:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800385c:	079a      	lsls	r2, r3, #30
 800385e:	d4de      	bmi.n	800381e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8003860:	4620      	mov	r0, r4
 8003862:	f000 fa6d 	bl	8003d40 <vPortFree>
 8003866:	e769      	b.n	800373c <prvTimerTask+0x94>
 8003868:	20001048 	.word	0x20001048
 800386c:	20001040 	.word	0x20001040
 8003870:	20001044 	.word	0x20001044

08003874 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003874:	4808      	ldr	r0, [pc, #32]	@ (8003898 <prvPortStartFirstTask+0x24>)
 8003876:	6800      	ldr	r0, [r0, #0]
 8003878:	6800      	ldr	r0, [r0, #0]
 800387a:	f380 8808 	msr	MSP, r0
 800387e:	f04f 0000 	mov.w	r0, #0
 8003882:	f380 8814 	msr	CONTROL, r0
 8003886:	b662      	cpsie	i
 8003888:	b661      	cpsie	f
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	df00      	svc	0
 8003894:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003896:	0000      	.short	0x0000
 8003898:	e000ed08 	.word	0xe000ed08

0800389c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800389c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80038ac <vPortEnableVFP+0x10>
 80038a0:	6801      	ldr	r1, [r0, #0]
 80038a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80038a6:	6001      	str	r1, [r0, #0]
 80038a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038aa:	0000      	.short	0x0000
 80038ac:	e000ed88 	.word	0xe000ed88

080038b0 <prvTaskExitError>:
{
 80038b0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <prvTaskExitError+0x3c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d008      	beq.n	80038d0 <prvTaskExitError+0x20>
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	e7fe      	b.n	80038ce <prvTaskExitError+0x1e>
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80038e0:	9b01      	ldr	r3, [sp, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0fc      	beq.n	80038e0 <prvTaskExitError+0x30>
}
 80038e6:	b002      	add	sp, #8
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	2000000c 	.word	0x2000000c

080038f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038f8:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <pxPortInitialiseStack+0x28>)
 80038fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038fe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003902:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003906:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800390a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800390e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003912:	3844      	subs	r0, #68	@ 0x44
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	080038b1 	.word	0x080038b1
 800391c:	00000000 	.word	0x00000000

08003920 <SVC_Handler>:
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	4770      	bx	lr
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst2>:
 8003940:	20000f40 	.word	0x20000f40

08003944 <vPortEnterCritical>:
 8003944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003954:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <vPortEnterCritical+0x3c>)
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800395a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800395c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800395e:	d10e      	bne.n	800397e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003960:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003964:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8003968:	b2db      	uxtb	r3, r3
 800396a:	b143      	cbz	r3, 800397e <vPortEnterCritical+0x3a>
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	e7fe      	b.n	800397c <vPortEnterCritical+0x38>
}
 800397e:	4770      	bx	lr
 8003980:	2000000c 	.word	0x2000000c

08003984 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003984:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <vPortExitCritical+0x24>)
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	b943      	cbnz	r3, 800399c <vPortExitCritical+0x18>
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	e7fe      	b.n	800399a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800399c:	3b01      	subs	r3, #1
 800399e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039a0:	b90b      	cbnz	r3, 80039a6 <vPortExitCritical+0x22>
	__asm volatile
 80039a2:	f383 8811 	msr	BASEPRI, r3
}
 80039a6:	4770      	bx	lr
 80039a8:	2000000c 	.word	0x2000000c
 80039ac:	00000000 	.word	0x00000000

080039b0 <PendSV_Handler>:
	__asm volatile
 80039b0:	f3ef 8009 	mrs	r0, PSP
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <pxCurrentTCBConst>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f01e 0f10 	tst.w	lr, #16
 80039c0:	bf08      	it	eq
 80039c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ca:	6010      	str	r0, [r2, #0]
 80039cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80039d4:	f380 8811 	msr	BASEPRI, r0
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f7ff fc08 	bl	80031f4 <vTaskSwitchContext>
 80039e4:	f04f 0000 	mov.w	r0, #0
 80039e8:	f380 8811 	msr	BASEPRI, r0
 80039ec:	bc09      	pop	{r0, r3}
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	6808      	ldr	r0, [r1, #0]
 80039f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f6:	f01e 0f10 	tst.w	lr, #16
 80039fa:	bf08      	it	eq
 80039fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a00:	f380 8809 	msr	PSP, r0
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	f3af 8000 	nop.w

08003a10 <pxCurrentTCBConst>:
 8003a10:	20000f40 	.word	0x20000f40

08003a14 <xPortSysTickHandler>:
{
 8003a14:	b508      	push	{r3, lr}
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003a26:	f7ff fab7 	bl	8002f98 <xTaskIncrementTick>
 8003a2a:	b128      	cbz	r0, 8003a38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f383 8811 	msr	BASEPRI, r3
}
 8003a3e:	bd08      	pop	{r3, pc}

08003a40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a40:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003a44:	2300      	movs	r3, #0
 8003a46:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a48:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a4a:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <vPortSetupTimerInterrupt+0x20>)
 8003a4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a5a:	2307      	movs	r3, #7
 8003a5c:	6113      	str	r3, [r2, #16]
}
 8003a5e:	4770      	bx	lr
 8003a60:	20000000 	.word	0x20000000

08003a64 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8003a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a6a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8003a6e:	4a38      	ldr	r2, [pc, #224]	@ (8003b50 <xPortStartScheduler+0xec>)
 8003a70:	4291      	cmp	r1, r2
 8003a72:	d108      	bne.n	8003a86 <xPortStartScheduler+0x22>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	e7fe      	b.n	8003a84 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a86:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003a8a:	4b32      	ldr	r3, [pc, #200]	@ (8003b54 <xPortStartScheduler+0xf0>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d108      	bne.n	8003aa2 <xPortStartScheduler+0x3e>
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	e7fe      	b.n	8003aa0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <xPortStartScheduler+0xf4>)
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003aaa:	22ff      	movs	r2, #255	@ 0xff
 8003aac:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003aae:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b5c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ab8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003abc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ac0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ac2:	4a27      	ldr	r2, [pc, #156]	@ (8003b60 <xPortStartScheduler+0xfc>)
 8003ac4:	2307      	movs	r3, #7
 8003ac6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ac8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8003acc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ace:	0609      	lsls	r1, r1, #24
 8003ad0:	d40a      	bmi.n	8003ae8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d011      	beq.n	8003afa <xPortStartScheduler+0x96>
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	e7fe      	b.n	8003ae6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003aec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f88d 3003 	strb.w	r3, [sp, #3]
 8003af8:	e7e6      	b.n	8003ac8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003afa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003afe:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b00:	9b01      	ldr	r3, [sp, #4]
 8003b02:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b04:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b0c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b14:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b18:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003b1c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003b20:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8003b24:	f7ff ff8c 	bl	8003a40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003b28:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <xPortStartScheduler+0x100>)
 8003b2a:	2500      	movs	r5, #0
 8003b2c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8003b2e:	f7ff feb5 	bl	800389c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b32:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8003b36:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003b3a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8003b3e:	f7ff fe99 	bl	8003874 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003b42:	f7ff fb57 	bl	80031f4 <vTaskSwitchContext>
	prvTaskExitError();
 8003b46:	f7ff feb3 	bl	80038b0 <prvTaskExitError>
}
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	b003      	add	sp, #12
 8003b4e:	bd30      	pop	{r4, r5, pc}
 8003b50:	410fc271 	.word	0x410fc271
 8003b54:	410fc270 	.word	0x410fc270
 8003b58:	e000e400 	.word	0xe000e400
 8003b5c:	20001078 	.word	0x20001078
 8003b60:	20001074 	.word	0x20001074
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b6c:	2b0f      	cmp	r3, #15
 8003b6e:	d90e      	bls.n	8003b8e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b70:	4a11      	ldr	r2, [pc, #68]	@ (8003bb8 <vPortValidateInterruptPriority+0x50>)
 8003b72:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b74:	4a11      	ldr	r2, [pc, #68]	@ (8003bbc <vPortValidateInterruptPriority+0x54>)
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d908      	bls.n	8003b8e <vPortValidateInterruptPriority+0x26>
 8003b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	e7fe      	b.n	8003b8c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003b92:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc0 <vPortValidateInterruptPriority+0x58>)
 8003b94:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d908      	bls.n	8003bb4 <vPortValidateInterruptPriority+0x4c>
 8003ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	e7fe      	b.n	8003bb2 <vPortValidateInterruptPriority+0x4a>
	}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e3f0 	.word	0xe000e3f0
 8003bbc:	20001078 	.word	0x20001078
 8003bc0:	20001074 	.word	0x20001074

08003bc4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bc4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <prvInsertBlockIntoFreeList+0x44>)
 8003bc8:	461a      	mov	r2, r3
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4283      	cmp	r3, r0
 8003bce:	d3fb      	bcc.n	8003bc8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bd0:	6854      	ldr	r4, [r2, #4]
 8003bd2:	1911      	adds	r1, r2, r4
 8003bd4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bd6:	bf01      	itttt	eq
 8003bd8:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8003bda:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bdc:	1909      	addeq	r1, r1, r4
 8003bde:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003be0:	6844      	ldr	r4, [r0, #4]
 8003be2:	1901      	adds	r1, r0, r4
 8003be4:	428b      	cmp	r3, r1
 8003be6:	d10c      	bne.n	8003c02 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003be8:	4908      	ldr	r1, [pc, #32]	@ (8003c0c <prvInsertBlockIntoFreeList+0x48>)
 8003bea:	6809      	ldr	r1, [r1, #0]
 8003bec:	428b      	cmp	r3, r1
 8003bee:	d003      	beq.n	8003bf8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	4421      	add	r1, r4
 8003bf4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bf6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bf8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bfa:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bfc:	bf18      	it	ne
 8003bfe:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	4619      	mov	r1, r3
 8003c04:	e7f8      	b.n	8003bf8 <prvInsertBlockIntoFreeList+0x34>
 8003c06:	bf00      	nop
 8003c08:	20001094 	.word	0x20001094
 8003c0c:	20001090 	.word	0x20001090

08003c10 <pvPortMalloc>:
{
 8003c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c14:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003c16:	f7ff f9b1 	bl	8002f7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003c1a:	4942      	ldr	r1, [pc, #264]	@ (8003d24 <pvPortMalloc+0x114>)
 8003c1c:	4d42      	ldr	r5, [pc, #264]	@ (8003d28 <pvPortMalloc+0x118>)
 8003c1e:	680b      	ldr	r3, [r1, #0]
 8003c20:	bb0b      	cbnz	r3, 8003c66 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003c22:	4a42      	ldr	r2, [pc, #264]	@ (8003d2c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c24:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c26:	bf1f      	itttt	ne
 8003c28:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c2a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c2e:	f502 5270 	addne.w	r2, r2, #15360	@ 0x3c00
 8003c32:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c34:	bf0c      	ite	eq
 8003c36:	f44f 5370 	moveq.w	r3, #15360	@ 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c3a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c3c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c3e:	4e3c      	ldr	r6, [pc, #240]	@ (8003d30 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8003c40:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c42:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003c46:	2000      	movs	r0, #0
 8003c48:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c4a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003c4c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c50:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c52:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8003c56:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c58:	4b36      	ldr	r3, [pc, #216]	@ (8003d34 <pvPortMalloc+0x124>)
 8003c5a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <pvPortMalloc+0x128>)
 8003c5e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c64:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c66:	682e      	ldr	r6, [r5, #0]
 8003c68:	4226      	tst	r6, r4
 8003c6a:	d155      	bne.n	8003d18 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	d046      	beq.n	8003cfe <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8003c70:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c74:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c76:	bf1c      	itt	ne
 8003c78:	f023 0307 	bicne.w	r3, r3, #7
 8003c7c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04a      	beq.n	8003d18 <pvPortMalloc+0x108>
 8003c82:	4f2d      	ldr	r7, [pc, #180]	@ (8003d38 <pvPortMalloc+0x128>)
 8003c84:	683c      	ldr	r4, [r7, #0]
 8003c86:	429c      	cmp	r4, r3
 8003c88:	d346      	bcc.n	8003d18 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8003c8a:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <pvPortMalloc+0x120>)
 8003c8c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c8e:	6868      	ldr	r0, [r5, #4]
 8003c90:	4298      	cmp	r0, r3
 8003c92:	d204      	bcs.n	8003c9e <pvPortMalloc+0x8e>
 8003c94:	f8d5 c000 	ldr.w	ip, [r5]
 8003c98:	f1bc 0f00 	cmp.w	ip, #0
 8003c9c:	d115      	bne.n	8003cca <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8003c9e:	6809      	ldr	r1, [r1, #0]
 8003ca0:	42a9      	cmp	r1, r5
 8003ca2:	d039      	beq.n	8003d18 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ca4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ca6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003caa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cac:	1ac2      	subs	r2, r0, r3
 8003cae:	2a10      	cmp	r2, #16
 8003cb0:	d912      	bls.n	8003cd8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cb2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb4:	0741      	lsls	r1, r0, #29
 8003cb6:	d00b      	beq.n	8003cd0 <pvPortMalloc+0xc0>
 8003cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	e7fe      	b.n	8003cc8 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 8003cca:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ccc:	4665      	mov	r5, ip
 8003cce:	e7de      	b.n	8003c8e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cd0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cd2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cd4:	f7ff ff76 	bl	8003bc4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cd8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cda:	4916      	ldr	r1, [pc, #88]	@ (8003d34 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cdc:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cde:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ce2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ce4:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8003cea:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cec:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cee:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8003cf0:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cf4:	bf38      	it	cc
 8003cf6:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8003cf8:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cfa:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8003cfe:	f7ff f9e1 	bl	80030c4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d02:	0763      	lsls	r3, r4, #29
 8003d04:	d00a      	beq.n	8003d1c <pvPortMalloc+0x10c>
 8003d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	e7fe      	b.n	8003d16 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8003d18:	2400      	movs	r4, #0
 8003d1a:	e7f0      	b.n	8003cfe <pvPortMalloc+0xee>
}
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d22:	bf00      	nop
 8003d24:	20001090 	.word	0x20001090
 8003d28:	2000107c 	.word	0x2000107c
 8003d2c:	2000109c 	.word	0x2000109c
 8003d30:	20001094 	.word	0x20001094
 8003d34:	20001088 	.word	0x20001088
 8003d38:	2000108c 	.word	0x2000108c
 8003d3c:	20001084 	.word	0x20001084

08003d40 <vPortFree>:
{
 8003d40:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003d42:	4604      	mov	r4, r0
 8003d44:	b390      	cbz	r0, 8003dac <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d46:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <vPortFree+0x70>)
 8003d48:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	4213      	tst	r3, r2
 8003d50:	d108      	bne.n	8003d64 <vPortFree+0x24>
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	e7fe      	b.n	8003d62 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d64:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003d68:	b141      	cbz	r1, 8003d7c <vPortFree+0x3c>
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	e7fe      	b.n	8003d7a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d7c:	ea23 0302 	bic.w	r3, r3, r2
 8003d80:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003d84:	f7ff f8fa 	bl	8002f7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d88:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <vPortFree+0x74>)
 8003d8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003d8e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d90:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d94:	440b      	add	r3, r1
 8003d96:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d98:	f7ff ff14 	bl	8003bc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d9c:	4a06      	ldr	r2, [pc, #24]	@ (8003db8 <vPortFree+0x78>)
 8003d9e:	6813      	ldr	r3, [r2, #0]
}
 8003da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8003da4:	3301      	adds	r3, #1
 8003da6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8003da8:	f7ff b98c 	b.w	80030c4 <xTaskResumeAll>
}
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	bf00      	nop
 8003db0:	2000107c 	.word	0x2000107c
 8003db4:	2000108c 	.word	0x2000108c
 8003db8:	20001080 	.word	0x20001080

08003dbc <__cvt>:
 8003dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	ec57 6b10 	vmov	r6, r7, d0
 8003dc4:	2f00      	cmp	r7, #0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4619      	mov	r1, r3
 8003dca:	463b      	mov	r3, r7
 8003dcc:	bfbb      	ittet	lt
 8003dce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003dd2:	461f      	movlt	r7, r3
 8003dd4:	2300      	movge	r3, #0
 8003dd6:	232d      	movlt	r3, #45	@ 0x2d
 8003dd8:	700b      	strb	r3, [r1, #0]
 8003dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ddc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003de0:	4691      	mov	r9, r2
 8003de2:	f023 0820 	bic.w	r8, r3, #32
 8003de6:	bfbc      	itt	lt
 8003de8:	4632      	movlt	r2, r6
 8003dea:	4616      	movlt	r6, r2
 8003dec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003df0:	d005      	beq.n	8003dfe <__cvt+0x42>
 8003df2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003df6:	d100      	bne.n	8003dfa <__cvt+0x3e>
 8003df8:	3401      	adds	r4, #1
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	e000      	b.n	8003e00 <__cvt+0x44>
 8003dfe:	2103      	movs	r1, #3
 8003e00:	ab03      	add	r3, sp, #12
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	ab02      	add	r3, sp, #8
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	ec47 6b10 	vmov	d0, r6, r7
 8003e0c:	4653      	mov	r3, sl
 8003e0e:	4622      	mov	r2, r4
 8003e10:	f001 f8da 	bl	8004fc8 <_dtoa_r>
 8003e14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e18:	4605      	mov	r5, r0
 8003e1a:	d119      	bne.n	8003e50 <__cvt+0x94>
 8003e1c:	f019 0f01 	tst.w	r9, #1
 8003e20:	d00e      	beq.n	8003e40 <__cvt+0x84>
 8003e22:	eb00 0904 	add.w	r9, r0, r4
 8003e26:	2200      	movs	r2, #0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	f7fc fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e32:	b108      	cbz	r0, 8003e38 <__cvt+0x7c>
 8003e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e38:	2230      	movs	r2, #48	@ 0x30
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	454b      	cmp	r3, r9
 8003e3e:	d31e      	bcc.n	8003e7e <__cvt+0xc2>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e44:	1b5b      	subs	r3, r3, r5
 8003e46:	4628      	mov	r0, r5
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	b004      	add	sp, #16
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e54:	eb00 0904 	add.w	r9, r0, r4
 8003e58:	d1e5      	bne.n	8003e26 <__cvt+0x6a>
 8003e5a:	7803      	ldrb	r3, [r0, #0]
 8003e5c:	2b30      	cmp	r3, #48	@ 0x30
 8003e5e:	d10a      	bne.n	8003e76 <__cvt+0xba>
 8003e60:	2200      	movs	r2, #0
 8003e62:	2300      	movs	r3, #0
 8003e64:	4630      	mov	r0, r6
 8003e66:	4639      	mov	r1, r7
 8003e68:	f7fc fe36 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e6c:	b918      	cbnz	r0, 8003e76 <__cvt+0xba>
 8003e6e:	f1c4 0401 	rsb	r4, r4, #1
 8003e72:	f8ca 4000 	str.w	r4, [sl]
 8003e76:	f8da 3000 	ldr.w	r3, [sl]
 8003e7a:	4499      	add	r9, r3
 8003e7c:	e7d3      	b.n	8003e26 <__cvt+0x6a>
 8003e7e:	1c59      	adds	r1, r3, #1
 8003e80:	9103      	str	r1, [sp, #12]
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e7d9      	b.n	8003e3a <__cvt+0x7e>

08003e86 <__exponent>:
 8003e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	bfba      	itte	lt
 8003e8c:	4249      	neglt	r1, r1
 8003e8e:	232d      	movlt	r3, #45	@ 0x2d
 8003e90:	232b      	movge	r3, #43	@ 0x2b
 8003e92:	2909      	cmp	r1, #9
 8003e94:	7002      	strb	r2, [r0, #0]
 8003e96:	7043      	strb	r3, [r0, #1]
 8003e98:	dd29      	ble.n	8003eee <__exponent+0x68>
 8003e9a:	f10d 0307 	add.w	r3, sp, #7
 8003e9e:	461d      	mov	r5, r3
 8003ea0:	270a      	movs	r7, #10
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ea8:	fb07 1416 	mls	r4, r7, r6, r1
 8003eac:	3430      	adds	r4, #48	@ 0x30
 8003eae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	2c63      	cmp	r4, #99	@ 0x63
 8003eb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003eba:	4631      	mov	r1, r6
 8003ebc:	dcf1      	bgt.n	8003ea2 <__exponent+0x1c>
 8003ebe:	3130      	adds	r1, #48	@ 0x30
 8003ec0:	1e94      	subs	r4, r2, #2
 8003ec2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ec6:	1c41      	adds	r1, r0, #1
 8003ec8:	4623      	mov	r3, r4
 8003eca:	42ab      	cmp	r3, r5
 8003ecc:	d30a      	bcc.n	8003ee4 <__exponent+0x5e>
 8003ece:	f10d 0309 	add.w	r3, sp, #9
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	42ac      	cmp	r4, r5
 8003ed6:	bf88      	it	hi
 8003ed8:	2300      	movhi	r3, #0
 8003eda:	3302      	adds	r3, #2
 8003edc:	4403      	add	r3, r0
 8003ede:	1a18      	subs	r0, r3, r0
 8003ee0:	b003      	add	sp, #12
 8003ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ee8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003eec:	e7ed      	b.n	8003eca <__exponent+0x44>
 8003eee:	2330      	movs	r3, #48	@ 0x30
 8003ef0:	3130      	adds	r1, #48	@ 0x30
 8003ef2:	7083      	strb	r3, [r0, #2]
 8003ef4:	70c1      	strb	r1, [r0, #3]
 8003ef6:	1d03      	adds	r3, r0, #4
 8003ef8:	e7f1      	b.n	8003ede <__exponent+0x58>
	...

08003efc <_printf_float>:
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	b08d      	sub	sp, #52	@ 0x34
 8003f02:	460c      	mov	r4, r1
 8003f04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003f08:	4616      	mov	r6, r2
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	f000 fee9 	bl	8004ce4 <_localeconv_r>
 8003f12:	6803      	ldr	r3, [r0, #0]
 8003f14:	9304      	str	r3, [sp, #16]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc f9b2 	bl	8000280 <strlen>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f20:	f8d8 3000 	ldr.w	r3, [r8]
 8003f24:	9005      	str	r0, [sp, #20]
 8003f26:	3307      	adds	r3, #7
 8003f28:	f023 0307 	bic.w	r3, r3, #7
 8003f2c:	f103 0208 	add.w	r2, r3, #8
 8003f30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f34:	f8d4 b000 	ldr.w	fp, [r4]
 8003f38:	f8c8 2000 	str.w	r2, [r8]
 8003f3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f44:	9307      	str	r3, [sp, #28]
 8003f46:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f52:	4b9c      	ldr	r3, [pc, #624]	@ (80041c4 <_printf_float+0x2c8>)
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	f7fc fdf0 	bl	8000b3c <__aeabi_dcmpun>
 8003f5c:	bb70      	cbnz	r0, 8003fbc <_printf_float+0xc0>
 8003f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f62:	4b98      	ldr	r3, [pc, #608]	@ (80041c4 <_printf_float+0x2c8>)
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	f7fc fdca 	bl	8000b00 <__aeabi_dcmple>
 8003f6c:	bb30      	cbnz	r0, 8003fbc <_printf_float+0xc0>
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	4640      	mov	r0, r8
 8003f74:	4649      	mov	r1, r9
 8003f76:	f7fc fdb9 	bl	8000aec <__aeabi_dcmplt>
 8003f7a:	b110      	cbz	r0, 8003f82 <_printf_float+0x86>
 8003f7c:	232d      	movs	r3, #45	@ 0x2d
 8003f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f82:	4a91      	ldr	r2, [pc, #580]	@ (80041c8 <_printf_float+0x2cc>)
 8003f84:	4b91      	ldr	r3, [pc, #580]	@ (80041cc <_printf_float+0x2d0>)
 8003f86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f8a:	bf8c      	ite	hi
 8003f8c:	4690      	movhi	r8, r2
 8003f8e:	4698      	movls	r8, r3
 8003f90:	2303      	movs	r3, #3
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	f02b 0304 	bic.w	r3, fp, #4
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	f04f 0900 	mov.w	r9, #0
 8003f9e:	9700      	str	r7, [sp, #0]
 8003fa0:	4633      	mov	r3, r6
 8003fa2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 f9d2 	bl	8004350 <_printf_common>
 8003fac:	3001      	adds	r0, #1
 8003fae:	f040 808d 	bne.w	80040cc <_printf_float+0x1d0>
 8003fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb6:	b00d      	add	sp, #52	@ 0x34
 8003fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	f7fc fdba 	bl	8000b3c <__aeabi_dcmpun>
 8003fc8:	b140      	cbz	r0, 8003fdc <_printf_float+0xe0>
 8003fca:	464b      	mov	r3, r9
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bfbc      	itt	lt
 8003fd0:	232d      	movlt	r3, #45	@ 0x2d
 8003fd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80041d0 <_printf_float+0x2d4>)
 8003fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80041d4 <_printf_float+0x2d8>)
 8003fda:	e7d4      	b.n	8003f86 <_printf_float+0x8a>
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003fe2:	9206      	str	r2, [sp, #24]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	d13b      	bne.n	8004060 <_printf_float+0x164>
 8003fe8:	2306      	movs	r3, #6
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6022      	str	r2, [r4, #0]
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ff8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003ffc:	ab09      	add	r3, sp, #36	@ 0x24
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	6861      	ldr	r1, [r4, #4]
 8004002:	ec49 8b10 	vmov	d0, r8, r9
 8004006:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800400a:	4628      	mov	r0, r5
 800400c:	f7ff fed6 	bl	8003dbc <__cvt>
 8004010:	9b06      	ldr	r3, [sp, #24]
 8004012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004014:	2b47      	cmp	r3, #71	@ 0x47
 8004016:	4680      	mov	r8, r0
 8004018:	d129      	bne.n	800406e <_printf_float+0x172>
 800401a:	1cc8      	adds	r0, r1, #3
 800401c:	db02      	blt.n	8004024 <_printf_float+0x128>
 800401e:	6863      	ldr	r3, [r4, #4]
 8004020:	4299      	cmp	r1, r3
 8004022:	dd41      	ble.n	80040a8 <_printf_float+0x1ac>
 8004024:	f1aa 0a02 	sub.w	sl, sl, #2
 8004028:	fa5f fa8a 	uxtb.w	sl, sl
 800402c:	3901      	subs	r1, #1
 800402e:	4652      	mov	r2, sl
 8004030:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004034:	9109      	str	r1, [sp, #36]	@ 0x24
 8004036:	f7ff ff26 	bl	8003e86 <__exponent>
 800403a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800403c:	1813      	adds	r3, r2, r0
 800403e:	2a01      	cmp	r2, #1
 8004040:	4681      	mov	r9, r0
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	dc02      	bgt.n	800404c <_printf_float+0x150>
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	07d2      	lsls	r2, r2, #31
 800404a:	d501      	bpl.n	8004050 <_printf_float+0x154>
 800404c:	3301      	adds	r3, #1
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0a2      	beq.n	8003f9e <_printf_float+0xa2>
 8004058:	232d      	movs	r3, #45	@ 0x2d
 800405a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800405e:	e79e      	b.n	8003f9e <_printf_float+0xa2>
 8004060:	9a06      	ldr	r2, [sp, #24]
 8004062:	2a47      	cmp	r2, #71	@ 0x47
 8004064:	d1c2      	bne.n	8003fec <_printf_float+0xf0>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1c0      	bne.n	8003fec <_printf_float+0xf0>
 800406a:	2301      	movs	r3, #1
 800406c:	e7bd      	b.n	8003fea <_printf_float+0xee>
 800406e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004072:	d9db      	bls.n	800402c <_printf_float+0x130>
 8004074:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004078:	d118      	bne.n	80040ac <_printf_float+0x1b0>
 800407a:	2900      	cmp	r1, #0
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	dd0b      	ble.n	8004098 <_printf_float+0x19c>
 8004080:	6121      	str	r1, [r4, #16]
 8004082:	b913      	cbnz	r3, 800408a <_printf_float+0x18e>
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	07d0      	lsls	r0, r2, #31
 8004088:	d502      	bpl.n	8004090 <_printf_float+0x194>
 800408a:	3301      	adds	r3, #1
 800408c:	440b      	add	r3, r1
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004092:	f04f 0900 	mov.w	r9, #0
 8004096:	e7db      	b.n	8004050 <_printf_float+0x154>
 8004098:	b913      	cbnz	r3, 80040a0 <_printf_float+0x1a4>
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	07d2      	lsls	r2, r2, #31
 800409e:	d501      	bpl.n	80040a4 <_printf_float+0x1a8>
 80040a0:	3302      	adds	r3, #2
 80040a2:	e7f4      	b.n	800408e <_printf_float+0x192>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e7f2      	b.n	800408e <_printf_float+0x192>
 80040a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040ae:	4299      	cmp	r1, r3
 80040b0:	db05      	blt.n	80040be <_printf_float+0x1c2>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	6121      	str	r1, [r4, #16]
 80040b6:	07d8      	lsls	r0, r3, #31
 80040b8:	d5ea      	bpl.n	8004090 <_printf_float+0x194>
 80040ba:	1c4b      	adds	r3, r1, #1
 80040bc:	e7e7      	b.n	800408e <_printf_float+0x192>
 80040be:	2900      	cmp	r1, #0
 80040c0:	bfd4      	ite	le
 80040c2:	f1c1 0202 	rsble	r2, r1, #2
 80040c6:	2201      	movgt	r2, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	e7e0      	b.n	800408e <_printf_float+0x192>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	055a      	lsls	r2, r3, #21
 80040d0:	d407      	bmi.n	80040e2 <_printf_float+0x1e6>
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	4642      	mov	r2, r8
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	d12b      	bne.n	8004138 <_printf_float+0x23c>
 80040e0:	e767      	b.n	8003fb2 <_printf_float+0xb6>
 80040e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040e6:	f240 80dd 	bls.w	80042a4 <_printf_float+0x3a8>
 80040ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040ee:	2200      	movs	r2, #0
 80040f0:	2300      	movs	r3, #0
 80040f2:	f7fc fcf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d033      	beq.n	8004162 <_printf_float+0x266>
 80040fa:	4a37      	ldr	r2, [pc, #220]	@ (80041d8 <_printf_float+0x2dc>)
 80040fc:	2301      	movs	r3, #1
 80040fe:	4631      	mov	r1, r6
 8004100:	4628      	mov	r0, r5
 8004102:	47b8      	blx	r7
 8004104:	3001      	adds	r0, #1
 8004106:	f43f af54 	beq.w	8003fb2 <_printf_float+0xb6>
 800410a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800410e:	4543      	cmp	r3, r8
 8004110:	db02      	blt.n	8004118 <_printf_float+0x21c>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	07d8      	lsls	r0, r3, #31
 8004116:	d50f      	bpl.n	8004138 <_printf_float+0x23c>
 8004118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800411c:	4631      	mov	r1, r6
 800411e:	4628      	mov	r0, r5
 8004120:	47b8      	blx	r7
 8004122:	3001      	adds	r0, #1
 8004124:	f43f af45 	beq.w	8003fb2 <_printf_float+0xb6>
 8004128:	f04f 0900 	mov.w	r9, #0
 800412c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004130:	f104 0a1a 	add.w	sl, r4, #26
 8004134:	45c8      	cmp	r8, r9
 8004136:	dc09      	bgt.n	800414c <_printf_float+0x250>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	079b      	lsls	r3, r3, #30
 800413c:	f100 8103 	bmi.w	8004346 <_printf_float+0x44a>
 8004140:	68e0      	ldr	r0, [r4, #12]
 8004142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004144:	4298      	cmp	r0, r3
 8004146:	bfb8      	it	lt
 8004148:	4618      	movlt	r0, r3
 800414a:	e734      	b.n	8003fb6 <_printf_float+0xba>
 800414c:	2301      	movs	r3, #1
 800414e:	4652      	mov	r2, sl
 8004150:	4631      	mov	r1, r6
 8004152:	4628      	mov	r0, r5
 8004154:	47b8      	blx	r7
 8004156:	3001      	adds	r0, #1
 8004158:	f43f af2b 	beq.w	8003fb2 <_printf_float+0xb6>
 800415c:	f109 0901 	add.w	r9, r9, #1
 8004160:	e7e8      	b.n	8004134 <_printf_float+0x238>
 8004162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	dc39      	bgt.n	80041dc <_printf_float+0x2e0>
 8004168:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <_printf_float+0x2dc>)
 800416a:	2301      	movs	r3, #1
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f af1d 	beq.w	8003fb2 <_printf_float+0xb6>
 8004178:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800417c:	ea59 0303 	orrs.w	r3, r9, r3
 8004180:	d102      	bne.n	8004188 <_printf_float+0x28c>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	07d9      	lsls	r1, r3, #31
 8004186:	d5d7      	bpl.n	8004138 <_printf_float+0x23c>
 8004188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f af0d 	beq.w	8003fb2 <_printf_float+0xb6>
 8004198:	f04f 0a00 	mov.w	sl, #0
 800419c:	f104 0b1a 	add.w	fp, r4, #26
 80041a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041a2:	425b      	negs	r3, r3
 80041a4:	4553      	cmp	r3, sl
 80041a6:	dc01      	bgt.n	80041ac <_printf_float+0x2b0>
 80041a8:	464b      	mov	r3, r9
 80041aa:	e793      	b.n	80040d4 <_printf_float+0x1d8>
 80041ac:	2301      	movs	r3, #1
 80041ae:	465a      	mov	r2, fp
 80041b0:	4631      	mov	r1, r6
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	f43f aefb 	beq.w	8003fb2 <_printf_float+0xb6>
 80041bc:	f10a 0a01 	add.w	sl, sl, #1
 80041c0:	e7ee      	b.n	80041a0 <_printf_float+0x2a4>
 80041c2:	bf00      	nop
 80041c4:	7fefffff 	.word	0x7fefffff
 80041c8:	080085b2 	.word	0x080085b2
 80041cc:	080085ae 	.word	0x080085ae
 80041d0:	080085ba 	.word	0x080085ba
 80041d4:	080085b6 	.word	0x080085b6
 80041d8:	080085be 	.word	0x080085be
 80041dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041e2:	4553      	cmp	r3, sl
 80041e4:	bfa8      	it	ge
 80041e6:	4653      	movge	r3, sl
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	4699      	mov	r9, r3
 80041ec:	dc36      	bgt.n	800425c <_printf_float+0x360>
 80041ee:	f04f 0b00 	mov.w	fp, #0
 80041f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041f6:	f104 021a 	add.w	r2, r4, #26
 80041fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041fc:	9306      	str	r3, [sp, #24]
 80041fe:	eba3 0309 	sub.w	r3, r3, r9
 8004202:	455b      	cmp	r3, fp
 8004204:	dc31      	bgt.n	800426a <_printf_float+0x36e>
 8004206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004208:	459a      	cmp	sl, r3
 800420a:	dc3a      	bgt.n	8004282 <_printf_float+0x386>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	07da      	lsls	r2, r3, #31
 8004210:	d437      	bmi.n	8004282 <_printf_float+0x386>
 8004212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004214:	ebaa 0903 	sub.w	r9, sl, r3
 8004218:	9b06      	ldr	r3, [sp, #24]
 800421a:	ebaa 0303 	sub.w	r3, sl, r3
 800421e:	4599      	cmp	r9, r3
 8004220:	bfa8      	it	ge
 8004222:	4699      	movge	r9, r3
 8004224:	f1b9 0f00 	cmp.w	r9, #0
 8004228:	dc33      	bgt.n	8004292 <_printf_float+0x396>
 800422a:	f04f 0800 	mov.w	r8, #0
 800422e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004232:	f104 0b1a 	add.w	fp, r4, #26
 8004236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004238:	ebaa 0303 	sub.w	r3, sl, r3
 800423c:	eba3 0309 	sub.w	r3, r3, r9
 8004240:	4543      	cmp	r3, r8
 8004242:	f77f af79 	ble.w	8004138 <_printf_float+0x23c>
 8004246:	2301      	movs	r3, #1
 8004248:	465a      	mov	r2, fp
 800424a:	4631      	mov	r1, r6
 800424c:	4628      	mov	r0, r5
 800424e:	47b8      	blx	r7
 8004250:	3001      	adds	r0, #1
 8004252:	f43f aeae 	beq.w	8003fb2 <_printf_float+0xb6>
 8004256:	f108 0801 	add.w	r8, r8, #1
 800425a:	e7ec      	b.n	8004236 <_printf_float+0x33a>
 800425c:	4642      	mov	r2, r8
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	d1c2      	bne.n	80041ee <_printf_float+0x2f2>
 8004268:	e6a3      	b.n	8003fb2 <_printf_float+0xb6>
 800426a:	2301      	movs	r3, #1
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	9206      	str	r2, [sp, #24]
 8004272:	47b8      	blx	r7
 8004274:	3001      	adds	r0, #1
 8004276:	f43f ae9c 	beq.w	8003fb2 <_printf_float+0xb6>
 800427a:	9a06      	ldr	r2, [sp, #24]
 800427c:	f10b 0b01 	add.w	fp, fp, #1
 8004280:	e7bb      	b.n	80041fa <_printf_float+0x2fe>
 8004282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004286:	4631      	mov	r1, r6
 8004288:	4628      	mov	r0, r5
 800428a:	47b8      	blx	r7
 800428c:	3001      	adds	r0, #1
 800428e:	d1c0      	bne.n	8004212 <_printf_float+0x316>
 8004290:	e68f      	b.n	8003fb2 <_printf_float+0xb6>
 8004292:	9a06      	ldr	r2, [sp, #24]
 8004294:	464b      	mov	r3, r9
 8004296:	4442      	add	r2, r8
 8004298:	4631      	mov	r1, r6
 800429a:	4628      	mov	r0, r5
 800429c:	47b8      	blx	r7
 800429e:	3001      	adds	r0, #1
 80042a0:	d1c3      	bne.n	800422a <_printf_float+0x32e>
 80042a2:	e686      	b.n	8003fb2 <_printf_float+0xb6>
 80042a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042a8:	f1ba 0f01 	cmp.w	sl, #1
 80042ac:	dc01      	bgt.n	80042b2 <_printf_float+0x3b6>
 80042ae:	07db      	lsls	r3, r3, #31
 80042b0:	d536      	bpl.n	8004320 <_printf_float+0x424>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4642      	mov	r2, r8
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	f43f ae78 	beq.w	8003fb2 <_printf_float+0xb6>
 80042c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f ae70 	beq.w	8003fb2 <_printf_float+0xb6>
 80042d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042de:	f7fc fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80042e2:	b9c0      	cbnz	r0, 8004316 <_printf_float+0x41a>
 80042e4:	4653      	mov	r3, sl
 80042e6:	f108 0201 	add.w	r2, r8, #1
 80042ea:	4631      	mov	r1, r6
 80042ec:	4628      	mov	r0, r5
 80042ee:	47b8      	blx	r7
 80042f0:	3001      	adds	r0, #1
 80042f2:	d10c      	bne.n	800430e <_printf_float+0x412>
 80042f4:	e65d      	b.n	8003fb2 <_printf_float+0xb6>
 80042f6:	2301      	movs	r3, #1
 80042f8:	465a      	mov	r2, fp
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f ae56 	beq.w	8003fb2 <_printf_float+0xb6>
 8004306:	f108 0801 	add.w	r8, r8, #1
 800430a:	45d0      	cmp	r8, sl
 800430c:	dbf3      	blt.n	80042f6 <_printf_float+0x3fa>
 800430e:	464b      	mov	r3, r9
 8004310:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004314:	e6df      	b.n	80040d6 <_printf_float+0x1da>
 8004316:	f04f 0800 	mov.w	r8, #0
 800431a:	f104 0b1a 	add.w	fp, r4, #26
 800431e:	e7f4      	b.n	800430a <_printf_float+0x40e>
 8004320:	2301      	movs	r3, #1
 8004322:	4642      	mov	r2, r8
 8004324:	e7e1      	b.n	80042ea <_printf_float+0x3ee>
 8004326:	2301      	movs	r3, #1
 8004328:	464a      	mov	r2, r9
 800432a:	4631      	mov	r1, r6
 800432c:	4628      	mov	r0, r5
 800432e:	47b8      	blx	r7
 8004330:	3001      	adds	r0, #1
 8004332:	f43f ae3e 	beq.w	8003fb2 <_printf_float+0xb6>
 8004336:	f108 0801 	add.w	r8, r8, #1
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	4543      	cmp	r3, r8
 8004342:	dcf0      	bgt.n	8004326 <_printf_float+0x42a>
 8004344:	e6fc      	b.n	8004140 <_printf_float+0x244>
 8004346:	f04f 0800 	mov.w	r8, #0
 800434a:	f104 0919 	add.w	r9, r4, #25
 800434e:	e7f4      	b.n	800433a <_printf_float+0x43e>

08004350 <_printf_common>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	4616      	mov	r6, r2
 8004356:	4698      	mov	r8, r3
 8004358:	688a      	ldr	r2, [r1, #8]
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004360:	4293      	cmp	r3, r2
 8004362:	bfb8      	it	lt
 8004364:	4613      	movlt	r3, r2
 8004366:	6033      	str	r3, [r6, #0]
 8004368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800436c:	4607      	mov	r7, r0
 800436e:	460c      	mov	r4, r1
 8004370:	b10a      	cbz	r2, 8004376 <_printf_common+0x26>
 8004372:	3301      	adds	r3, #1
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	0699      	lsls	r1, r3, #26
 800437a:	bf42      	ittt	mi
 800437c:	6833      	ldrmi	r3, [r6, #0]
 800437e:	3302      	addmi	r3, #2
 8004380:	6033      	strmi	r3, [r6, #0]
 8004382:	6825      	ldr	r5, [r4, #0]
 8004384:	f015 0506 	ands.w	r5, r5, #6
 8004388:	d106      	bne.n	8004398 <_printf_common+0x48>
 800438a:	f104 0a19 	add.w	sl, r4, #25
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	6832      	ldr	r2, [r6, #0]
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	42ab      	cmp	r3, r5
 8004396:	dc26      	bgt.n	80043e6 <_printf_common+0x96>
 8004398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	3b00      	subs	r3, #0
 80043a0:	bf18      	it	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	0692      	lsls	r2, r2, #26
 80043a6:	d42b      	bmi.n	8004400 <_printf_common+0xb0>
 80043a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043ac:	4641      	mov	r1, r8
 80043ae:	4638      	mov	r0, r7
 80043b0:	47c8      	blx	r9
 80043b2:	3001      	adds	r0, #1
 80043b4:	d01e      	beq.n	80043f4 <_printf_common+0xa4>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	6922      	ldr	r2, [r4, #16]
 80043ba:	f003 0306 	and.w	r3, r3, #6
 80043be:	2b04      	cmp	r3, #4
 80043c0:	bf02      	ittt	eq
 80043c2:	68e5      	ldreq	r5, [r4, #12]
 80043c4:	6833      	ldreq	r3, [r6, #0]
 80043c6:	1aed      	subeq	r5, r5, r3
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	bf0c      	ite	eq
 80043cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d0:	2500      	movne	r5, #0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bfc4      	itt	gt
 80043d6:	1a9b      	subgt	r3, r3, r2
 80043d8:	18ed      	addgt	r5, r5, r3
 80043da:	2600      	movs	r6, #0
 80043dc:	341a      	adds	r4, #26
 80043de:	42b5      	cmp	r5, r6
 80043e0:	d11a      	bne.n	8004418 <_printf_common+0xc8>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e008      	b.n	80043f8 <_printf_common+0xa8>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4652      	mov	r2, sl
 80043ea:	4641      	mov	r1, r8
 80043ec:	4638      	mov	r0, r7
 80043ee:	47c8      	blx	r9
 80043f0:	3001      	adds	r0, #1
 80043f2:	d103      	bne.n	80043fc <_printf_common+0xac>
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7c6      	b.n	800438e <_printf_common+0x3e>
 8004400:	18e1      	adds	r1, r4, r3
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	2030      	movs	r0, #48	@ 0x30
 8004406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800440a:	4422      	add	r2, r4
 800440c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004414:	3302      	adds	r3, #2
 8004416:	e7c7      	b.n	80043a8 <_printf_common+0x58>
 8004418:	2301      	movs	r3, #1
 800441a:	4622      	mov	r2, r4
 800441c:	4641      	mov	r1, r8
 800441e:	4638      	mov	r0, r7
 8004420:	47c8      	blx	r9
 8004422:	3001      	adds	r0, #1
 8004424:	d0e6      	beq.n	80043f4 <_printf_common+0xa4>
 8004426:	3601      	adds	r6, #1
 8004428:	e7d9      	b.n	80043de <_printf_common+0x8e>
	...

0800442c <_printf_i>:
 800442c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	7e0f      	ldrb	r7, [r1, #24]
 8004432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004434:	2f78      	cmp	r7, #120	@ 0x78
 8004436:	4691      	mov	r9, r2
 8004438:	4680      	mov	r8, r0
 800443a:	460c      	mov	r4, r1
 800443c:	469a      	mov	sl, r3
 800443e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004442:	d807      	bhi.n	8004454 <_printf_i+0x28>
 8004444:	2f62      	cmp	r7, #98	@ 0x62
 8004446:	d80a      	bhi.n	800445e <_printf_i+0x32>
 8004448:	2f00      	cmp	r7, #0
 800444a:	f000 80d1 	beq.w	80045f0 <_printf_i+0x1c4>
 800444e:	2f58      	cmp	r7, #88	@ 0x58
 8004450:	f000 80b8 	beq.w	80045c4 <_printf_i+0x198>
 8004454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800445c:	e03a      	b.n	80044d4 <_printf_i+0xa8>
 800445e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004462:	2b15      	cmp	r3, #21
 8004464:	d8f6      	bhi.n	8004454 <_printf_i+0x28>
 8004466:	a101      	add	r1, pc, #4	@ (adr r1, 800446c <_printf_i+0x40>)
 8004468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800446c:	080044c5 	.word	0x080044c5
 8004470:	080044d9 	.word	0x080044d9
 8004474:	08004455 	.word	0x08004455
 8004478:	08004455 	.word	0x08004455
 800447c:	08004455 	.word	0x08004455
 8004480:	08004455 	.word	0x08004455
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004455 	.word	0x08004455
 800448c:	08004455 	.word	0x08004455
 8004490:	08004455 	.word	0x08004455
 8004494:	08004455 	.word	0x08004455
 8004498:	080045d7 	.word	0x080045d7
 800449c:	08004503 	.word	0x08004503
 80044a0:	08004591 	.word	0x08004591
 80044a4:	08004455 	.word	0x08004455
 80044a8:	08004455 	.word	0x08004455
 80044ac:	080045f9 	.word	0x080045f9
 80044b0:	08004455 	.word	0x08004455
 80044b4:	08004503 	.word	0x08004503
 80044b8:	08004455 	.word	0x08004455
 80044bc:	08004455 	.word	0x08004455
 80044c0:	08004599 	.word	0x08004599
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6032      	str	r2, [r6, #0]
 80044cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d4:	2301      	movs	r3, #1
 80044d6:	e09c      	b.n	8004612 <_printf_i+0x1e6>
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	1d19      	adds	r1, r3, #4
 80044de:	6031      	str	r1, [r6, #0]
 80044e0:	0606      	lsls	r6, r0, #24
 80044e2:	d501      	bpl.n	80044e8 <_printf_i+0xbc>
 80044e4:	681d      	ldr	r5, [r3, #0]
 80044e6:	e003      	b.n	80044f0 <_printf_i+0xc4>
 80044e8:	0645      	lsls	r5, r0, #25
 80044ea:	d5fb      	bpl.n	80044e4 <_printf_i+0xb8>
 80044ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	da03      	bge.n	80044fc <_printf_i+0xd0>
 80044f4:	232d      	movs	r3, #45	@ 0x2d
 80044f6:	426d      	negs	r5, r5
 80044f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044fc:	4858      	ldr	r0, [pc, #352]	@ (8004660 <_printf_i+0x234>)
 80044fe:	230a      	movs	r3, #10
 8004500:	e011      	b.n	8004526 <_printf_i+0xfa>
 8004502:	6821      	ldr	r1, [r4, #0]
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	0608      	lsls	r0, r1, #24
 8004508:	f853 5b04 	ldr.w	r5, [r3], #4
 800450c:	d402      	bmi.n	8004514 <_printf_i+0xe8>
 800450e:	0649      	lsls	r1, r1, #25
 8004510:	bf48      	it	mi
 8004512:	b2ad      	uxthmi	r5, r5
 8004514:	2f6f      	cmp	r7, #111	@ 0x6f
 8004516:	4852      	ldr	r0, [pc, #328]	@ (8004660 <_printf_i+0x234>)
 8004518:	6033      	str	r3, [r6, #0]
 800451a:	bf14      	ite	ne
 800451c:	230a      	movne	r3, #10
 800451e:	2308      	moveq	r3, #8
 8004520:	2100      	movs	r1, #0
 8004522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004526:	6866      	ldr	r6, [r4, #4]
 8004528:	60a6      	str	r6, [r4, #8]
 800452a:	2e00      	cmp	r6, #0
 800452c:	db05      	blt.n	800453a <_printf_i+0x10e>
 800452e:	6821      	ldr	r1, [r4, #0]
 8004530:	432e      	orrs	r6, r5
 8004532:	f021 0104 	bic.w	r1, r1, #4
 8004536:	6021      	str	r1, [r4, #0]
 8004538:	d04b      	beq.n	80045d2 <_printf_i+0x1a6>
 800453a:	4616      	mov	r6, r2
 800453c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004540:	fb03 5711 	mls	r7, r3, r1, r5
 8004544:	5dc7      	ldrb	r7, [r0, r7]
 8004546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800454a:	462f      	mov	r7, r5
 800454c:	42bb      	cmp	r3, r7
 800454e:	460d      	mov	r5, r1
 8004550:	d9f4      	bls.n	800453c <_printf_i+0x110>
 8004552:	2b08      	cmp	r3, #8
 8004554:	d10b      	bne.n	800456e <_printf_i+0x142>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	07df      	lsls	r7, r3, #31
 800455a:	d508      	bpl.n	800456e <_printf_i+0x142>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	6861      	ldr	r1, [r4, #4]
 8004560:	4299      	cmp	r1, r3
 8004562:	bfde      	ittt	le
 8004564:	2330      	movle	r3, #48	@ 0x30
 8004566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800456a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800456e:	1b92      	subs	r2, r2, r6
 8004570:	6122      	str	r2, [r4, #16]
 8004572:	f8cd a000 	str.w	sl, [sp]
 8004576:	464b      	mov	r3, r9
 8004578:	aa03      	add	r2, sp, #12
 800457a:	4621      	mov	r1, r4
 800457c:	4640      	mov	r0, r8
 800457e:	f7ff fee7 	bl	8004350 <_printf_common>
 8004582:	3001      	adds	r0, #1
 8004584:	d14a      	bne.n	800461c <_printf_i+0x1f0>
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	b004      	add	sp, #16
 800458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f043 0320 	orr.w	r3, r3, #32
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	4832      	ldr	r0, [pc, #200]	@ (8004664 <_printf_i+0x238>)
 800459a:	2778      	movs	r7, #120	@ 0x78
 800459c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	061f      	lsls	r7, r3, #24
 80045a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80045aa:	d402      	bmi.n	80045b2 <_printf_i+0x186>
 80045ac:	065f      	lsls	r7, r3, #25
 80045ae:	bf48      	it	mi
 80045b0:	b2ad      	uxthmi	r5, r5
 80045b2:	6031      	str	r1, [r6, #0]
 80045b4:	07d9      	lsls	r1, r3, #31
 80045b6:	bf44      	itt	mi
 80045b8:	f043 0320 	orrmi.w	r3, r3, #32
 80045bc:	6023      	strmi	r3, [r4, #0]
 80045be:	b11d      	cbz	r5, 80045c8 <_printf_i+0x19c>
 80045c0:	2310      	movs	r3, #16
 80045c2:	e7ad      	b.n	8004520 <_printf_i+0xf4>
 80045c4:	4826      	ldr	r0, [pc, #152]	@ (8004660 <_printf_i+0x234>)
 80045c6:	e7e9      	b.n	800459c <_printf_i+0x170>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	f023 0320 	bic.w	r3, r3, #32
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	e7f6      	b.n	80045c0 <_printf_i+0x194>
 80045d2:	4616      	mov	r6, r2
 80045d4:	e7bd      	b.n	8004552 <_printf_i+0x126>
 80045d6:	6833      	ldr	r3, [r6, #0]
 80045d8:	6825      	ldr	r5, [r4, #0]
 80045da:	6961      	ldr	r1, [r4, #20]
 80045dc:	1d18      	adds	r0, r3, #4
 80045de:	6030      	str	r0, [r6, #0]
 80045e0:	062e      	lsls	r6, r5, #24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	d501      	bpl.n	80045ea <_printf_i+0x1be>
 80045e6:	6019      	str	r1, [r3, #0]
 80045e8:	e002      	b.n	80045f0 <_printf_i+0x1c4>
 80045ea:	0668      	lsls	r0, r5, #25
 80045ec:	d5fb      	bpl.n	80045e6 <_printf_i+0x1ba>
 80045ee:	8019      	strh	r1, [r3, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	4616      	mov	r6, r2
 80045f6:	e7bc      	b.n	8004572 <_printf_i+0x146>
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	1d1a      	adds	r2, r3, #4
 80045fc:	6032      	str	r2, [r6, #0]
 80045fe:	681e      	ldr	r6, [r3, #0]
 8004600:	6862      	ldr	r2, [r4, #4]
 8004602:	2100      	movs	r1, #0
 8004604:	4630      	mov	r0, r6
 8004606:	f7fb fdeb 	bl	80001e0 <memchr>
 800460a:	b108      	cbz	r0, 8004610 <_printf_i+0x1e4>
 800460c:	1b80      	subs	r0, r0, r6
 800460e:	6060      	str	r0, [r4, #4]
 8004610:	6863      	ldr	r3, [r4, #4]
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	2300      	movs	r3, #0
 8004616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800461a:	e7aa      	b.n	8004572 <_printf_i+0x146>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	4632      	mov	r2, r6
 8004620:	4649      	mov	r1, r9
 8004622:	4640      	mov	r0, r8
 8004624:	47d0      	blx	sl
 8004626:	3001      	adds	r0, #1
 8004628:	d0ad      	beq.n	8004586 <_printf_i+0x15a>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	079b      	lsls	r3, r3, #30
 800462e:	d413      	bmi.n	8004658 <_printf_i+0x22c>
 8004630:	68e0      	ldr	r0, [r4, #12]
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	4298      	cmp	r0, r3
 8004636:	bfb8      	it	lt
 8004638:	4618      	movlt	r0, r3
 800463a:	e7a6      	b.n	800458a <_printf_i+0x15e>
 800463c:	2301      	movs	r3, #1
 800463e:	4632      	mov	r2, r6
 8004640:	4649      	mov	r1, r9
 8004642:	4640      	mov	r0, r8
 8004644:	47d0      	blx	sl
 8004646:	3001      	adds	r0, #1
 8004648:	d09d      	beq.n	8004586 <_printf_i+0x15a>
 800464a:	3501      	adds	r5, #1
 800464c:	68e3      	ldr	r3, [r4, #12]
 800464e:	9903      	ldr	r1, [sp, #12]
 8004650:	1a5b      	subs	r3, r3, r1
 8004652:	42ab      	cmp	r3, r5
 8004654:	dcf2      	bgt.n	800463c <_printf_i+0x210>
 8004656:	e7eb      	b.n	8004630 <_printf_i+0x204>
 8004658:	2500      	movs	r5, #0
 800465a:	f104 0619 	add.w	r6, r4, #25
 800465e:	e7f5      	b.n	800464c <_printf_i+0x220>
 8004660:	080085c0 	.word	0x080085c0
 8004664:	080085d1 	.word	0x080085d1

08004668 <_scanf_float>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	b087      	sub	sp, #28
 800466e:	4691      	mov	r9, r2
 8004670:	9303      	str	r3, [sp, #12]
 8004672:	688b      	ldr	r3, [r1, #8]
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800467a:	bf81      	itttt	hi
 800467c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004680:	eb03 0b05 	addhi.w	fp, r3, r5
 8004684:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004688:	608b      	strhi	r3, [r1, #8]
 800468a:	680b      	ldr	r3, [r1, #0]
 800468c:	460a      	mov	r2, r1
 800468e:	f04f 0500 	mov.w	r5, #0
 8004692:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004696:	f842 3b1c 	str.w	r3, [r2], #28
 800469a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800469e:	4680      	mov	r8, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	bf98      	it	ls
 80046a4:	f04f 0b00 	movls.w	fp, #0
 80046a8:	9201      	str	r2, [sp, #4]
 80046aa:	4616      	mov	r6, r2
 80046ac:	46aa      	mov	sl, r5
 80046ae:	462f      	mov	r7, r5
 80046b0:	9502      	str	r5, [sp, #8]
 80046b2:	68a2      	ldr	r2, [r4, #8]
 80046b4:	b15a      	cbz	r2, 80046ce <_scanf_float+0x66>
 80046b6:	f8d9 3000 	ldr.w	r3, [r9]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80046be:	d863      	bhi.n	8004788 <_scanf_float+0x120>
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d83b      	bhi.n	800473c <_scanf_float+0xd4>
 80046c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80046c8:	b2c8      	uxtb	r0, r1
 80046ca:	280e      	cmp	r0, #14
 80046cc:	d939      	bls.n	8004742 <_scanf_float+0xda>
 80046ce:	b11f      	cbz	r7, 80046d8 <_scanf_float+0x70>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046dc:	f1ba 0f01 	cmp.w	sl, #1
 80046e0:	f200 8114 	bhi.w	800490c <_scanf_float+0x2a4>
 80046e4:	9b01      	ldr	r3, [sp, #4]
 80046e6:	429e      	cmp	r6, r3
 80046e8:	f200 8105 	bhi.w	80048f6 <_scanf_float+0x28e>
 80046ec:	2001      	movs	r0, #1
 80046ee:	b007      	add	sp, #28
 80046f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80046f8:	2a0d      	cmp	r2, #13
 80046fa:	d8e8      	bhi.n	80046ce <_scanf_float+0x66>
 80046fc:	a101      	add	r1, pc, #4	@ (adr r1, 8004704 <_scanf_float+0x9c>)
 80046fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004702:	bf00      	nop
 8004704:	0800484d 	.word	0x0800484d
 8004708:	080046cf 	.word	0x080046cf
 800470c:	080046cf 	.word	0x080046cf
 8004710:	080046cf 	.word	0x080046cf
 8004714:	080048a9 	.word	0x080048a9
 8004718:	08004883 	.word	0x08004883
 800471c:	080046cf 	.word	0x080046cf
 8004720:	080046cf 	.word	0x080046cf
 8004724:	0800485b 	.word	0x0800485b
 8004728:	080046cf 	.word	0x080046cf
 800472c:	080046cf 	.word	0x080046cf
 8004730:	080046cf 	.word	0x080046cf
 8004734:	080046cf 	.word	0x080046cf
 8004738:	08004817 	.word	0x08004817
 800473c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004740:	e7da      	b.n	80046f8 <_scanf_float+0x90>
 8004742:	290e      	cmp	r1, #14
 8004744:	d8c3      	bhi.n	80046ce <_scanf_float+0x66>
 8004746:	a001      	add	r0, pc, #4	@ (adr r0, 800474c <_scanf_float+0xe4>)
 8004748:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800474c:	08004807 	.word	0x08004807
 8004750:	080046cf 	.word	0x080046cf
 8004754:	08004807 	.word	0x08004807
 8004758:	08004897 	.word	0x08004897
 800475c:	080046cf 	.word	0x080046cf
 8004760:	080047a9 	.word	0x080047a9
 8004764:	080047ed 	.word	0x080047ed
 8004768:	080047ed 	.word	0x080047ed
 800476c:	080047ed 	.word	0x080047ed
 8004770:	080047ed 	.word	0x080047ed
 8004774:	080047ed 	.word	0x080047ed
 8004778:	080047ed 	.word	0x080047ed
 800477c:	080047ed 	.word	0x080047ed
 8004780:	080047ed 	.word	0x080047ed
 8004784:	080047ed 	.word	0x080047ed
 8004788:	2b6e      	cmp	r3, #110	@ 0x6e
 800478a:	d809      	bhi.n	80047a0 <_scanf_float+0x138>
 800478c:	2b60      	cmp	r3, #96	@ 0x60
 800478e:	d8b1      	bhi.n	80046f4 <_scanf_float+0x8c>
 8004790:	2b54      	cmp	r3, #84	@ 0x54
 8004792:	d07b      	beq.n	800488c <_scanf_float+0x224>
 8004794:	2b59      	cmp	r3, #89	@ 0x59
 8004796:	d19a      	bne.n	80046ce <_scanf_float+0x66>
 8004798:	2d07      	cmp	r5, #7
 800479a:	d198      	bne.n	80046ce <_scanf_float+0x66>
 800479c:	2508      	movs	r5, #8
 800479e:	e02f      	b.n	8004800 <_scanf_float+0x198>
 80047a0:	2b74      	cmp	r3, #116	@ 0x74
 80047a2:	d073      	beq.n	800488c <_scanf_float+0x224>
 80047a4:	2b79      	cmp	r3, #121	@ 0x79
 80047a6:	e7f6      	b.n	8004796 <_scanf_float+0x12e>
 80047a8:	6821      	ldr	r1, [r4, #0]
 80047aa:	05c8      	lsls	r0, r1, #23
 80047ac:	d51e      	bpl.n	80047ec <_scanf_float+0x184>
 80047ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80047b2:	6021      	str	r1, [r4, #0]
 80047b4:	3701      	adds	r7, #1
 80047b6:	f1bb 0f00 	cmp.w	fp, #0
 80047ba:	d003      	beq.n	80047c4 <_scanf_float+0x15c>
 80047bc:	3201      	adds	r2, #1
 80047be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047c2:	60a2      	str	r2, [r4, #8]
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	60a3      	str	r3, [r4, #8]
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	3301      	adds	r3, #1
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80047dc:	f340 8082 	ble.w	80048e4 <_scanf_float+0x27c>
 80047e0:	f8d9 3000 	ldr.w	r3, [r9]
 80047e4:	3301      	adds	r3, #1
 80047e6:	f8c9 3000 	str.w	r3, [r9]
 80047ea:	e762      	b.n	80046b2 <_scanf_float+0x4a>
 80047ec:	eb1a 0105 	adds.w	r1, sl, r5
 80047f0:	f47f af6d 	bne.w	80046ce <_scanf_float+0x66>
 80047f4:	6822      	ldr	r2, [r4, #0]
 80047f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	460d      	mov	r5, r1
 80047fe:	468a      	mov	sl, r1
 8004800:	f806 3b01 	strb.w	r3, [r6], #1
 8004804:	e7de      	b.n	80047c4 <_scanf_float+0x15c>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	0610      	lsls	r0, r2, #24
 800480a:	f57f af60 	bpl.w	80046ce <_scanf_float+0x66>
 800480e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	e7f4      	b.n	8004800 <_scanf_float+0x198>
 8004816:	f1ba 0f00 	cmp.w	sl, #0
 800481a:	d10c      	bne.n	8004836 <_scanf_float+0x1ce>
 800481c:	b977      	cbnz	r7, 800483c <_scanf_float+0x1d4>
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004824:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004828:	d108      	bne.n	800483c <_scanf_float+0x1d4>
 800482a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	f04f 0a01 	mov.w	sl, #1
 8004834:	e7e4      	b.n	8004800 <_scanf_float+0x198>
 8004836:	f1ba 0f02 	cmp.w	sl, #2
 800483a:	d050      	beq.n	80048de <_scanf_float+0x276>
 800483c:	2d01      	cmp	r5, #1
 800483e:	d002      	beq.n	8004846 <_scanf_float+0x1de>
 8004840:	2d04      	cmp	r5, #4
 8004842:	f47f af44 	bne.w	80046ce <_scanf_float+0x66>
 8004846:	3501      	adds	r5, #1
 8004848:	b2ed      	uxtb	r5, r5
 800484a:	e7d9      	b.n	8004800 <_scanf_float+0x198>
 800484c:	f1ba 0f01 	cmp.w	sl, #1
 8004850:	f47f af3d 	bne.w	80046ce <_scanf_float+0x66>
 8004854:	f04f 0a02 	mov.w	sl, #2
 8004858:	e7d2      	b.n	8004800 <_scanf_float+0x198>
 800485a:	b975      	cbnz	r5, 800487a <_scanf_float+0x212>
 800485c:	2f00      	cmp	r7, #0
 800485e:	f47f af37 	bne.w	80046d0 <_scanf_float+0x68>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004868:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800486c:	f040 8103 	bne.w	8004a76 <_scanf_float+0x40e>
 8004870:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004874:	6022      	str	r2, [r4, #0]
 8004876:	2501      	movs	r5, #1
 8004878:	e7c2      	b.n	8004800 <_scanf_float+0x198>
 800487a:	2d03      	cmp	r5, #3
 800487c:	d0e3      	beq.n	8004846 <_scanf_float+0x1de>
 800487e:	2d05      	cmp	r5, #5
 8004880:	e7df      	b.n	8004842 <_scanf_float+0x1da>
 8004882:	2d02      	cmp	r5, #2
 8004884:	f47f af23 	bne.w	80046ce <_scanf_float+0x66>
 8004888:	2503      	movs	r5, #3
 800488a:	e7b9      	b.n	8004800 <_scanf_float+0x198>
 800488c:	2d06      	cmp	r5, #6
 800488e:	f47f af1e 	bne.w	80046ce <_scanf_float+0x66>
 8004892:	2507      	movs	r5, #7
 8004894:	e7b4      	b.n	8004800 <_scanf_float+0x198>
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	0591      	lsls	r1, r2, #22
 800489a:	f57f af18 	bpl.w	80046ce <_scanf_float+0x66>
 800489e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048a2:	6022      	str	r2, [r4, #0]
 80048a4:	9702      	str	r7, [sp, #8]
 80048a6:	e7ab      	b.n	8004800 <_scanf_float+0x198>
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80048ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80048b2:	d005      	beq.n	80048c0 <_scanf_float+0x258>
 80048b4:	0550      	lsls	r0, r2, #21
 80048b6:	f57f af0a 	bpl.w	80046ce <_scanf_float+0x66>
 80048ba:	2f00      	cmp	r7, #0
 80048bc:	f000 80db 	beq.w	8004a76 <_scanf_float+0x40e>
 80048c0:	0591      	lsls	r1, r2, #22
 80048c2:	bf58      	it	pl
 80048c4:	9902      	ldrpl	r1, [sp, #8]
 80048c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048ca:	bf58      	it	pl
 80048cc:	1a79      	subpl	r1, r7, r1
 80048ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80048d2:	bf58      	it	pl
 80048d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048d8:	6022      	str	r2, [r4, #0]
 80048da:	2700      	movs	r7, #0
 80048dc:	e790      	b.n	8004800 <_scanf_float+0x198>
 80048de:	f04f 0a03 	mov.w	sl, #3
 80048e2:	e78d      	b.n	8004800 <_scanf_float+0x198>
 80048e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80048e8:	4649      	mov	r1, r9
 80048ea:	4640      	mov	r0, r8
 80048ec:	4798      	blx	r3
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f43f aedf 	beq.w	80046b2 <_scanf_float+0x4a>
 80048f4:	e6eb      	b.n	80046ce <_scanf_float+0x66>
 80048f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048fe:	464a      	mov	r2, r9
 8004900:	4640      	mov	r0, r8
 8004902:	4798      	blx	r3
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	3b01      	subs	r3, #1
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	e6eb      	b.n	80046e4 <_scanf_float+0x7c>
 800490c:	1e6b      	subs	r3, r5, #1
 800490e:	2b06      	cmp	r3, #6
 8004910:	d824      	bhi.n	800495c <_scanf_float+0x2f4>
 8004912:	2d02      	cmp	r5, #2
 8004914:	d836      	bhi.n	8004984 <_scanf_float+0x31c>
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	429e      	cmp	r6, r3
 800491a:	f67f aee7 	bls.w	80046ec <_scanf_float+0x84>
 800491e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004926:	464a      	mov	r2, r9
 8004928:	4640      	mov	r0, r8
 800492a:	4798      	blx	r3
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	3b01      	subs	r3, #1
 8004930:	6123      	str	r3, [r4, #16]
 8004932:	e7f0      	b.n	8004916 <_scanf_float+0x2ae>
 8004934:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004938:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800493c:	464a      	mov	r2, r9
 800493e:	4640      	mov	r0, r8
 8004940:	4798      	blx	r3
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	3b01      	subs	r3, #1
 8004946:	6123      	str	r3, [r4, #16]
 8004948:	f10a 3aff 	add.w	sl, sl, #4294967295
 800494c:	fa5f fa8a 	uxtb.w	sl, sl
 8004950:	f1ba 0f02 	cmp.w	sl, #2
 8004954:	d1ee      	bne.n	8004934 <_scanf_float+0x2cc>
 8004956:	3d03      	subs	r5, #3
 8004958:	b2ed      	uxtb	r5, r5
 800495a:	1b76      	subs	r6, r6, r5
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	05da      	lsls	r2, r3, #23
 8004960:	d530      	bpl.n	80049c4 <_scanf_float+0x35c>
 8004962:	055b      	lsls	r3, r3, #21
 8004964:	d511      	bpl.n	800498a <_scanf_float+0x322>
 8004966:	9b01      	ldr	r3, [sp, #4]
 8004968:	429e      	cmp	r6, r3
 800496a:	f67f aebf 	bls.w	80046ec <_scanf_float+0x84>
 800496e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004976:	464a      	mov	r2, r9
 8004978:	4640      	mov	r0, r8
 800497a:	4798      	blx	r3
 800497c:	6923      	ldr	r3, [r4, #16]
 800497e:	3b01      	subs	r3, #1
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	e7f0      	b.n	8004966 <_scanf_float+0x2fe>
 8004984:	46aa      	mov	sl, r5
 8004986:	46b3      	mov	fp, r6
 8004988:	e7de      	b.n	8004948 <_scanf_float+0x2e0>
 800498a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	2965      	cmp	r1, #101	@ 0x65
 8004992:	f103 33ff 	add.w	r3, r3, #4294967295
 8004996:	f106 35ff 	add.w	r5, r6, #4294967295
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	d00c      	beq.n	80049b8 <_scanf_float+0x350>
 800499e:	2945      	cmp	r1, #69	@ 0x45
 80049a0:	d00a      	beq.n	80049b8 <_scanf_float+0x350>
 80049a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049a6:	464a      	mov	r2, r9
 80049a8:	4640      	mov	r0, r8
 80049aa:	4798      	blx	r3
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	1eb5      	subs	r5, r6, #2
 80049b6:	6123      	str	r3, [r4, #16]
 80049b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049bc:	464a      	mov	r2, r9
 80049be:	4640      	mov	r0, r8
 80049c0:	4798      	blx	r3
 80049c2:	462e      	mov	r6, r5
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	f012 0210 	ands.w	r2, r2, #16
 80049ca:	d001      	beq.n	80049d0 <_scanf_float+0x368>
 80049cc:	2000      	movs	r0, #0
 80049ce:	e68e      	b.n	80046ee <_scanf_float+0x86>
 80049d0:	7032      	strb	r2, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049dc:	d125      	bne.n	8004a2a <_scanf_float+0x3c2>
 80049de:	9b02      	ldr	r3, [sp, #8]
 80049e0:	429f      	cmp	r7, r3
 80049e2:	d00a      	beq.n	80049fa <_scanf_float+0x392>
 80049e4:	1bda      	subs	r2, r3, r7
 80049e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80049ea:	429e      	cmp	r6, r3
 80049ec:	bf28      	it	cs
 80049ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80049f2:	4922      	ldr	r1, [pc, #136]	@ (8004a7c <_scanf_float+0x414>)
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 f907 	bl	8004c08 <siprintf>
 80049fa:	9901      	ldr	r1, [sp, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	4640      	mov	r0, r8
 8004a00:	f002 fc5e 	bl	80072c0 <_strtod_r>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f011 0f02 	tst.w	r1, #2
 8004a0e:	ec57 6b10 	vmov	r6, r7, d0
 8004a12:	f103 0204 	add.w	r2, r3, #4
 8004a16:	d015      	beq.n	8004a44 <_scanf_float+0x3dc>
 8004a18:	9903      	ldr	r1, [sp, #12]
 8004a1a:	600a      	str	r2, [r1, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e9c3 6700 	strd	r6, r7, [r3]
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60e3      	str	r3, [r4, #12]
 8004a28:	e7d0      	b.n	80049cc <_scanf_float+0x364>
 8004a2a:	9b04      	ldr	r3, [sp, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0e4      	beq.n	80049fa <_scanf_float+0x392>
 8004a30:	9905      	ldr	r1, [sp, #20]
 8004a32:	230a      	movs	r3, #10
 8004a34:	3101      	adds	r1, #1
 8004a36:	4640      	mov	r0, r8
 8004a38:	f002 fcc2 	bl	80073c0 <_strtol_r>
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	9e05      	ldr	r6, [sp, #20]
 8004a40:	1ac2      	subs	r2, r0, r3
 8004a42:	e7d0      	b.n	80049e6 <_scanf_float+0x37e>
 8004a44:	f011 0f04 	tst.w	r1, #4
 8004a48:	9903      	ldr	r1, [sp, #12]
 8004a4a:	600a      	str	r2, [r1, #0]
 8004a4c:	d1e6      	bne.n	8004a1c <_scanf_float+0x3b4>
 8004a4e:	681d      	ldr	r5, [r3, #0]
 8004a50:	4632      	mov	r2, r6
 8004a52:	463b      	mov	r3, r7
 8004a54:	4630      	mov	r0, r6
 8004a56:	4639      	mov	r1, r7
 8004a58:	f7fc f870 	bl	8000b3c <__aeabi_dcmpun>
 8004a5c:	b128      	cbz	r0, 8004a6a <_scanf_float+0x402>
 8004a5e:	4808      	ldr	r0, [pc, #32]	@ (8004a80 <_scanf_float+0x418>)
 8004a60:	f000 fa24 	bl	8004eac <nanf>
 8004a64:	ed85 0a00 	vstr	s0, [r5]
 8004a68:	e7db      	b.n	8004a22 <_scanf_float+0x3ba>
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	f7fc f8c3 	bl	8000bf8 <__aeabi_d2f>
 8004a72:	6028      	str	r0, [r5, #0]
 8004a74:	e7d5      	b.n	8004a22 <_scanf_float+0x3ba>
 8004a76:	2700      	movs	r7, #0
 8004a78:	e62e      	b.n	80046d8 <_scanf_float+0x70>
 8004a7a:	bf00      	nop
 8004a7c:	080085e2 	.word	0x080085e2
 8004a80:	08008573 	.word	0x08008573

08004a84 <std>:
 8004a84:	2300      	movs	r3, #0
 8004a86:	b510      	push	{r4, lr}
 8004a88:	4604      	mov	r4, r0
 8004a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a92:	6083      	str	r3, [r0, #8]
 8004a94:	8181      	strh	r1, [r0, #12]
 8004a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a98:	81c2      	strh	r2, [r0, #14]
 8004a9a:	6183      	str	r3, [r0, #24]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	305c      	adds	r0, #92	@ 0x5c
 8004aa2:	f000 f916 	bl	8004cd2 <memset>
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <std+0x58>)
 8004aa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <std+0x5c>)
 8004aac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <std+0x60>)
 8004ab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <std+0x64>)
 8004ab4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <std+0x68>)
 8004ab8:	6224      	str	r4, [r4, #32]
 8004aba:	429c      	cmp	r4, r3
 8004abc:	d006      	beq.n	8004acc <std+0x48>
 8004abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ac2:	4294      	cmp	r4, r2
 8004ac4:	d002      	beq.n	8004acc <std+0x48>
 8004ac6:	33d0      	adds	r3, #208	@ 0xd0
 8004ac8:	429c      	cmp	r4, r3
 8004aca:	d105      	bne.n	8004ad8 <std+0x54>
 8004acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f000 b9d8 	b.w	8004e88 <__retarget_lock_init_recursive>
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	bf00      	nop
 8004adc:	08004c4d 	.word	0x08004c4d
 8004ae0:	08004c6f 	.word	0x08004c6f
 8004ae4:	08004ca7 	.word	0x08004ca7
 8004ae8:	08004ccb 	.word	0x08004ccb
 8004aec:	20004c9c 	.word	0x20004c9c

08004af0 <stdio_exit_handler>:
 8004af0:	4a02      	ldr	r2, [pc, #8]	@ (8004afc <stdio_exit_handler+0xc>)
 8004af2:	4903      	ldr	r1, [pc, #12]	@ (8004b00 <stdio_exit_handler+0x10>)
 8004af4:	4803      	ldr	r0, [pc, #12]	@ (8004b04 <stdio_exit_handler+0x14>)
 8004af6:	f000 b869 	b.w	8004bcc <_fwalk_sglue>
 8004afa:	bf00      	nop
 8004afc:	20000010 	.word	0x20000010
 8004b00:	0800777d 	.word	0x0800777d
 8004b04:	20000020 	.word	0x20000020

08004b08 <cleanup_stdio>:
 8004b08:	6841      	ldr	r1, [r0, #4]
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <cleanup_stdio+0x34>)
 8004b0c:	4299      	cmp	r1, r3
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	d001      	beq.n	8004b18 <cleanup_stdio+0x10>
 8004b14:	f002 fe32 	bl	800777c <_fflush_r>
 8004b18:	68a1      	ldr	r1, [r4, #8]
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <cleanup_stdio+0x38>)
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	d002      	beq.n	8004b26 <cleanup_stdio+0x1e>
 8004b20:	4620      	mov	r0, r4
 8004b22:	f002 fe2b 	bl	800777c <_fflush_r>
 8004b26:	68e1      	ldr	r1, [r4, #12]
 8004b28:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <cleanup_stdio+0x3c>)
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	d004      	beq.n	8004b38 <cleanup_stdio+0x30>
 8004b2e:	4620      	mov	r0, r4
 8004b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b34:	f002 be22 	b.w	800777c <_fflush_r>
 8004b38:	bd10      	pop	{r4, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20004c9c 	.word	0x20004c9c
 8004b40:	20004d04 	.word	0x20004d04
 8004b44:	20004d6c 	.word	0x20004d6c

08004b48 <global_stdio_init.part.0>:
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <global_stdio_init.part.0+0x30>)
 8004b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8004b7c <global_stdio_init.part.0+0x34>)
 8004b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b80 <global_stdio_init.part.0+0x38>)
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4620      	mov	r0, r4
 8004b54:	2200      	movs	r2, #0
 8004b56:	2104      	movs	r1, #4
 8004b58:	f7ff ff94 	bl	8004a84 <std>
 8004b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b60:	2201      	movs	r2, #1
 8004b62:	2109      	movs	r1, #9
 8004b64:	f7ff ff8e 	bl	8004a84 <std>
 8004b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b72:	2112      	movs	r1, #18
 8004b74:	f7ff bf86 	b.w	8004a84 <std>
 8004b78:	20004dd4 	.word	0x20004dd4
 8004b7c:	20004c9c 	.word	0x20004c9c
 8004b80:	08004af1 	.word	0x08004af1

08004b84 <__sfp_lock_acquire>:
 8004b84:	4801      	ldr	r0, [pc, #4]	@ (8004b8c <__sfp_lock_acquire+0x8>)
 8004b86:	f000 b980 	b.w	8004e8a <__retarget_lock_acquire_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20004ddd 	.word	0x20004ddd

08004b90 <__sfp_lock_release>:
 8004b90:	4801      	ldr	r0, [pc, #4]	@ (8004b98 <__sfp_lock_release+0x8>)
 8004b92:	f000 b97b 	b.w	8004e8c <__retarget_lock_release_recursive>
 8004b96:	bf00      	nop
 8004b98:	20004ddd 	.word	0x20004ddd

08004b9c <__sinit>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	f7ff fff0 	bl	8004b84 <__sfp_lock_acquire>
 8004ba4:	6a23      	ldr	r3, [r4, #32]
 8004ba6:	b11b      	cbz	r3, 8004bb0 <__sinit+0x14>
 8004ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bac:	f7ff bff0 	b.w	8004b90 <__sfp_lock_release>
 8004bb0:	4b04      	ldr	r3, [pc, #16]	@ (8004bc4 <__sinit+0x28>)
 8004bb2:	6223      	str	r3, [r4, #32]
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__sinit+0x2c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f5      	bne.n	8004ba8 <__sinit+0xc>
 8004bbc:	f7ff ffc4 	bl	8004b48 <global_stdio_init.part.0>
 8004bc0:	e7f2      	b.n	8004ba8 <__sinit+0xc>
 8004bc2:	bf00      	nop
 8004bc4:	08004b09 	.word	0x08004b09
 8004bc8:	20004dd4 	.word	0x20004dd4

08004bcc <_fwalk_sglue>:
 8004bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd0:	4607      	mov	r7, r0
 8004bd2:	4688      	mov	r8, r1
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8004be0:	d505      	bpl.n	8004bee <_fwalk_sglue+0x22>
 8004be2:	6824      	ldr	r4, [r4, #0]
 8004be4:	2c00      	cmp	r4, #0
 8004be6:	d1f7      	bne.n	8004bd8 <_fwalk_sglue+0xc>
 8004be8:	4630      	mov	r0, r6
 8004bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d907      	bls.n	8004c04 <_fwalk_sglue+0x38>
 8004bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	d003      	beq.n	8004c04 <_fwalk_sglue+0x38>
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	4638      	mov	r0, r7
 8004c00:	47c0      	blx	r8
 8004c02:	4306      	orrs	r6, r0
 8004c04:	3568      	adds	r5, #104	@ 0x68
 8004c06:	e7e9      	b.n	8004bdc <_fwalk_sglue+0x10>

08004c08 <siprintf>:
 8004c08:	b40e      	push	{r1, r2, r3}
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	b09d      	sub	sp, #116	@ 0x74
 8004c0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	9006      	str	r0, [sp, #24]
 8004c14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c18:	480a      	ldr	r0, [pc, #40]	@ (8004c44 <siprintf+0x3c>)
 8004c1a:	9107      	str	r1, [sp, #28]
 8004c1c:	9104      	str	r1, [sp, #16]
 8004c1e:	490a      	ldr	r1, [pc, #40]	@ (8004c48 <siprintf+0x40>)
 8004c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c24:	9105      	str	r1, [sp, #20]
 8004c26:	2400      	movs	r4, #0
 8004c28:	a902      	add	r1, sp, #8
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c30:	f002 fc24 	bl	800747c <_svfiprintf_r>
 8004c34:	9b02      	ldr	r3, [sp, #8]
 8004c36:	701c      	strb	r4, [r3, #0]
 8004c38:	b01d      	add	sp, #116	@ 0x74
 8004c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c3e:	b003      	add	sp, #12
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000001c 	.word	0x2000001c
 8004c48:	ffff0208 	.word	0xffff0208

08004c4c <__sread>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	460c      	mov	r4, r1
 8004c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c54:	f000 f8ca 	bl	8004dec <_read_r>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	bfab      	itete	ge
 8004c5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c60:	181b      	addge	r3, r3, r0
 8004c62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c66:	bfac      	ite	ge
 8004c68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c6a:	81a3      	strhlt	r3, [r4, #12]
 8004c6c:	bd10      	pop	{r4, pc}

08004c6e <__swrite>:
 8004c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c72:	461f      	mov	r7, r3
 8004c74:	898b      	ldrh	r3, [r1, #12]
 8004c76:	05db      	lsls	r3, r3, #23
 8004c78:	4605      	mov	r5, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	d505      	bpl.n	8004c8c <__swrite+0x1e>
 8004c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c84:	2302      	movs	r3, #2
 8004c86:	2200      	movs	r2, #0
 8004c88:	f000 f89e 	bl	8004dc8 <_lseek_r>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	4632      	mov	r2, r6
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca2:	f000 b8b5 	b.w	8004e10 <_write_r>

08004ca6 <__sseek>:
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	460c      	mov	r4, r1
 8004caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cae:	f000 f88b 	bl	8004dc8 <_lseek_r>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	bf15      	itete	ne
 8004cb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cc2:	81a3      	strheq	r3, [r4, #12]
 8004cc4:	bf18      	it	ne
 8004cc6:	81a3      	strhne	r3, [r4, #12]
 8004cc8:	bd10      	pop	{r4, pc}

08004cca <__sclose>:
 8004cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cce:	f000 b80d 	b.w	8004cec <_close_r>

08004cd2 <memset>:
 8004cd2:	4402      	add	r2, r0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d100      	bne.n	8004cdc <memset+0xa>
 8004cda:	4770      	bx	lr
 8004cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce0:	e7f9      	b.n	8004cd6 <memset+0x4>
	...

08004ce4 <_localeconv_r>:
 8004ce4:	4800      	ldr	r0, [pc, #0]	@ (8004ce8 <_localeconv_r+0x4>)
 8004ce6:	4770      	bx	lr
 8004ce8:	2000015c 	.word	0x2000015c

08004cec <_close_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d06      	ldr	r5, [pc, #24]	@ (8004d08 <_close_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	f7fc fc2e 	bl	8001558 <_close>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_close_r+0x1a>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_close_r+0x1a>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20004dd8 	.word	0x20004dd8

08004d0c <_reclaim_reent>:
 8004d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <_reclaim_reent+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4283      	cmp	r3, r0
 8004d12:	b570      	push	{r4, r5, r6, lr}
 8004d14:	4604      	mov	r4, r0
 8004d16:	d053      	beq.n	8004dc0 <_reclaim_reent+0xb4>
 8004d18:	69c3      	ldr	r3, [r0, #28]
 8004d1a:	b31b      	cbz	r3, 8004d64 <_reclaim_reent+0x58>
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	b163      	cbz	r3, 8004d3a <_reclaim_reent+0x2e>
 8004d20:	2500      	movs	r5, #0
 8004d22:	69e3      	ldr	r3, [r4, #28]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	5959      	ldr	r1, [r3, r5]
 8004d28:	b9b1      	cbnz	r1, 8004d58 <_reclaim_reent+0x4c>
 8004d2a:	3504      	adds	r5, #4
 8004d2c:	2d80      	cmp	r5, #128	@ 0x80
 8004d2e:	d1f8      	bne.n	8004d22 <_reclaim_reent+0x16>
 8004d30:	69e3      	ldr	r3, [r4, #28]
 8004d32:	4620      	mov	r0, r4
 8004d34:	68d9      	ldr	r1, [r3, #12]
 8004d36:	f000 ff17 	bl	8005b68 <_free_r>
 8004d3a:	69e3      	ldr	r3, [r4, #28]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	b111      	cbz	r1, 8004d46 <_reclaim_reent+0x3a>
 8004d40:	4620      	mov	r0, r4
 8004d42:	f000 ff11 	bl	8005b68 <_free_r>
 8004d46:	69e3      	ldr	r3, [r4, #28]
 8004d48:	689d      	ldr	r5, [r3, #8]
 8004d4a:	b15d      	cbz	r5, 8004d64 <_reclaim_reent+0x58>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4620      	mov	r0, r4
 8004d50:	682d      	ldr	r5, [r5, #0]
 8004d52:	f000 ff09 	bl	8005b68 <_free_r>
 8004d56:	e7f8      	b.n	8004d4a <_reclaim_reent+0x3e>
 8004d58:	680e      	ldr	r6, [r1, #0]
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 ff04 	bl	8005b68 <_free_r>
 8004d60:	4631      	mov	r1, r6
 8004d62:	e7e1      	b.n	8004d28 <_reclaim_reent+0x1c>
 8004d64:	6961      	ldr	r1, [r4, #20]
 8004d66:	b111      	cbz	r1, 8004d6e <_reclaim_reent+0x62>
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fefd 	bl	8005b68 <_free_r>
 8004d6e:	69e1      	ldr	r1, [r4, #28]
 8004d70:	b111      	cbz	r1, 8004d78 <_reclaim_reent+0x6c>
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 fef8 	bl	8005b68 <_free_r>
 8004d78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d7a:	b111      	cbz	r1, 8004d82 <_reclaim_reent+0x76>
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 fef3 	bl	8005b68 <_free_r>
 8004d82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d84:	b111      	cbz	r1, 8004d8c <_reclaim_reent+0x80>
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 feee 	bl	8005b68 <_free_r>
 8004d8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004d8e:	b111      	cbz	r1, 8004d96 <_reclaim_reent+0x8a>
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 fee9 	bl	8005b68 <_free_r>
 8004d96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004d98:	b111      	cbz	r1, 8004da0 <_reclaim_reent+0x94>
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 fee4 	bl	8005b68 <_free_r>
 8004da0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004da2:	b111      	cbz	r1, 8004daa <_reclaim_reent+0x9e>
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 fedf 	bl	8005b68 <_free_r>
 8004daa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004dac:	b111      	cbz	r1, 8004db4 <_reclaim_reent+0xa8>
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 feda 	bl	8005b68 <_free_r>
 8004db4:	6a23      	ldr	r3, [r4, #32]
 8004db6:	b11b      	cbz	r3, 8004dc0 <_reclaim_reent+0xb4>
 8004db8:	4620      	mov	r0, r4
 8004dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dbe:	4718      	bx	r3
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000001c 	.word	0x2000001c

08004dc8 <_lseek_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4d07      	ldr	r5, [pc, #28]	@ (8004de8 <_lseek_r+0x20>)
 8004dcc:	4604      	mov	r4, r0
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7fc fbc8 	bl	800156c <_lseek>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_lseek_r+0x1e>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_lseek_r+0x1e>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	20004dd8 	.word	0x20004dd8

08004dec <_read_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d07      	ldr	r5, [pc, #28]	@ (8004e0c <_read_r+0x20>)
 8004df0:	4604      	mov	r4, r0
 8004df2:	4608      	mov	r0, r1
 8004df4:	4611      	mov	r1, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7fc fb90 	bl	8001520 <_read>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_read_r+0x1e>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_read_r+0x1e>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	20004dd8 	.word	0x20004dd8

08004e10 <_write_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d07      	ldr	r5, [pc, #28]	@ (8004e30 <_write_r+0x20>)
 8004e14:	4604      	mov	r4, r0
 8004e16:	4608      	mov	r0, r1
 8004e18:	4611      	mov	r1, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	602a      	str	r2, [r5, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f7fc fb8c 	bl	800153c <_write>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_write_r+0x1e>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_write_r+0x1e>
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	20004dd8 	.word	0x20004dd8

08004e34 <__errno>:
 8004e34:	4b01      	ldr	r3, [pc, #4]	@ (8004e3c <__errno+0x8>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	2000001c 	.word	0x2000001c

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4d0d      	ldr	r5, [pc, #52]	@ (8004e78 <__libc_init_array+0x38>)
 8004e44:	4c0d      	ldr	r4, [pc, #52]	@ (8004e7c <__libc_init_array+0x3c>)
 8004e46:	1b64      	subs	r4, r4, r5
 8004e48:	10a4      	asrs	r4, r4, #2
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	4d0b      	ldr	r5, [pc, #44]	@ (8004e80 <__libc_init_array+0x40>)
 8004e52:	4c0c      	ldr	r4, [pc, #48]	@ (8004e84 <__libc_init_array+0x44>)
 8004e54:	f003 fb76 	bl	8008544 <_init>
 8004e58:	1b64      	subs	r4, r4, r5
 8004e5a:	10a4      	asrs	r4, r4, #2
 8004e5c:	2600      	movs	r6, #0
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	080089f4 	.word	0x080089f4
 8004e7c:	080089f4 	.word	0x080089f4
 8004e80:	080089f4 	.word	0x080089f4
 8004e84:	080089f8 	.word	0x080089f8

08004e88 <__retarget_lock_init_recursive>:
 8004e88:	4770      	bx	lr

08004e8a <__retarget_lock_acquire_recursive>:
 8004e8a:	4770      	bx	lr

08004e8c <__retarget_lock_release_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <memcpy>:
 8004e8e:	440a      	add	r2, r1
 8004e90:	4291      	cmp	r1, r2
 8004e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e96:	d100      	bne.n	8004e9a <memcpy+0xc>
 8004e98:	4770      	bx	lr
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea4:	4291      	cmp	r1, r2
 8004ea6:	d1f9      	bne.n	8004e9c <memcpy+0xe>
 8004ea8:	bd10      	pop	{r4, pc}
	...

08004eac <nanf>:
 8004eac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004eb4 <nanf+0x8>
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	7fc00000 	.word	0x7fc00000

08004eb8 <quorem>:
 8004eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	6903      	ldr	r3, [r0, #16]
 8004ebe:	690c      	ldr	r4, [r1, #16]
 8004ec0:	42a3      	cmp	r3, r4
 8004ec2:	4607      	mov	r7, r0
 8004ec4:	db7e      	blt.n	8004fc4 <quorem+0x10c>
 8004ec6:	3c01      	subs	r4, #1
 8004ec8:	f101 0814 	add.w	r8, r1, #20
 8004ecc:	00a3      	lsls	r3, r4, #2
 8004ece:	f100 0514 	add.w	r5, r0, #20
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eea:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eee:	d32e      	bcc.n	8004f4e <quorem+0x96>
 8004ef0:	f04f 0a00 	mov.w	sl, #0
 8004ef4:	46c4      	mov	ip, r8
 8004ef6:	46ae      	mov	lr, r5
 8004ef8:	46d3      	mov	fp, sl
 8004efa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004efe:	b298      	uxth	r0, r3
 8004f00:	fb06 a000 	mla	r0, r6, r0, sl
 8004f04:	0c02      	lsrs	r2, r0, #16
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	fb06 2303 	mla	r3, r6, r3, r2
 8004f0c:	f8de 2000 	ldr.w	r2, [lr]
 8004f10:	b280      	uxth	r0, r0
 8004f12:	b292      	uxth	r2, r2
 8004f14:	1a12      	subs	r2, r2, r0
 8004f16:	445a      	add	r2, fp
 8004f18:	f8de 0000 	ldr.w	r0, [lr]
 8004f1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f30:	45e1      	cmp	r9, ip
 8004f32:	f84e 2b04 	str.w	r2, [lr], #4
 8004f36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f3a:	d2de      	bcs.n	8004efa <quorem+0x42>
 8004f3c:	9b00      	ldr	r3, [sp, #0]
 8004f3e:	58eb      	ldr	r3, [r5, r3]
 8004f40:	b92b      	cbnz	r3, 8004f4e <quorem+0x96>
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	429d      	cmp	r5, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	d32f      	bcc.n	8004fac <quorem+0xf4>
 8004f4c:	613c      	str	r4, [r7, #16]
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f001 f9c6 	bl	80062e0 <__mcmp>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	db25      	blt.n	8004fa4 <quorem+0xec>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f60:	f8d1 c000 	ldr.w	ip, [r1]
 8004f64:	fa1f fe82 	uxth.w	lr, r2
 8004f68:	fa1f f38c 	uxth.w	r3, ip
 8004f6c:	eba3 030e 	sub.w	r3, r3, lr
 8004f70:	4403      	add	r3, r0
 8004f72:	0c12      	lsrs	r2, r2, #16
 8004f74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f82:	45c1      	cmp	r9, r8
 8004f84:	f841 3b04 	str.w	r3, [r1], #4
 8004f88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f8c:	d2e6      	bcs.n	8004f5c <quorem+0xa4>
 8004f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f96:	b922      	cbnz	r2, 8004fa2 <quorem+0xea>
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	d30b      	bcc.n	8004fb8 <quorem+0x100>
 8004fa0:	613c      	str	r4, [r7, #16]
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	b003      	add	sp, #12
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	d1cb      	bne.n	8004f4c <quorem+0x94>
 8004fb4:	3c01      	subs	r4, #1
 8004fb6:	e7c6      	b.n	8004f46 <quorem+0x8e>
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	d1ef      	bne.n	8004fa0 <quorem+0xe8>
 8004fc0:	3c01      	subs	r4, #1
 8004fc2:	e7ea      	b.n	8004f9a <quorem+0xe2>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e7ee      	b.n	8004fa6 <quorem+0xee>

08004fc8 <_dtoa_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	69c7      	ldr	r7, [r0, #28]
 8004fce:	b097      	sub	sp, #92	@ 0x5c
 8004fd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004fd4:	ec55 4b10 	vmov	r4, r5, d0
 8004fd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004fda:	9107      	str	r1, [sp, #28]
 8004fdc:	4681      	mov	r9, r0
 8004fde:	920c      	str	r2, [sp, #48]	@ 0x30
 8004fe0:	9311      	str	r3, [sp, #68]	@ 0x44
 8004fe2:	b97f      	cbnz	r7, 8005004 <_dtoa_r+0x3c>
 8004fe4:	2010      	movs	r0, #16
 8004fe6:	f000 fe09 	bl	8005bfc <malloc>
 8004fea:	4602      	mov	r2, r0
 8004fec:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ff0:	b920      	cbnz	r0, 8004ffc <_dtoa_r+0x34>
 8004ff2:	4ba9      	ldr	r3, [pc, #676]	@ (8005298 <_dtoa_r+0x2d0>)
 8004ff4:	21ef      	movs	r1, #239	@ 0xef
 8004ff6:	48a9      	ldr	r0, [pc, #676]	@ (800529c <_dtoa_r+0x2d4>)
 8004ff8:	f002 fc2e 	bl	8007858 <__assert_func>
 8004ffc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005000:	6007      	str	r7, [r0, #0]
 8005002:	60c7      	str	r7, [r0, #12]
 8005004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	b159      	cbz	r1, 8005024 <_dtoa_r+0x5c>
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	604a      	str	r2, [r1, #4]
 8005010:	2301      	movs	r3, #1
 8005012:	4093      	lsls	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
 8005016:	4648      	mov	r0, r9
 8005018:	f000 fee6 	bl	8005de8 <_Bfree>
 800501c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	1e2b      	subs	r3, r5, #0
 8005026:	bfb9      	ittee	lt
 8005028:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800502c:	9305      	strlt	r3, [sp, #20]
 800502e:	2300      	movge	r3, #0
 8005030:	6033      	strge	r3, [r6, #0]
 8005032:	9f05      	ldr	r7, [sp, #20]
 8005034:	4b9a      	ldr	r3, [pc, #616]	@ (80052a0 <_dtoa_r+0x2d8>)
 8005036:	bfbc      	itt	lt
 8005038:	2201      	movlt	r2, #1
 800503a:	6032      	strlt	r2, [r6, #0]
 800503c:	43bb      	bics	r3, r7
 800503e:	d112      	bne.n	8005066 <_dtoa_r+0x9e>
 8005040:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005042:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800504c:	4323      	orrs	r3, r4
 800504e:	f000 855a 	beq.w	8005b06 <_dtoa_r+0xb3e>
 8005052:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005054:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80052b4 <_dtoa_r+0x2ec>
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 855c 	beq.w	8005b16 <_dtoa_r+0xb4e>
 800505e:	f10a 0303 	add.w	r3, sl, #3
 8005062:	f000 bd56 	b.w	8005b12 <_dtoa_r+0xb4a>
 8005066:	ed9d 7b04 	vldr	d7, [sp, #16]
 800506a:	2200      	movs	r2, #0
 800506c:	ec51 0b17 	vmov	r0, r1, d7
 8005070:	2300      	movs	r3, #0
 8005072:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005076:	f7fb fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800507a:	4680      	mov	r8, r0
 800507c:	b158      	cbz	r0, 8005096 <_dtoa_r+0xce>
 800507e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005080:	2301      	movs	r3, #1
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005086:	b113      	cbz	r3, 800508e <_dtoa_r+0xc6>
 8005088:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800508a:	4b86      	ldr	r3, [pc, #536]	@ (80052a4 <_dtoa_r+0x2dc>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80052b8 <_dtoa_r+0x2f0>
 8005092:	f000 bd40 	b.w	8005b16 <_dtoa_r+0xb4e>
 8005096:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800509a:	aa14      	add	r2, sp, #80	@ 0x50
 800509c:	a915      	add	r1, sp, #84	@ 0x54
 800509e:	4648      	mov	r0, r9
 80050a0:	f001 fa3e 	bl	8006520 <__d2b>
 80050a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80050a8:	9002      	str	r0, [sp, #8]
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	d078      	beq.n	80051a0 <_dtoa_r+0x1d8>
 80050ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050c8:	4619      	mov	r1, r3
 80050ca:	2200      	movs	r2, #0
 80050cc:	4b76      	ldr	r3, [pc, #472]	@ (80052a8 <_dtoa_r+0x2e0>)
 80050ce:	f7fb f8e3 	bl	8000298 <__aeabi_dsub>
 80050d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005280 <_dtoa_r+0x2b8>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb fa96 	bl	8000608 <__aeabi_dmul>
 80050dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005288 <_dtoa_r+0x2c0>)
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb f8db 	bl	800029c <__adddf3>
 80050e6:	4604      	mov	r4, r0
 80050e8:	4630      	mov	r0, r6
 80050ea:	460d      	mov	r5, r1
 80050ec:	f7fb fa22 	bl	8000534 <__aeabi_i2d>
 80050f0:	a367      	add	r3, pc, #412	@ (adr r3, 8005290 <_dtoa_r+0x2c8>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb fa87 	bl	8000608 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb f8cb 	bl	800029c <__adddf3>
 8005106:	4604      	mov	r4, r0
 8005108:	460d      	mov	r5, r1
 800510a:	f7fb fd2d 	bl	8000b68 <__aeabi_d2iz>
 800510e:	2200      	movs	r2, #0
 8005110:	4607      	mov	r7, r0
 8005112:	2300      	movs	r3, #0
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb fce8 	bl	8000aec <__aeabi_dcmplt>
 800511c:	b140      	cbz	r0, 8005130 <_dtoa_r+0x168>
 800511e:	4638      	mov	r0, r7
 8005120:	f7fb fa08 	bl	8000534 <__aeabi_i2d>
 8005124:	4622      	mov	r2, r4
 8005126:	462b      	mov	r3, r5
 8005128:	f7fb fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800512c:	b900      	cbnz	r0, 8005130 <_dtoa_r+0x168>
 800512e:	3f01      	subs	r7, #1
 8005130:	2f16      	cmp	r7, #22
 8005132:	d852      	bhi.n	80051da <_dtoa_r+0x212>
 8005134:	4b5d      	ldr	r3, [pc, #372]	@ (80052ac <_dtoa_r+0x2e4>)
 8005136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005142:	f7fb fcd3 	bl	8000aec <__aeabi_dcmplt>
 8005146:	2800      	cmp	r0, #0
 8005148:	d049      	beq.n	80051de <_dtoa_r+0x216>
 800514a:	3f01      	subs	r7, #1
 800514c:	2300      	movs	r3, #0
 800514e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005150:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005152:	1b9b      	subs	r3, r3, r6
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	bf45      	ittet	mi
 8005158:	f1c3 0301 	rsbmi	r3, r3, #1
 800515c:	9300      	strmi	r3, [sp, #0]
 800515e:	2300      	movpl	r3, #0
 8005160:	2300      	movmi	r3, #0
 8005162:	9206      	str	r2, [sp, #24]
 8005164:	bf54      	ite	pl
 8005166:	9300      	strpl	r3, [sp, #0]
 8005168:	9306      	strmi	r3, [sp, #24]
 800516a:	2f00      	cmp	r7, #0
 800516c:	db39      	blt.n	80051e2 <_dtoa_r+0x21a>
 800516e:	9b06      	ldr	r3, [sp, #24]
 8005170:	970d      	str	r7, [sp, #52]	@ 0x34
 8005172:	443b      	add	r3, r7
 8005174:	9306      	str	r3, [sp, #24]
 8005176:	2300      	movs	r3, #0
 8005178:	9308      	str	r3, [sp, #32]
 800517a:	9b07      	ldr	r3, [sp, #28]
 800517c:	2b09      	cmp	r3, #9
 800517e:	d863      	bhi.n	8005248 <_dtoa_r+0x280>
 8005180:	2b05      	cmp	r3, #5
 8005182:	bfc4      	itt	gt
 8005184:	3b04      	subgt	r3, #4
 8005186:	9307      	strgt	r3, [sp, #28]
 8005188:	9b07      	ldr	r3, [sp, #28]
 800518a:	f1a3 0302 	sub.w	r3, r3, #2
 800518e:	bfcc      	ite	gt
 8005190:	2400      	movgt	r4, #0
 8005192:	2401      	movle	r4, #1
 8005194:	2b03      	cmp	r3, #3
 8005196:	d863      	bhi.n	8005260 <_dtoa_r+0x298>
 8005198:	e8df f003 	tbb	[pc, r3]
 800519c:	2b375452 	.word	0x2b375452
 80051a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051a4:	441e      	add	r6, r3
 80051a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	bfc1      	itttt	gt
 80051ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051b2:	409f      	lslgt	r7, r3
 80051b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051bc:	bfd6      	itet	le
 80051be:	f1c3 0320 	rsble	r3, r3, #32
 80051c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80051c6:	fa04 f003 	lslle.w	r0, r4, r3
 80051ca:	f7fb f9a3 	bl	8000514 <__aeabi_ui2d>
 80051ce:	2201      	movs	r2, #1
 80051d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051d4:	3e01      	subs	r6, #1
 80051d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80051d8:	e776      	b.n	80050c8 <_dtoa_r+0x100>
 80051da:	2301      	movs	r3, #1
 80051dc:	e7b7      	b.n	800514e <_dtoa_r+0x186>
 80051de:	9010      	str	r0, [sp, #64]	@ 0x40
 80051e0:	e7b6      	b.n	8005150 <_dtoa_r+0x188>
 80051e2:	9b00      	ldr	r3, [sp, #0]
 80051e4:	1bdb      	subs	r3, r3, r7
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	427b      	negs	r3, r7
 80051ea:	9308      	str	r3, [sp, #32]
 80051ec:	2300      	movs	r3, #0
 80051ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80051f0:	e7c3      	b.n	800517a <_dtoa_r+0x1b2>
 80051f2:	2301      	movs	r3, #1
 80051f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80051f8:	eb07 0b03 	add.w	fp, r7, r3
 80051fc:	f10b 0301 	add.w	r3, fp, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	9303      	str	r3, [sp, #12]
 8005204:	bfb8      	it	lt
 8005206:	2301      	movlt	r3, #1
 8005208:	e006      	b.n	8005218 <_dtoa_r+0x250>
 800520a:	2301      	movs	r3, #1
 800520c:	9309      	str	r3, [sp, #36]	@ 0x24
 800520e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005210:	2b00      	cmp	r3, #0
 8005212:	dd28      	ble.n	8005266 <_dtoa_r+0x29e>
 8005214:	469b      	mov	fp, r3
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800521c:	2100      	movs	r1, #0
 800521e:	2204      	movs	r2, #4
 8005220:	f102 0514 	add.w	r5, r2, #20
 8005224:	429d      	cmp	r5, r3
 8005226:	d926      	bls.n	8005276 <_dtoa_r+0x2ae>
 8005228:	6041      	str	r1, [r0, #4]
 800522a:	4648      	mov	r0, r9
 800522c:	f000 fd9c 	bl	8005d68 <_Balloc>
 8005230:	4682      	mov	sl, r0
 8005232:	2800      	cmp	r0, #0
 8005234:	d142      	bne.n	80052bc <_dtoa_r+0x2f4>
 8005236:	4b1e      	ldr	r3, [pc, #120]	@ (80052b0 <_dtoa_r+0x2e8>)
 8005238:	4602      	mov	r2, r0
 800523a:	f240 11af 	movw	r1, #431	@ 0x1af
 800523e:	e6da      	b.n	8004ff6 <_dtoa_r+0x2e>
 8005240:	2300      	movs	r3, #0
 8005242:	e7e3      	b.n	800520c <_dtoa_r+0x244>
 8005244:	2300      	movs	r3, #0
 8005246:	e7d5      	b.n	80051f4 <_dtoa_r+0x22c>
 8005248:	2401      	movs	r4, #1
 800524a:	2300      	movs	r3, #0
 800524c:	9307      	str	r3, [sp, #28]
 800524e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005250:	f04f 3bff 	mov.w	fp, #4294967295
 8005254:	2200      	movs	r2, #0
 8005256:	f8cd b00c 	str.w	fp, [sp, #12]
 800525a:	2312      	movs	r3, #18
 800525c:	920c      	str	r2, [sp, #48]	@ 0x30
 800525e:	e7db      	b.n	8005218 <_dtoa_r+0x250>
 8005260:	2301      	movs	r3, #1
 8005262:	9309      	str	r3, [sp, #36]	@ 0x24
 8005264:	e7f4      	b.n	8005250 <_dtoa_r+0x288>
 8005266:	f04f 0b01 	mov.w	fp, #1
 800526a:	f8cd b00c 	str.w	fp, [sp, #12]
 800526e:	465b      	mov	r3, fp
 8005270:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005274:	e7d0      	b.n	8005218 <_dtoa_r+0x250>
 8005276:	3101      	adds	r1, #1
 8005278:	0052      	lsls	r2, r2, #1
 800527a:	e7d1      	b.n	8005220 <_dtoa_r+0x258>
 800527c:	f3af 8000 	nop.w
 8005280:	636f4361 	.word	0x636f4361
 8005284:	3fd287a7 	.word	0x3fd287a7
 8005288:	8b60c8b3 	.word	0x8b60c8b3
 800528c:	3fc68a28 	.word	0x3fc68a28
 8005290:	509f79fb 	.word	0x509f79fb
 8005294:	3fd34413 	.word	0x3fd34413
 8005298:	080085f4 	.word	0x080085f4
 800529c:	0800860b 	.word	0x0800860b
 80052a0:	7ff00000 	.word	0x7ff00000
 80052a4:	080085bf 	.word	0x080085bf
 80052a8:	3ff80000 	.word	0x3ff80000
 80052ac:	080087d0 	.word	0x080087d0
 80052b0:	08008663 	.word	0x08008663
 80052b4:	080085f0 	.word	0x080085f0
 80052b8:	080085be 	.word	0x080085be
 80052bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80052c0:	6018      	str	r0, [r3, #0]
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	2b0e      	cmp	r3, #14
 80052c6:	f200 80a1 	bhi.w	800540c <_dtoa_r+0x444>
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	f000 809e 	beq.w	800540c <_dtoa_r+0x444>
 80052d0:	2f00      	cmp	r7, #0
 80052d2:	dd33      	ble.n	800533c <_dtoa_r+0x374>
 80052d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005548 <_dtoa_r+0x580>)
 80052d6:	f007 020f 	and.w	r2, r7, #15
 80052da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052de:	ed93 7b00 	vldr	d7, [r3]
 80052e2:	05f8      	lsls	r0, r7, #23
 80052e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80052e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052ec:	d516      	bpl.n	800531c <_dtoa_r+0x354>
 80052ee:	4b97      	ldr	r3, [pc, #604]	@ (800554c <_dtoa_r+0x584>)
 80052f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80052f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052f8:	f7fb fab0 	bl	800085c <__aeabi_ddiv>
 80052fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005300:	f004 040f 	and.w	r4, r4, #15
 8005304:	2603      	movs	r6, #3
 8005306:	4d91      	ldr	r5, [pc, #580]	@ (800554c <_dtoa_r+0x584>)
 8005308:	b954      	cbnz	r4, 8005320 <_dtoa_r+0x358>
 800530a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800530e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005312:	f7fb faa3 	bl	800085c <__aeabi_ddiv>
 8005316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800531a:	e028      	b.n	800536e <_dtoa_r+0x3a6>
 800531c:	2602      	movs	r6, #2
 800531e:	e7f2      	b.n	8005306 <_dtoa_r+0x33e>
 8005320:	07e1      	lsls	r1, r4, #31
 8005322:	d508      	bpl.n	8005336 <_dtoa_r+0x36e>
 8005324:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800532c:	f7fb f96c 	bl	8000608 <__aeabi_dmul>
 8005330:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005334:	3601      	adds	r6, #1
 8005336:	1064      	asrs	r4, r4, #1
 8005338:	3508      	adds	r5, #8
 800533a:	e7e5      	b.n	8005308 <_dtoa_r+0x340>
 800533c:	f000 80af 	beq.w	800549e <_dtoa_r+0x4d6>
 8005340:	427c      	negs	r4, r7
 8005342:	4b81      	ldr	r3, [pc, #516]	@ (8005548 <_dtoa_r+0x580>)
 8005344:	4d81      	ldr	r5, [pc, #516]	@ (800554c <_dtoa_r+0x584>)
 8005346:	f004 020f 	and.w	r2, r4, #15
 800534a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005356:	f7fb f957 	bl	8000608 <__aeabi_dmul>
 800535a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800535e:	1124      	asrs	r4, r4, #4
 8005360:	2300      	movs	r3, #0
 8005362:	2602      	movs	r6, #2
 8005364:	2c00      	cmp	r4, #0
 8005366:	f040 808f 	bne.w	8005488 <_dtoa_r+0x4c0>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1d3      	bne.n	8005316 <_dtoa_r+0x34e>
 800536e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005370:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8094 	beq.w	80054a2 <_dtoa_r+0x4da>
 800537a:	4b75      	ldr	r3, [pc, #468]	@ (8005550 <_dtoa_r+0x588>)
 800537c:	2200      	movs	r2, #0
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fb fbb3 	bl	8000aec <__aeabi_dcmplt>
 8005386:	2800      	cmp	r0, #0
 8005388:	f000 808b 	beq.w	80054a2 <_dtoa_r+0x4da>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8087 	beq.w	80054a2 <_dtoa_r+0x4da>
 8005394:	f1bb 0f00 	cmp.w	fp, #0
 8005398:	dd34      	ble.n	8005404 <_dtoa_r+0x43c>
 800539a:	4620      	mov	r0, r4
 800539c:	4b6d      	ldr	r3, [pc, #436]	@ (8005554 <_dtoa_r+0x58c>)
 800539e:	2200      	movs	r2, #0
 80053a0:	4629      	mov	r1, r5
 80053a2:	f7fb f931 	bl	8000608 <__aeabi_dmul>
 80053a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80053ae:	3601      	adds	r6, #1
 80053b0:	465c      	mov	r4, fp
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7fb f8be 	bl	8000534 <__aeabi_i2d>
 80053b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053bc:	f7fb f924 	bl	8000608 <__aeabi_dmul>
 80053c0:	4b65      	ldr	r3, [pc, #404]	@ (8005558 <_dtoa_r+0x590>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	f7fa ff6a 	bl	800029c <__adddf3>
 80053c8:	4605      	mov	r5, r0
 80053ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053ce:	2c00      	cmp	r4, #0
 80053d0:	d16a      	bne.n	80054a8 <_dtoa_r+0x4e0>
 80053d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d6:	4b61      	ldr	r3, [pc, #388]	@ (800555c <_dtoa_r+0x594>)
 80053d8:	2200      	movs	r2, #0
 80053da:	f7fa ff5d 	bl	8000298 <__aeabi_dsub>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053e6:	462a      	mov	r2, r5
 80053e8:	4633      	mov	r3, r6
 80053ea:	f7fb fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f040 8298 	bne.w	8005924 <_dtoa_r+0x95c>
 80053f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f8:	462a      	mov	r2, r5
 80053fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053fe:	f7fb fb75 	bl	8000aec <__aeabi_dcmplt>
 8005402:	bb38      	cbnz	r0, 8005454 <_dtoa_r+0x48c>
 8005404:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005408:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800540c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	f2c0 8157 	blt.w	80056c2 <_dtoa_r+0x6fa>
 8005414:	2f0e      	cmp	r7, #14
 8005416:	f300 8154 	bgt.w	80056c2 <_dtoa_r+0x6fa>
 800541a:	4b4b      	ldr	r3, [pc, #300]	@ (8005548 <_dtoa_r+0x580>)
 800541c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005420:	ed93 7b00 	vldr	d7, [r3]
 8005424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	ed8d 7b00 	vstr	d7, [sp]
 800542c:	f280 80e5 	bge.w	80055fa <_dtoa_r+0x632>
 8005430:	9b03      	ldr	r3, [sp, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f300 80e1 	bgt.w	80055fa <_dtoa_r+0x632>
 8005438:	d10c      	bne.n	8005454 <_dtoa_r+0x48c>
 800543a:	4b48      	ldr	r3, [pc, #288]	@ (800555c <_dtoa_r+0x594>)
 800543c:	2200      	movs	r2, #0
 800543e:	ec51 0b17 	vmov	r0, r1, d7
 8005442:	f7fb f8e1 	bl	8000608 <__aeabi_dmul>
 8005446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800544a:	f7fb fb63 	bl	8000b14 <__aeabi_dcmpge>
 800544e:	2800      	cmp	r0, #0
 8005450:	f000 8266 	beq.w	8005920 <_dtoa_r+0x958>
 8005454:	2400      	movs	r4, #0
 8005456:	4625      	mov	r5, r4
 8005458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800545a:	4656      	mov	r6, sl
 800545c:	ea6f 0803 	mvn.w	r8, r3
 8005460:	2700      	movs	r7, #0
 8005462:	4621      	mov	r1, r4
 8005464:	4648      	mov	r0, r9
 8005466:	f000 fcbf 	bl	8005de8 <_Bfree>
 800546a:	2d00      	cmp	r5, #0
 800546c:	f000 80bd 	beq.w	80055ea <_dtoa_r+0x622>
 8005470:	b12f      	cbz	r7, 800547e <_dtoa_r+0x4b6>
 8005472:	42af      	cmp	r7, r5
 8005474:	d003      	beq.n	800547e <_dtoa_r+0x4b6>
 8005476:	4639      	mov	r1, r7
 8005478:	4648      	mov	r0, r9
 800547a:	f000 fcb5 	bl	8005de8 <_Bfree>
 800547e:	4629      	mov	r1, r5
 8005480:	4648      	mov	r0, r9
 8005482:	f000 fcb1 	bl	8005de8 <_Bfree>
 8005486:	e0b0      	b.n	80055ea <_dtoa_r+0x622>
 8005488:	07e2      	lsls	r2, r4, #31
 800548a:	d505      	bpl.n	8005498 <_dtoa_r+0x4d0>
 800548c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005490:	f7fb f8ba 	bl	8000608 <__aeabi_dmul>
 8005494:	3601      	adds	r6, #1
 8005496:	2301      	movs	r3, #1
 8005498:	1064      	asrs	r4, r4, #1
 800549a:	3508      	adds	r5, #8
 800549c:	e762      	b.n	8005364 <_dtoa_r+0x39c>
 800549e:	2602      	movs	r6, #2
 80054a0:	e765      	b.n	800536e <_dtoa_r+0x3a6>
 80054a2:	9c03      	ldr	r4, [sp, #12]
 80054a4:	46b8      	mov	r8, r7
 80054a6:	e784      	b.n	80053b2 <_dtoa_r+0x3ea>
 80054a8:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <_dtoa_r+0x580>)
 80054aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054b4:	4454      	add	r4, sl
 80054b6:	2900      	cmp	r1, #0
 80054b8:	d054      	beq.n	8005564 <_dtoa_r+0x59c>
 80054ba:	4929      	ldr	r1, [pc, #164]	@ (8005560 <_dtoa_r+0x598>)
 80054bc:	2000      	movs	r0, #0
 80054be:	f7fb f9cd 	bl	800085c <__aeabi_ddiv>
 80054c2:	4633      	mov	r3, r6
 80054c4:	462a      	mov	r2, r5
 80054c6:	f7fa fee7 	bl	8000298 <__aeabi_dsub>
 80054ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80054ce:	4656      	mov	r6, sl
 80054d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d4:	f7fb fb48 	bl	8000b68 <__aeabi_d2iz>
 80054d8:	4605      	mov	r5, r0
 80054da:	f7fb f82b 	bl	8000534 <__aeabi_i2d>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e6:	f7fa fed7 	bl	8000298 <__aeabi_dsub>
 80054ea:	3530      	adds	r5, #48	@ 0x30
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054f4:	f806 5b01 	strb.w	r5, [r6], #1
 80054f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80054fc:	f7fb faf6 	bl	8000aec <__aeabi_dcmplt>
 8005500:	2800      	cmp	r0, #0
 8005502:	d172      	bne.n	80055ea <_dtoa_r+0x622>
 8005504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005508:	4911      	ldr	r1, [pc, #68]	@ (8005550 <_dtoa_r+0x588>)
 800550a:	2000      	movs	r0, #0
 800550c:	f7fa fec4 	bl	8000298 <__aeabi_dsub>
 8005510:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005514:	f7fb faea 	bl	8000aec <__aeabi_dcmplt>
 8005518:	2800      	cmp	r0, #0
 800551a:	f040 80b4 	bne.w	8005686 <_dtoa_r+0x6be>
 800551e:	42a6      	cmp	r6, r4
 8005520:	f43f af70 	beq.w	8005404 <_dtoa_r+0x43c>
 8005524:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <_dtoa_r+0x58c>)
 800552a:	2200      	movs	r2, #0
 800552c:	f7fb f86c 	bl	8000608 <__aeabi_dmul>
 8005530:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <_dtoa_r+0x58c>)
 8005532:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005536:	2200      	movs	r2, #0
 8005538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800553c:	f7fb f864 	bl	8000608 <__aeabi_dmul>
 8005540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005544:	e7c4      	b.n	80054d0 <_dtoa_r+0x508>
 8005546:	bf00      	nop
 8005548:	080087d0 	.word	0x080087d0
 800554c:	080087a8 	.word	0x080087a8
 8005550:	3ff00000 	.word	0x3ff00000
 8005554:	40240000 	.word	0x40240000
 8005558:	401c0000 	.word	0x401c0000
 800555c:	40140000 	.word	0x40140000
 8005560:	3fe00000 	.word	0x3fe00000
 8005564:	4631      	mov	r1, r6
 8005566:	4628      	mov	r0, r5
 8005568:	f7fb f84e 	bl	8000608 <__aeabi_dmul>
 800556c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005570:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005572:	4656      	mov	r6, sl
 8005574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005578:	f7fb faf6 	bl	8000b68 <__aeabi_d2iz>
 800557c:	4605      	mov	r5, r0
 800557e:	f7fa ffd9 	bl	8000534 <__aeabi_i2d>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800558a:	f7fa fe85 	bl	8000298 <__aeabi_dsub>
 800558e:	3530      	adds	r5, #48	@ 0x30
 8005590:	f806 5b01 	strb.w	r5, [r6], #1
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	42a6      	cmp	r6, r4
 800559a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	d124      	bne.n	80055ee <_dtoa_r+0x626>
 80055a4:	4baf      	ldr	r3, [pc, #700]	@ (8005864 <_dtoa_r+0x89c>)
 80055a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80055aa:	f7fa fe77 	bl	800029c <__adddf3>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b6:	f7fb fab7 	bl	8000b28 <__aeabi_dcmpgt>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d163      	bne.n	8005686 <_dtoa_r+0x6be>
 80055be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055c2:	49a8      	ldr	r1, [pc, #672]	@ (8005864 <_dtoa_r+0x89c>)
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7fa fe67 	bl	8000298 <__aeabi_dsub>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d2:	f7fb fa8b 	bl	8000aec <__aeabi_dcmplt>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f43f af14 	beq.w	8005404 <_dtoa_r+0x43c>
 80055dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80055de:	1e73      	subs	r3, r6, #1
 80055e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055e6:	2b30      	cmp	r3, #48	@ 0x30
 80055e8:	d0f8      	beq.n	80055dc <_dtoa_r+0x614>
 80055ea:	4647      	mov	r7, r8
 80055ec:	e03b      	b.n	8005666 <_dtoa_r+0x69e>
 80055ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005868 <_dtoa_r+0x8a0>)
 80055f0:	f7fb f80a 	bl	8000608 <__aeabi_dmul>
 80055f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f8:	e7bc      	b.n	8005574 <_dtoa_r+0x5ac>
 80055fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80055fe:	4656      	mov	r6, sl
 8005600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f7fb f928 	bl	800085c <__aeabi_ddiv>
 800560c:	f7fb faac 	bl	8000b68 <__aeabi_d2iz>
 8005610:	4680      	mov	r8, r0
 8005612:	f7fa ff8f 	bl	8000534 <__aeabi_i2d>
 8005616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800561a:	f7fa fff5 	bl	8000608 <__aeabi_dmul>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4620      	mov	r0, r4
 8005624:	4629      	mov	r1, r5
 8005626:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800562a:	f7fa fe35 	bl	8000298 <__aeabi_dsub>
 800562e:	f806 4b01 	strb.w	r4, [r6], #1
 8005632:	9d03      	ldr	r5, [sp, #12]
 8005634:	eba6 040a 	sub.w	r4, r6, sl
 8005638:	42a5      	cmp	r5, r4
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	d133      	bne.n	80056a8 <_dtoa_r+0x6e0>
 8005640:	f7fa fe2c 	bl	800029c <__adddf3>
 8005644:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	f7fb fa6c 	bl	8000b28 <__aeabi_dcmpgt>
 8005650:	b9c0      	cbnz	r0, 8005684 <_dtoa_r+0x6bc>
 8005652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb fa3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800565e:	b110      	cbz	r0, 8005666 <_dtoa_r+0x69e>
 8005660:	f018 0f01 	tst.w	r8, #1
 8005664:	d10e      	bne.n	8005684 <_dtoa_r+0x6bc>
 8005666:	9902      	ldr	r1, [sp, #8]
 8005668:	4648      	mov	r0, r9
 800566a:	f000 fbbd 	bl	8005de8 <_Bfree>
 800566e:	2300      	movs	r3, #0
 8005670:	7033      	strb	r3, [r6, #0]
 8005672:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005674:	3701      	adds	r7, #1
 8005676:	601f      	str	r7, [r3, #0]
 8005678:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 824b 	beq.w	8005b16 <_dtoa_r+0xb4e>
 8005680:	601e      	str	r6, [r3, #0]
 8005682:	e248      	b.n	8005b16 <_dtoa_r+0xb4e>
 8005684:	46b8      	mov	r8, r7
 8005686:	4633      	mov	r3, r6
 8005688:	461e      	mov	r6, r3
 800568a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568e:	2a39      	cmp	r2, #57	@ 0x39
 8005690:	d106      	bne.n	80056a0 <_dtoa_r+0x6d8>
 8005692:	459a      	cmp	sl, r3
 8005694:	d1f8      	bne.n	8005688 <_dtoa_r+0x6c0>
 8005696:	2230      	movs	r2, #48	@ 0x30
 8005698:	f108 0801 	add.w	r8, r8, #1
 800569c:	f88a 2000 	strb.w	r2, [sl]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	3201      	adds	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e7a0      	b.n	80055ea <_dtoa_r+0x622>
 80056a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <_dtoa_r+0x8a0>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	f7fa ffac 	bl	8000608 <__aeabi_dmul>
 80056b0:	2200      	movs	r2, #0
 80056b2:	2300      	movs	r3, #0
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	f7fb fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d09f      	beq.n	8005600 <_dtoa_r+0x638>
 80056c0:	e7d1      	b.n	8005666 <_dtoa_r+0x69e>
 80056c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c4:	2a00      	cmp	r2, #0
 80056c6:	f000 80ea 	beq.w	800589e <_dtoa_r+0x8d6>
 80056ca:	9a07      	ldr	r2, [sp, #28]
 80056cc:	2a01      	cmp	r2, #1
 80056ce:	f300 80cd 	bgt.w	800586c <_dtoa_r+0x8a4>
 80056d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	f000 80c1 	beq.w	800585c <_dtoa_r+0x894>
 80056da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056de:	9c08      	ldr	r4, [sp, #32]
 80056e0:	9e00      	ldr	r6, [sp, #0]
 80056e2:	9a00      	ldr	r2, [sp, #0]
 80056e4:	441a      	add	r2, r3
 80056e6:	9200      	str	r2, [sp, #0]
 80056e8:	9a06      	ldr	r2, [sp, #24]
 80056ea:	2101      	movs	r1, #1
 80056ec:	441a      	add	r2, r3
 80056ee:	4648      	mov	r0, r9
 80056f0:	9206      	str	r2, [sp, #24]
 80056f2:	f000 fc77 	bl	8005fe4 <__i2b>
 80056f6:	4605      	mov	r5, r0
 80056f8:	b166      	cbz	r6, 8005714 <_dtoa_r+0x74c>
 80056fa:	9b06      	ldr	r3, [sp, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd09      	ble.n	8005714 <_dtoa_r+0x74c>
 8005700:	42b3      	cmp	r3, r6
 8005702:	9a00      	ldr	r2, [sp, #0]
 8005704:	bfa8      	it	ge
 8005706:	4633      	movge	r3, r6
 8005708:	1ad2      	subs	r2, r2, r3
 800570a:	9200      	str	r2, [sp, #0]
 800570c:	9a06      	ldr	r2, [sp, #24]
 800570e:	1af6      	subs	r6, r6, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	9306      	str	r3, [sp, #24]
 8005714:	9b08      	ldr	r3, [sp, #32]
 8005716:	b30b      	cbz	r3, 800575c <_dtoa_r+0x794>
 8005718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 80c6 	beq.w	80058ac <_dtoa_r+0x8e4>
 8005720:	2c00      	cmp	r4, #0
 8005722:	f000 80c0 	beq.w	80058a6 <_dtoa_r+0x8de>
 8005726:	4629      	mov	r1, r5
 8005728:	4622      	mov	r2, r4
 800572a:	4648      	mov	r0, r9
 800572c:	f000 fd12 	bl	8006154 <__pow5mult>
 8005730:	9a02      	ldr	r2, [sp, #8]
 8005732:	4601      	mov	r1, r0
 8005734:	4605      	mov	r5, r0
 8005736:	4648      	mov	r0, r9
 8005738:	f000 fc6a 	bl	8006010 <__multiply>
 800573c:	9902      	ldr	r1, [sp, #8]
 800573e:	4680      	mov	r8, r0
 8005740:	4648      	mov	r0, r9
 8005742:	f000 fb51 	bl	8005de8 <_Bfree>
 8005746:	9b08      	ldr	r3, [sp, #32]
 8005748:	1b1b      	subs	r3, r3, r4
 800574a:	9308      	str	r3, [sp, #32]
 800574c:	f000 80b1 	beq.w	80058b2 <_dtoa_r+0x8ea>
 8005750:	9a08      	ldr	r2, [sp, #32]
 8005752:	4641      	mov	r1, r8
 8005754:	4648      	mov	r0, r9
 8005756:	f000 fcfd 	bl	8006154 <__pow5mult>
 800575a:	9002      	str	r0, [sp, #8]
 800575c:	2101      	movs	r1, #1
 800575e:	4648      	mov	r0, r9
 8005760:	f000 fc40 	bl	8005fe4 <__i2b>
 8005764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005766:	4604      	mov	r4, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 81d8 	beq.w	8005b1e <_dtoa_r+0xb56>
 800576e:	461a      	mov	r2, r3
 8005770:	4601      	mov	r1, r0
 8005772:	4648      	mov	r0, r9
 8005774:	f000 fcee 	bl	8006154 <__pow5mult>
 8005778:	9b07      	ldr	r3, [sp, #28]
 800577a:	2b01      	cmp	r3, #1
 800577c:	4604      	mov	r4, r0
 800577e:	f300 809f 	bgt.w	80058c0 <_dtoa_r+0x8f8>
 8005782:	9b04      	ldr	r3, [sp, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 8097 	bne.w	80058b8 <_dtoa_r+0x8f0>
 800578a:	9b05      	ldr	r3, [sp, #20]
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 8093 	bne.w	80058bc <_dtoa_r+0x8f4>
 8005796:	9b05      	ldr	r3, [sp, #20]
 8005798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800579c:	0d1b      	lsrs	r3, r3, #20
 800579e:	051b      	lsls	r3, r3, #20
 80057a0:	b133      	cbz	r3, 80057b0 <_dtoa_r+0x7e8>
 80057a2:	9b00      	ldr	r3, [sp, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	9b06      	ldr	r3, [sp, #24]
 80057aa:	3301      	adds	r3, #1
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	2301      	movs	r3, #1
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 81b8 	beq.w	8005b2a <_dtoa_r+0xb62>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c0:	6918      	ldr	r0, [r3, #16]
 80057c2:	f000 fbc3 	bl	8005f4c <__hi0bits>
 80057c6:	f1c0 0020 	rsb	r0, r0, #32
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	4418      	add	r0, r3
 80057ce:	f010 001f 	ands.w	r0, r0, #31
 80057d2:	f000 8082 	beq.w	80058da <_dtoa_r+0x912>
 80057d6:	f1c0 0320 	rsb	r3, r0, #32
 80057da:	2b04      	cmp	r3, #4
 80057dc:	dd73      	ble.n	80058c6 <_dtoa_r+0x8fe>
 80057de:	9b00      	ldr	r3, [sp, #0]
 80057e0:	f1c0 001c 	rsb	r0, r0, #28
 80057e4:	4403      	add	r3, r0
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	9b06      	ldr	r3, [sp, #24]
 80057ea:	4403      	add	r3, r0
 80057ec:	4406      	add	r6, r0
 80057ee:	9306      	str	r3, [sp, #24]
 80057f0:	9b00      	ldr	r3, [sp, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dd05      	ble.n	8005802 <_dtoa_r+0x83a>
 80057f6:	9902      	ldr	r1, [sp, #8]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4648      	mov	r0, r9
 80057fc:	f000 fd04 	bl	8006208 <__lshift>
 8005800:	9002      	str	r0, [sp, #8]
 8005802:	9b06      	ldr	r3, [sp, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dd05      	ble.n	8005814 <_dtoa_r+0x84c>
 8005808:	4621      	mov	r1, r4
 800580a:	461a      	mov	r2, r3
 800580c:	4648      	mov	r0, r9
 800580e:	f000 fcfb 	bl	8006208 <__lshift>
 8005812:	4604      	mov	r4, r0
 8005814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d061      	beq.n	80058de <_dtoa_r+0x916>
 800581a:	9802      	ldr	r0, [sp, #8]
 800581c:	4621      	mov	r1, r4
 800581e:	f000 fd5f 	bl	80062e0 <__mcmp>
 8005822:	2800      	cmp	r0, #0
 8005824:	da5b      	bge.n	80058de <_dtoa_r+0x916>
 8005826:	2300      	movs	r3, #0
 8005828:	9902      	ldr	r1, [sp, #8]
 800582a:	220a      	movs	r2, #10
 800582c:	4648      	mov	r0, r9
 800582e:	f000 fafd 	bl	8005e2c <__multadd>
 8005832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	f107 38ff 	add.w	r8, r7, #4294967295
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8177 	beq.w	8005b2e <_dtoa_r+0xb66>
 8005840:	4629      	mov	r1, r5
 8005842:	2300      	movs	r3, #0
 8005844:	220a      	movs	r2, #10
 8005846:	4648      	mov	r0, r9
 8005848:	f000 faf0 	bl	8005e2c <__multadd>
 800584c:	f1bb 0f00 	cmp.w	fp, #0
 8005850:	4605      	mov	r5, r0
 8005852:	dc6f      	bgt.n	8005934 <_dtoa_r+0x96c>
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	2b02      	cmp	r3, #2
 8005858:	dc49      	bgt.n	80058ee <_dtoa_r+0x926>
 800585a:	e06b      	b.n	8005934 <_dtoa_r+0x96c>
 800585c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800585e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005862:	e73c      	b.n	80056de <_dtoa_r+0x716>
 8005864:	3fe00000 	.word	0x3fe00000
 8005868:	40240000 	.word	0x40240000
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	1e5c      	subs	r4, r3, #1
 8005870:	9b08      	ldr	r3, [sp, #32]
 8005872:	42a3      	cmp	r3, r4
 8005874:	db09      	blt.n	800588a <_dtoa_r+0x8c2>
 8005876:	1b1c      	subs	r4, r3, r4
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f6bf af30 	bge.w	80056e0 <_dtoa_r+0x718>
 8005880:	9b00      	ldr	r3, [sp, #0]
 8005882:	9a03      	ldr	r2, [sp, #12]
 8005884:	1a9e      	subs	r6, r3, r2
 8005886:	2300      	movs	r3, #0
 8005888:	e72b      	b.n	80056e2 <_dtoa_r+0x71a>
 800588a:	9b08      	ldr	r3, [sp, #32]
 800588c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800588e:	9408      	str	r4, [sp, #32]
 8005890:	1ae3      	subs	r3, r4, r3
 8005892:	441a      	add	r2, r3
 8005894:	9e00      	ldr	r6, [sp, #0]
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	920d      	str	r2, [sp, #52]	@ 0x34
 800589a:	2400      	movs	r4, #0
 800589c:	e721      	b.n	80056e2 <_dtoa_r+0x71a>
 800589e:	9c08      	ldr	r4, [sp, #32]
 80058a0:	9e00      	ldr	r6, [sp, #0]
 80058a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80058a4:	e728      	b.n	80056f8 <_dtoa_r+0x730>
 80058a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80058aa:	e751      	b.n	8005750 <_dtoa_r+0x788>
 80058ac:	9a08      	ldr	r2, [sp, #32]
 80058ae:	9902      	ldr	r1, [sp, #8]
 80058b0:	e750      	b.n	8005754 <_dtoa_r+0x78c>
 80058b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80058b6:	e751      	b.n	800575c <_dtoa_r+0x794>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e779      	b.n	80057b0 <_dtoa_r+0x7e8>
 80058bc:	9b04      	ldr	r3, [sp, #16]
 80058be:	e777      	b.n	80057b0 <_dtoa_r+0x7e8>
 80058c0:	2300      	movs	r3, #0
 80058c2:	9308      	str	r3, [sp, #32]
 80058c4:	e779      	b.n	80057ba <_dtoa_r+0x7f2>
 80058c6:	d093      	beq.n	80057f0 <_dtoa_r+0x828>
 80058c8:	9a00      	ldr	r2, [sp, #0]
 80058ca:	331c      	adds	r3, #28
 80058cc:	441a      	add	r2, r3
 80058ce:	9200      	str	r2, [sp, #0]
 80058d0:	9a06      	ldr	r2, [sp, #24]
 80058d2:	441a      	add	r2, r3
 80058d4:	441e      	add	r6, r3
 80058d6:	9206      	str	r2, [sp, #24]
 80058d8:	e78a      	b.n	80057f0 <_dtoa_r+0x828>
 80058da:	4603      	mov	r3, r0
 80058dc:	e7f4      	b.n	80058c8 <_dtoa_r+0x900>
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	46b8      	mov	r8, r7
 80058e4:	dc20      	bgt.n	8005928 <_dtoa_r+0x960>
 80058e6:	469b      	mov	fp, r3
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	dd1e      	ble.n	800592c <_dtoa_r+0x964>
 80058ee:	f1bb 0f00 	cmp.w	fp, #0
 80058f2:	f47f adb1 	bne.w	8005458 <_dtoa_r+0x490>
 80058f6:	4621      	mov	r1, r4
 80058f8:	465b      	mov	r3, fp
 80058fa:	2205      	movs	r2, #5
 80058fc:	4648      	mov	r0, r9
 80058fe:	f000 fa95 	bl	8005e2c <__multadd>
 8005902:	4601      	mov	r1, r0
 8005904:	4604      	mov	r4, r0
 8005906:	9802      	ldr	r0, [sp, #8]
 8005908:	f000 fcea 	bl	80062e0 <__mcmp>
 800590c:	2800      	cmp	r0, #0
 800590e:	f77f ada3 	ble.w	8005458 <_dtoa_r+0x490>
 8005912:	4656      	mov	r6, sl
 8005914:	2331      	movs	r3, #49	@ 0x31
 8005916:	f806 3b01 	strb.w	r3, [r6], #1
 800591a:	f108 0801 	add.w	r8, r8, #1
 800591e:	e59f      	b.n	8005460 <_dtoa_r+0x498>
 8005920:	9c03      	ldr	r4, [sp, #12]
 8005922:	46b8      	mov	r8, r7
 8005924:	4625      	mov	r5, r4
 8005926:	e7f4      	b.n	8005912 <_dtoa_r+0x94a>
 8005928:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800592c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8101 	beq.w	8005b36 <_dtoa_r+0xb6e>
 8005934:	2e00      	cmp	r6, #0
 8005936:	dd05      	ble.n	8005944 <_dtoa_r+0x97c>
 8005938:	4629      	mov	r1, r5
 800593a:	4632      	mov	r2, r6
 800593c:	4648      	mov	r0, r9
 800593e:	f000 fc63 	bl	8006208 <__lshift>
 8005942:	4605      	mov	r5, r0
 8005944:	9b08      	ldr	r3, [sp, #32]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d05c      	beq.n	8005a04 <_dtoa_r+0xa3c>
 800594a:	6869      	ldr	r1, [r5, #4]
 800594c:	4648      	mov	r0, r9
 800594e:	f000 fa0b 	bl	8005d68 <_Balloc>
 8005952:	4606      	mov	r6, r0
 8005954:	b928      	cbnz	r0, 8005962 <_dtoa_r+0x99a>
 8005956:	4b82      	ldr	r3, [pc, #520]	@ (8005b60 <_dtoa_r+0xb98>)
 8005958:	4602      	mov	r2, r0
 800595a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800595e:	f7ff bb4a 	b.w	8004ff6 <_dtoa_r+0x2e>
 8005962:	692a      	ldr	r2, [r5, #16]
 8005964:	3202      	adds	r2, #2
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	f105 010c 	add.w	r1, r5, #12
 800596c:	300c      	adds	r0, #12
 800596e:	f7ff fa8e 	bl	8004e8e <memcpy>
 8005972:	2201      	movs	r2, #1
 8005974:	4631      	mov	r1, r6
 8005976:	4648      	mov	r0, r9
 8005978:	f000 fc46 	bl	8006208 <__lshift>
 800597c:	f10a 0301 	add.w	r3, sl, #1
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	eb0a 030b 	add.w	r3, sl, fp
 8005986:	9308      	str	r3, [sp, #32]
 8005988:	9b04      	ldr	r3, [sp, #16]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	462f      	mov	r7, r5
 8005990:	9306      	str	r3, [sp, #24]
 8005992:	4605      	mov	r5, r0
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	9802      	ldr	r0, [sp, #8]
 8005998:	4621      	mov	r1, r4
 800599a:	f103 3bff 	add.w	fp, r3, #4294967295
 800599e:	f7ff fa8b 	bl	8004eb8 <quorem>
 80059a2:	4603      	mov	r3, r0
 80059a4:	3330      	adds	r3, #48	@ 0x30
 80059a6:	9003      	str	r0, [sp, #12]
 80059a8:	4639      	mov	r1, r7
 80059aa:	9802      	ldr	r0, [sp, #8]
 80059ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ae:	f000 fc97 	bl	80062e0 <__mcmp>
 80059b2:	462a      	mov	r2, r5
 80059b4:	9004      	str	r0, [sp, #16]
 80059b6:	4621      	mov	r1, r4
 80059b8:	4648      	mov	r0, r9
 80059ba:	f000 fcad 	bl	8006318 <__mdiff>
 80059be:	68c2      	ldr	r2, [r0, #12]
 80059c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c2:	4606      	mov	r6, r0
 80059c4:	bb02      	cbnz	r2, 8005a08 <_dtoa_r+0xa40>
 80059c6:	4601      	mov	r1, r0
 80059c8:	9802      	ldr	r0, [sp, #8]
 80059ca:	f000 fc89 	bl	80062e0 <__mcmp>
 80059ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d0:	4602      	mov	r2, r0
 80059d2:	4631      	mov	r1, r6
 80059d4:	4648      	mov	r0, r9
 80059d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80059d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80059da:	f000 fa05 	bl	8005de8 <_Bfree>
 80059de:	9b07      	ldr	r3, [sp, #28]
 80059e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059e2:	9e00      	ldr	r6, [sp, #0]
 80059e4:	ea42 0103 	orr.w	r1, r2, r3
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	4319      	orrs	r1, r3
 80059ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ee:	d10d      	bne.n	8005a0c <_dtoa_r+0xa44>
 80059f0:	2b39      	cmp	r3, #57	@ 0x39
 80059f2:	d027      	beq.n	8005a44 <_dtoa_r+0xa7c>
 80059f4:	9a04      	ldr	r2, [sp, #16]
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	dd01      	ble.n	80059fe <_dtoa_r+0xa36>
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	3331      	adds	r3, #49	@ 0x31
 80059fe:	f88b 3000 	strb.w	r3, [fp]
 8005a02:	e52e      	b.n	8005462 <_dtoa_r+0x49a>
 8005a04:	4628      	mov	r0, r5
 8005a06:	e7b9      	b.n	800597c <_dtoa_r+0x9b4>
 8005a08:	2201      	movs	r2, #1
 8005a0a:	e7e2      	b.n	80059d2 <_dtoa_r+0xa0a>
 8005a0c:	9904      	ldr	r1, [sp, #16]
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	db04      	blt.n	8005a1c <_dtoa_r+0xa54>
 8005a12:	9807      	ldr	r0, [sp, #28]
 8005a14:	4301      	orrs	r1, r0
 8005a16:	9806      	ldr	r0, [sp, #24]
 8005a18:	4301      	orrs	r1, r0
 8005a1a:	d120      	bne.n	8005a5e <_dtoa_r+0xa96>
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	ddee      	ble.n	80059fe <_dtoa_r+0xa36>
 8005a20:	9902      	ldr	r1, [sp, #8]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2201      	movs	r2, #1
 8005a26:	4648      	mov	r0, r9
 8005a28:	f000 fbee 	bl	8006208 <__lshift>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	9002      	str	r0, [sp, #8]
 8005a30:	f000 fc56 	bl	80062e0 <__mcmp>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	9b00      	ldr	r3, [sp, #0]
 8005a38:	dc02      	bgt.n	8005a40 <_dtoa_r+0xa78>
 8005a3a:	d1e0      	bne.n	80059fe <_dtoa_r+0xa36>
 8005a3c:	07da      	lsls	r2, r3, #31
 8005a3e:	d5de      	bpl.n	80059fe <_dtoa_r+0xa36>
 8005a40:	2b39      	cmp	r3, #57	@ 0x39
 8005a42:	d1da      	bne.n	80059fa <_dtoa_r+0xa32>
 8005a44:	2339      	movs	r3, #57	@ 0x39
 8005a46:	f88b 3000 	strb.w	r3, [fp]
 8005a4a:	4633      	mov	r3, r6
 8005a4c:	461e      	mov	r6, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a54:	2a39      	cmp	r2, #57	@ 0x39
 8005a56:	d04e      	beq.n	8005af6 <_dtoa_r+0xb2e>
 8005a58:	3201      	adds	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e501      	b.n	8005462 <_dtoa_r+0x49a>
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	dd03      	ble.n	8005a6a <_dtoa_r+0xaa2>
 8005a62:	2b39      	cmp	r3, #57	@ 0x39
 8005a64:	d0ee      	beq.n	8005a44 <_dtoa_r+0xa7c>
 8005a66:	3301      	adds	r3, #1
 8005a68:	e7c9      	b.n	80059fe <_dtoa_r+0xa36>
 8005a6a:	9a00      	ldr	r2, [sp, #0]
 8005a6c:	9908      	ldr	r1, [sp, #32]
 8005a6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a72:	428a      	cmp	r2, r1
 8005a74:	d028      	beq.n	8005ac8 <_dtoa_r+0xb00>
 8005a76:	9902      	ldr	r1, [sp, #8]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	4648      	mov	r0, r9
 8005a7e:	f000 f9d5 	bl	8005e2c <__multadd>
 8005a82:	42af      	cmp	r7, r5
 8005a84:	9002      	str	r0, [sp, #8]
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f04f 020a 	mov.w	r2, #10
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4648      	mov	r0, r9
 8005a92:	d107      	bne.n	8005aa4 <_dtoa_r+0xadc>
 8005a94:	f000 f9ca 	bl	8005e2c <__multadd>
 8005a98:	4607      	mov	r7, r0
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	9b00      	ldr	r3, [sp, #0]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	e777      	b.n	8005994 <_dtoa_r+0x9cc>
 8005aa4:	f000 f9c2 	bl	8005e2c <__multadd>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4607      	mov	r7, r0
 8005aac:	2300      	movs	r3, #0
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 f9bb 	bl	8005e2c <__multadd>
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	e7f0      	b.n	8005a9c <_dtoa_r+0xad4>
 8005aba:	f1bb 0f00 	cmp.w	fp, #0
 8005abe:	bfcc      	ite	gt
 8005ac0:	465e      	movgt	r6, fp
 8005ac2:	2601      	movle	r6, #1
 8005ac4:	4456      	add	r6, sl
 8005ac6:	2700      	movs	r7, #0
 8005ac8:	9902      	ldr	r1, [sp, #8]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	4648      	mov	r0, r9
 8005ad0:	f000 fb9a 	bl	8006208 <__lshift>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	9002      	str	r0, [sp, #8]
 8005ad8:	f000 fc02 	bl	80062e0 <__mcmp>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	dcb4      	bgt.n	8005a4a <_dtoa_r+0xa82>
 8005ae0:	d102      	bne.n	8005ae8 <_dtoa_r+0xb20>
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	07db      	lsls	r3, r3, #31
 8005ae6:	d4b0      	bmi.n	8005a4a <_dtoa_r+0xa82>
 8005ae8:	4633      	mov	r3, r6
 8005aea:	461e      	mov	r6, r3
 8005aec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af0:	2a30      	cmp	r2, #48	@ 0x30
 8005af2:	d0fa      	beq.n	8005aea <_dtoa_r+0xb22>
 8005af4:	e4b5      	b.n	8005462 <_dtoa_r+0x49a>
 8005af6:	459a      	cmp	sl, r3
 8005af8:	d1a8      	bne.n	8005a4c <_dtoa_r+0xa84>
 8005afa:	2331      	movs	r3, #49	@ 0x31
 8005afc:	f108 0801 	add.w	r8, r8, #1
 8005b00:	f88a 3000 	strb.w	r3, [sl]
 8005b04:	e4ad      	b.n	8005462 <_dtoa_r+0x49a>
 8005b06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005b64 <_dtoa_r+0xb9c>
 8005b0c:	b11b      	cbz	r3, 8005b16 <_dtoa_r+0xb4e>
 8005b0e:	f10a 0308 	add.w	r3, sl, #8
 8005b12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4650      	mov	r0, sl
 8005b18:	b017      	add	sp, #92	@ 0x5c
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	9b07      	ldr	r3, [sp, #28]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f77f ae2e 	ble.w	8005782 <_dtoa_r+0x7ba>
 8005b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b28:	9308      	str	r3, [sp, #32]
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e64d      	b.n	80057ca <_dtoa_r+0x802>
 8005b2e:	f1bb 0f00 	cmp.w	fp, #0
 8005b32:	f77f aed9 	ble.w	80058e8 <_dtoa_r+0x920>
 8005b36:	4656      	mov	r6, sl
 8005b38:	9802      	ldr	r0, [sp, #8]
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f7ff f9bc 	bl	8004eb8 <quorem>
 8005b40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005b44:	f806 3b01 	strb.w	r3, [r6], #1
 8005b48:	eba6 020a 	sub.w	r2, r6, sl
 8005b4c:	4593      	cmp	fp, r2
 8005b4e:	ddb4      	ble.n	8005aba <_dtoa_r+0xaf2>
 8005b50:	9902      	ldr	r1, [sp, #8]
 8005b52:	2300      	movs	r3, #0
 8005b54:	220a      	movs	r2, #10
 8005b56:	4648      	mov	r0, r9
 8005b58:	f000 f968 	bl	8005e2c <__multadd>
 8005b5c:	9002      	str	r0, [sp, #8]
 8005b5e:	e7eb      	b.n	8005b38 <_dtoa_r+0xb70>
 8005b60:	08008663 	.word	0x08008663
 8005b64:	080085e7 	.word	0x080085e7

08005b68 <_free_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d041      	beq.n	8005bf4 <_free_r+0x8c>
 8005b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b74:	1f0c      	subs	r4, r1, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfb8      	it	lt
 8005b7a:	18e4      	addlt	r4, r4, r3
 8005b7c:	f000 f8e8 	bl	8005d50 <__malloc_lock>
 8005b80:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf8 <_free_r+0x90>)
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x2c>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b90:	f000 b8e4 	b.w	8005d5c <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x42>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	1821      	adds	r1, r4, r0
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1809      	addeq	r1, r1, r0
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x1e>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x4c>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x42>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1850      	adds	r0, r2, r1
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x6c>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	1850      	adds	r0, r2, r1
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x22>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	4408      	add	r0, r1
 8005bd0:	6010      	str	r0, [r2, #0]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x22>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x74>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x22>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	1821      	adds	r1, r4, r0
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1809      	addeq	r1, r1, r0
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7ca      	b.n	8005b8a <_free_r+0x22>
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20004de4 	.word	0x20004de4

08005bfc <malloc>:
 8005bfc:	4b02      	ldr	r3, [pc, #8]	@ (8005c08 <malloc+0xc>)
 8005bfe:	4601      	mov	r1, r0
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	f000 b825 	b.w	8005c50 <_malloc_r>
 8005c06:	bf00      	nop
 8005c08:	2000001c 	.word	0x2000001c

08005c0c <sbrk_aligned>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c4c <sbrk_aligned+0x40>)
 8005c10:	460c      	mov	r4, r1
 8005c12:	6831      	ldr	r1, [r6, #0]
 8005c14:	4605      	mov	r5, r0
 8005c16:	b911      	cbnz	r1, 8005c1e <sbrk_aligned+0x12>
 8005c18:	f001 fe04 	bl	8007824 <_sbrk_r>
 8005c1c:	6030      	str	r0, [r6, #0]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f001 fdff 	bl	8007824 <_sbrk_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d103      	bne.n	8005c32 <sbrk_aligned+0x26>
 8005c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2e:	4620      	mov	r0, r4
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	1cc4      	adds	r4, r0, #3
 8005c34:	f024 0403 	bic.w	r4, r4, #3
 8005c38:	42a0      	cmp	r0, r4
 8005c3a:	d0f8      	beq.n	8005c2e <sbrk_aligned+0x22>
 8005c3c:	1a21      	subs	r1, r4, r0
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f001 fdf0 	bl	8007824 <_sbrk_r>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d1f2      	bne.n	8005c2e <sbrk_aligned+0x22>
 8005c48:	e7ef      	b.n	8005c2a <sbrk_aligned+0x1e>
 8005c4a:	bf00      	nop
 8005c4c:	20004de0 	.word	0x20004de0

08005c50 <_malloc_r>:
 8005c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c54:	1ccd      	adds	r5, r1, #3
 8005c56:	f025 0503 	bic.w	r5, r5, #3
 8005c5a:	3508      	adds	r5, #8
 8005c5c:	2d0c      	cmp	r5, #12
 8005c5e:	bf38      	it	cc
 8005c60:	250c      	movcc	r5, #12
 8005c62:	2d00      	cmp	r5, #0
 8005c64:	4606      	mov	r6, r0
 8005c66:	db01      	blt.n	8005c6c <_malloc_r+0x1c>
 8005c68:	42a9      	cmp	r1, r5
 8005c6a:	d904      	bls.n	8005c76 <_malloc_r+0x26>
 8005c6c:	230c      	movs	r3, #12
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d4c <_malloc_r+0xfc>
 8005c7a:	f000 f869 	bl	8005d50 <__malloc_lock>
 8005c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c82:	461c      	mov	r4, r3
 8005c84:	bb44      	cbnz	r4, 8005cd8 <_malloc_r+0x88>
 8005c86:	4629      	mov	r1, r5
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbf 	bl	8005c0c <sbrk_aligned>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	4604      	mov	r4, r0
 8005c92:	d158      	bne.n	8005d46 <_malloc_r+0xf6>
 8005c94:	f8d8 4000 	ldr.w	r4, [r8]
 8005c98:	4627      	mov	r7, r4
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	d143      	bne.n	8005d26 <_malloc_r+0xd6>
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	d04b      	beq.n	8005d3a <_malloc_r+0xea>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	eb04 0903 	add.w	r9, r4, r3
 8005cac:	f001 fdba 	bl	8007824 <_sbrk_r>
 8005cb0:	4581      	cmp	r9, r0
 8005cb2:	d142      	bne.n	8005d3a <_malloc_r+0xea>
 8005cb4:	6821      	ldr	r1, [r4, #0]
 8005cb6:	1a6d      	subs	r5, r5, r1
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7ff ffa6 	bl	8005c0c <sbrk_aligned>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d03a      	beq.n	8005d3a <_malloc_r+0xea>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	442b      	add	r3, r5
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	f8d8 3000 	ldr.w	r3, [r8]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	bb62      	cbnz	r2, 8005d2c <_malloc_r+0xdc>
 8005cd2:	f8c8 7000 	str.w	r7, [r8]
 8005cd6:	e00f      	b.n	8005cf8 <_malloc_r+0xa8>
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	1b52      	subs	r2, r2, r5
 8005cdc:	d420      	bmi.n	8005d20 <_malloc_r+0xd0>
 8005cde:	2a0b      	cmp	r2, #11
 8005ce0:	d917      	bls.n	8005d12 <_malloc_r+0xc2>
 8005ce2:	1961      	adds	r1, r4, r5
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	bf18      	it	ne
 8005cea:	6059      	strne	r1, [r3, #4]
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	bf08      	it	eq
 8005cf0:	f8c8 1000 	streq.w	r1, [r8]
 8005cf4:	5162      	str	r2, [r4, r5]
 8005cf6:	604b      	str	r3, [r1, #4]
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f82f 	bl	8005d5c <__malloc_unlock>
 8005cfe:	f104 000b 	add.w	r0, r4, #11
 8005d02:	1d23      	adds	r3, r4, #4
 8005d04:	f020 0007 	bic.w	r0, r0, #7
 8005d08:	1ac2      	subs	r2, r0, r3
 8005d0a:	bf1c      	itt	ne
 8005d0c:	1a1b      	subne	r3, r3, r0
 8005d0e:	50a3      	strne	r3, [r4, r2]
 8005d10:	e7af      	b.n	8005c72 <_malloc_r+0x22>
 8005d12:	6862      	ldr	r2, [r4, #4]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	bf0c      	ite	eq
 8005d18:	f8c8 2000 	streq.w	r2, [r8]
 8005d1c:	605a      	strne	r2, [r3, #4]
 8005d1e:	e7eb      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d20:	4623      	mov	r3, r4
 8005d22:	6864      	ldr	r4, [r4, #4]
 8005d24:	e7ae      	b.n	8005c84 <_malloc_r+0x34>
 8005d26:	463c      	mov	r4, r7
 8005d28:	687f      	ldr	r7, [r7, #4]
 8005d2a:	e7b6      	b.n	8005c9a <_malloc_r+0x4a>
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	d1fb      	bne.n	8005d2c <_malloc_r+0xdc>
 8005d34:	2300      	movs	r3, #0
 8005d36:	6053      	str	r3, [r2, #4]
 8005d38:	e7de      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 f80c 	bl	8005d5c <__malloc_unlock>
 8005d44:	e794      	b.n	8005c70 <_malloc_r+0x20>
 8005d46:	6005      	str	r5, [r0, #0]
 8005d48:	e7d6      	b.n	8005cf8 <_malloc_r+0xa8>
 8005d4a:	bf00      	nop
 8005d4c:	20004de4 	.word	0x20004de4

08005d50 <__malloc_lock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	@ (8005d58 <__malloc_lock+0x8>)
 8005d52:	f7ff b89a 	b.w	8004e8a <__retarget_lock_acquire_recursive>
 8005d56:	bf00      	nop
 8005d58:	20004ddc 	.word	0x20004ddc

08005d5c <__malloc_unlock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	@ (8005d64 <__malloc_unlock+0x8>)
 8005d5e:	f7ff b895 	b.w	8004e8c <__retarget_lock_release_recursive>
 8005d62:	bf00      	nop
 8005d64:	20004ddc 	.word	0x20004ddc

08005d68 <_Balloc>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	69c6      	ldr	r6, [r0, #28]
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	b976      	cbnz	r6, 8005d90 <_Balloc+0x28>
 8005d72:	2010      	movs	r0, #16
 8005d74:	f7ff ff42 	bl	8005bfc <malloc>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	61e0      	str	r0, [r4, #28]
 8005d7c:	b920      	cbnz	r0, 8005d88 <_Balloc+0x20>
 8005d7e:	4b18      	ldr	r3, [pc, #96]	@ (8005de0 <_Balloc+0x78>)
 8005d80:	4818      	ldr	r0, [pc, #96]	@ (8005de4 <_Balloc+0x7c>)
 8005d82:	216b      	movs	r1, #107	@ 0x6b
 8005d84:	f001 fd68 	bl	8007858 <__assert_func>
 8005d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d8c:	6006      	str	r6, [r0, #0]
 8005d8e:	60c6      	str	r6, [r0, #12]
 8005d90:	69e6      	ldr	r6, [r4, #28]
 8005d92:	68f3      	ldr	r3, [r6, #12]
 8005d94:	b183      	cbz	r3, 8005db8 <_Balloc+0x50>
 8005d96:	69e3      	ldr	r3, [r4, #28]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d9e:	b9b8      	cbnz	r0, 8005dd0 <_Balloc+0x68>
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f605 	lsl.w	r6, r1, r5
 8005da6:	1d72      	adds	r2, r6, #5
 8005da8:	0092      	lsls	r2, r2, #2
 8005daa:	4620      	mov	r0, r4
 8005dac:	f001 fd72 	bl	8007894 <_calloc_r>
 8005db0:	b160      	cbz	r0, 8005dcc <_Balloc+0x64>
 8005db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005db6:	e00e      	b.n	8005dd6 <_Balloc+0x6e>
 8005db8:	2221      	movs	r2, #33	@ 0x21
 8005dba:	2104      	movs	r1, #4
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f001 fd69 	bl	8007894 <_calloc_r>
 8005dc2:	69e3      	ldr	r3, [r4, #28]
 8005dc4:	60f0      	str	r0, [r6, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e4      	bne.n	8005d96 <_Balloc+0x2e>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	6802      	ldr	r2, [r0, #0]
 8005dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ddc:	e7f7      	b.n	8005dce <_Balloc+0x66>
 8005dde:	bf00      	nop
 8005de0:	080085f4 	.word	0x080085f4
 8005de4:	08008674 	.word	0x08008674

08005de8 <_Bfree>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	69c6      	ldr	r6, [r0, #28]
 8005dec:	4605      	mov	r5, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	b976      	cbnz	r6, 8005e10 <_Bfree+0x28>
 8005df2:	2010      	movs	r0, #16
 8005df4:	f7ff ff02 	bl	8005bfc <malloc>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	61e8      	str	r0, [r5, #28]
 8005dfc:	b920      	cbnz	r0, 8005e08 <_Bfree+0x20>
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <_Bfree+0x3c>)
 8005e00:	4809      	ldr	r0, [pc, #36]	@ (8005e28 <_Bfree+0x40>)
 8005e02:	218f      	movs	r1, #143	@ 0x8f
 8005e04:	f001 fd28 	bl	8007858 <__assert_func>
 8005e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e0c:	6006      	str	r6, [r0, #0]
 8005e0e:	60c6      	str	r6, [r0, #12]
 8005e10:	b13c      	cbz	r4, 8005e22 <_Bfree+0x3a>
 8005e12:	69eb      	ldr	r3, [r5, #28]
 8005e14:	6862      	ldr	r2, [r4, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e1c:	6021      	str	r1, [r4, #0]
 8005e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	080085f4 	.word	0x080085f4
 8005e28:	08008674 	.word	0x08008674

08005e2c <__multadd>:
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	690d      	ldr	r5, [r1, #16]
 8005e32:	4607      	mov	r7, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	461e      	mov	r6, r3
 8005e38:	f101 0c14 	add.w	ip, r1, #20
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e42:	b299      	uxth	r1, r3
 8005e44:	fb02 6101 	mla	r1, r2, r1, r6
 8005e48:	0c1e      	lsrs	r6, r3, #16
 8005e4a:	0c0b      	lsrs	r3, r1, #16
 8005e4c:	fb02 3306 	mla	r3, r2, r6, r3
 8005e50:	b289      	uxth	r1, r1
 8005e52:	3001      	adds	r0, #1
 8005e54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e58:	4285      	cmp	r5, r0
 8005e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e62:	dcec      	bgt.n	8005e3e <__multadd+0x12>
 8005e64:	b30e      	cbz	r6, 8005eaa <__multadd+0x7e>
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	dc19      	bgt.n	8005ea0 <__multadd+0x74>
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4638      	mov	r0, r7
 8005e70:	3101      	adds	r1, #1
 8005e72:	f7ff ff79 	bl	8005d68 <_Balloc>
 8005e76:	4680      	mov	r8, r0
 8005e78:	b928      	cbnz	r0, 8005e86 <__multadd+0x5a>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <__multadd+0x84>)
 8005e7e:	480d      	ldr	r0, [pc, #52]	@ (8005eb4 <__multadd+0x88>)
 8005e80:	21ba      	movs	r1, #186	@ 0xba
 8005e82:	f001 fce9 	bl	8007858 <__assert_func>
 8005e86:	6922      	ldr	r2, [r4, #16]
 8005e88:	3202      	adds	r2, #2
 8005e8a:	f104 010c 	add.w	r1, r4, #12
 8005e8e:	0092      	lsls	r2, r2, #2
 8005e90:	300c      	adds	r0, #12
 8005e92:	f7fe fffc 	bl	8004e8e <memcpy>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa5 	bl	8005de8 <_Bfree>
 8005e9e:	4644      	mov	r4, r8
 8005ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	615e      	str	r6, [r3, #20]
 8005ea8:	6125      	str	r5, [r4, #16]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	08008663 	.word	0x08008663
 8005eb4:	08008674 	.word	0x08008674

08005eb8 <__s2b>:
 8005eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4615      	mov	r5, r2
 8005ec0:	461f      	mov	r7, r3
 8005ec2:	2209      	movs	r2, #9
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ecc:	2100      	movs	r1, #0
 8005ece:	2201      	movs	r2, #1
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	db09      	blt.n	8005ee8 <__s2b+0x30>
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f7ff ff47 	bl	8005d68 <_Balloc>
 8005eda:	b940      	cbnz	r0, 8005eee <__s2b+0x36>
 8005edc:	4602      	mov	r2, r0
 8005ede:	4b19      	ldr	r3, [pc, #100]	@ (8005f44 <__s2b+0x8c>)
 8005ee0:	4819      	ldr	r0, [pc, #100]	@ (8005f48 <__s2b+0x90>)
 8005ee2:	21d3      	movs	r1, #211	@ 0xd3
 8005ee4:	f001 fcb8 	bl	8007858 <__assert_func>
 8005ee8:	0052      	lsls	r2, r2, #1
 8005eea:	3101      	adds	r1, #1
 8005eec:	e7f0      	b.n	8005ed0 <__s2b+0x18>
 8005eee:	9b08      	ldr	r3, [sp, #32]
 8005ef0:	6143      	str	r3, [r0, #20]
 8005ef2:	2d09      	cmp	r5, #9
 8005ef4:	f04f 0301 	mov.w	r3, #1
 8005ef8:	6103      	str	r3, [r0, #16]
 8005efa:	dd16      	ble.n	8005f2a <__s2b+0x72>
 8005efc:	f104 0909 	add.w	r9, r4, #9
 8005f00:	46c8      	mov	r8, r9
 8005f02:	442c      	add	r4, r5
 8005f04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f08:	4601      	mov	r1, r0
 8005f0a:	3b30      	subs	r3, #48	@ 0x30
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ff8c 	bl	8005e2c <__multadd>
 8005f14:	45a0      	cmp	r8, r4
 8005f16:	d1f5      	bne.n	8005f04 <__s2b+0x4c>
 8005f18:	f1a5 0408 	sub.w	r4, r5, #8
 8005f1c:	444c      	add	r4, r9
 8005f1e:	1b2d      	subs	r5, r5, r4
 8005f20:	1963      	adds	r3, r4, r5
 8005f22:	42bb      	cmp	r3, r7
 8005f24:	db04      	blt.n	8005f30 <__s2b+0x78>
 8005f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	340a      	adds	r4, #10
 8005f2c:	2509      	movs	r5, #9
 8005f2e:	e7f6      	b.n	8005f1e <__s2b+0x66>
 8005f30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f34:	4601      	mov	r1, r0
 8005f36:	3b30      	subs	r3, #48	@ 0x30
 8005f38:	220a      	movs	r2, #10
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ff76 	bl	8005e2c <__multadd>
 8005f40:	e7ee      	b.n	8005f20 <__s2b+0x68>
 8005f42:	bf00      	nop
 8005f44:	08008663 	.word	0x08008663
 8005f48:	08008674 	.word	0x08008674

08005f4c <__hi0bits>:
 8005f4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f50:	4603      	mov	r3, r0
 8005f52:	bf36      	itet	cc
 8005f54:	0403      	lslcc	r3, r0, #16
 8005f56:	2000      	movcs	r0, #0
 8005f58:	2010      	movcc	r0, #16
 8005f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f5e:	bf3c      	itt	cc
 8005f60:	021b      	lslcc	r3, r3, #8
 8005f62:	3008      	addcc	r0, #8
 8005f64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f68:	bf3c      	itt	cc
 8005f6a:	011b      	lslcc	r3, r3, #4
 8005f6c:	3004      	addcc	r0, #4
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f72:	bf3c      	itt	cc
 8005f74:	009b      	lslcc	r3, r3, #2
 8005f76:	3002      	addcc	r0, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db05      	blt.n	8005f88 <__hi0bits+0x3c>
 8005f7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f80:	f100 0001 	add.w	r0, r0, #1
 8005f84:	bf08      	it	eq
 8005f86:	2020      	moveq	r0, #32
 8005f88:	4770      	bx	lr

08005f8a <__lo0bits>:
 8005f8a:	6803      	ldr	r3, [r0, #0]
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	f013 0007 	ands.w	r0, r3, #7
 8005f92:	d00b      	beq.n	8005fac <__lo0bits+0x22>
 8005f94:	07d9      	lsls	r1, r3, #31
 8005f96:	d421      	bmi.n	8005fdc <__lo0bits+0x52>
 8005f98:	0798      	lsls	r0, r3, #30
 8005f9a:	bf49      	itett	mi
 8005f9c:	085b      	lsrmi	r3, r3, #1
 8005f9e:	089b      	lsrpl	r3, r3, #2
 8005fa0:	2001      	movmi	r0, #1
 8005fa2:	6013      	strmi	r3, [r2, #0]
 8005fa4:	bf5c      	itt	pl
 8005fa6:	6013      	strpl	r3, [r2, #0]
 8005fa8:	2002      	movpl	r0, #2
 8005faa:	4770      	bx	lr
 8005fac:	b299      	uxth	r1, r3
 8005fae:	b909      	cbnz	r1, 8005fb4 <__lo0bits+0x2a>
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	b2d9      	uxtb	r1, r3
 8005fb6:	b909      	cbnz	r1, 8005fbc <__lo0bits+0x32>
 8005fb8:	3008      	adds	r0, #8
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	0719      	lsls	r1, r3, #28
 8005fbe:	bf04      	itt	eq
 8005fc0:	091b      	lsreq	r3, r3, #4
 8005fc2:	3004      	addeq	r0, #4
 8005fc4:	0799      	lsls	r1, r3, #30
 8005fc6:	bf04      	itt	eq
 8005fc8:	089b      	lsreq	r3, r3, #2
 8005fca:	3002      	addeq	r0, #2
 8005fcc:	07d9      	lsls	r1, r3, #31
 8005fce:	d403      	bmi.n	8005fd8 <__lo0bits+0x4e>
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	f100 0001 	add.w	r0, r0, #1
 8005fd6:	d003      	beq.n	8005fe0 <__lo0bits+0x56>
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4770      	bx	lr
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4770      	bx	lr
 8005fe0:	2020      	movs	r0, #32
 8005fe2:	4770      	bx	lr

08005fe4 <__i2b>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	2101      	movs	r1, #1
 8005fea:	f7ff febd 	bl	8005d68 <_Balloc>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	b928      	cbnz	r0, 8005ffe <__i2b+0x1a>
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <__i2b+0x24>)
 8005ff4:	4805      	ldr	r0, [pc, #20]	@ (800600c <__i2b+0x28>)
 8005ff6:	f240 1145 	movw	r1, #325	@ 0x145
 8005ffa:	f001 fc2d 	bl	8007858 <__assert_func>
 8005ffe:	2301      	movs	r3, #1
 8006000:	6144      	str	r4, [r0, #20]
 8006002:	6103      	str	r3, [r0, #16]
 8006004:	bd10      	pop	{r4, pc}
 8006006:	bf00      	nop
 8006008:	08008663 	.word	0x08008663
 800600c:	08008674 	.word	0x08008674

08006010 <__multiply>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	4617      	mov	r7, r2
 8006016:	690a      	ldr	r2, [r1, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	429a      	cmp	r2, r3
 800601c:	bfa8      	it	ge
 800601e:	463b      	movge	r3, r7
 8006020:	4689      	mov	r9, r1
 8006022:	bfa4      	itt	ge
 8006024:	460f      	movge	r7, r1
 8006026:	4699      	movge	r9, r3
 8006028:	693d      	ldr	r5, [r7, #16]
 800602a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	eb05 060a 	add.w	r6, r5, sl
 8006036:	42b3      	cmp	r3, r6
 8006038:	b085      	sub	sp, #20
 800603a:	bfb8      	it	lt
 800603c:	3101      	addlt	r1, #1
 800603e:	f7ff fe93 	bl	8005d68 <_Balloc>
 8006042:	b930      	cbnz	r0, 8006052 <__multiply+0x42>
 8006044:	4602      	mov	r2, r0
 8006046:	4b41      	ldr	r3, [pc, #260]	@ (800614c <__multiply+0x13c>)
 8006048:	4841      	ldr	r0, [pc, #260]	@ (8006150 <__multiply+0x140>)
 800604a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800604e:	f001 fc03 	bl	8007858 <__assert_func>
 8006052:	f100 0414 	add.w	r4, r0, #20
 8006056:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800605a:	4623      	mov	r3, r4
 800605c:	2200      	movs	r2, #0
 800605e:	4573      	cmp	r3, lr
 8006060:	d320      	bcc.n	80060a4 <__multiply+0x94>
 8006062:	f107 0814 	add.w	r8, r7, #20
 8006066:	f109 0114 	add.w	r1, r9, #20
 800606a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800606e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006072:	9302      	str	r3, [sp, #8]
 8006074:	1beb      	subs	r3, r5, r7
 8006076:	3b15      	subs	r3, #21
 8006078:	f023 0303 	bic.w	r3, r3, #3
 800607c:	3304      	adds	r3, #4
 800607e:	3715      	adds	r7, #21
 8006080:	42bd      	cmp	r5, r7
 8006082:	bf38      	it	cc
 8006084:	2304      	movcc	r3, #4
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	9103      	str	r1, [sp, #12]
 800608c:	428b      	cmp	r3, r1
 800608e:	d80c      	bhi.n	80060aa <__multiply+0x9a>
 8006090:	2e00      	cmp	r6, #0
 8006092:	dd03      	ble.n	800609c <__multiply+0x8c>
 8006094:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006098:	2b00      	cmp	r3, #0
 800609a:	d055      	beq.n	8006148 <__multiply+0x138>
 800609c:	6106      	str	r6, [r0, #16]
 800609e:	b005      	add	sp, #20
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	f843 2b04 	str.w	r2, [r3], #4
 80060a8:	e7d9      	b.n	800605e <__multiply+0x4e>
 80060aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80060ae:	f1ba 0f00 	cmp.w	sl, #0
 80060b2:	d01f      	beq.n	80060f4 <__multiply+0xe4>
 80060b4:	46c4      	mov	ip, r8
 80060b6:	46a1      	mov	r9, r4
 80060b8:	2700      	movs	r7, #0
 80060ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060be:	f8d9 3000 	ldr.w	r3, [r9]
 80060c2:	fa1f fb82 	uxth.w	fp, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80060cc:	443b      	add	r3, r7
 80060ce:	f8d9 7000 	ldr.w	r7, [r9]
 80060d2:	0c12      	lsrs	r2, r2, #16
 80060d4:	0c3f      	lsrs	r7, r7, #16
 80060d6:	fb0a 7202 	mla	r2, sl, r2, r7
 80060da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060e4:	4565      	cmp	r5, ip
 80060e6:	f849 3b04 	str.w	r3, [r9], #4
 80060ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80060ee:	d8e4      	bhi.n	80060ba <__multiply+0xaa>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	50e7      	str	r7, [r4, r3]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060fa:	3104      	adds	r1, #4
 80060fc:	f1b9 0f00 	cmp.w	r9, #0
 8006100:	d020      	beq.n	8006144 <__multiply+0x134>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	4647      	mov	r7, r8
 8006106:	46a4      	mov	ip, r4
 8006108:	f04f 0a00 	mov.w	sl, #0
 800610c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006110:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006114:	fb09 220b 	mla	r2, r9, fp, r2
 8006118:	4452      	add	r2, sl
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006120:	f84c 3b04 	str.w	r3, [ip], #4
 8006124:	f857 3b04 	ldr.w	r3, [r7], #4
 8006128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800612c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006130:	fb09 330a 	mla	r3, r9, sl, r3
 8006134:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006138:	42bd      	cmp	r5, r7
 800613a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800613e:	d8e5      	bhi.n	800610c <__multiply+0xfc>
 8006140:	9a01      	ldr	r2, [sp, #4]
 8006142:	50a3      	str	r3, [r4, r2]
 8006144:	3404      	adds	r4, #4
 8006146:	e79f      	b.n	8006088 <__multiply+0x78>
 8006148:	3e01      	subs	r6, #1
 800614a:	e7a1      	b.n	8006090 <__multiply+0x80>
 800614c:	08008663 	.word	0x08008663
 8006150:	08008674 	.word	0x08008674

08006154 <__pow5mult>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4615      	mov	r5, r2
 800615a:	f012 0203 	ands.w	r2, r2, #3
 800615e:	4607      	mov	r7, r0
 8006160:	460e      	mov	r6, r1
 8006162:	d007      	beq.n	8006174 <__pow5mult+0x20>
 8006164:	4c25      	ldr	r4, [pc, #148]	@ (80061fc <__pow5mult+0xa8>)
 8006166:	3a01      	subs	r2, #1
 8006168:	2300      	movs	r3, #0
 800616a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800616e:	f7ff fe5d 	bl	8005e2c <__multadd>
 8006172:	4606      	mov	r6, r0
 8006174:	10ad      	asrs	r5, r5, #2
 8006176:	d03d      	beq.n	80061f4 <__pow5mult+0xa0>
 8006178:	69fc      	ldr	r4, [r7, #28]
 800617a:	b97c      	cbnz	r4, 800619c <__pow5mult+0x48>
 800617c:	2010      	movs	r0, #16
 800617e:	f7ff fd3d 	bl	8005bfc <malloc>
 8006182:	4602      	mov	r2, r0
 8006184:	61f8      	str	r0, [r7, #28]
 8006186:	b928      	cbnz	r0, 8006194 <__pow5mult+0x40>
 8006188:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <__pow5mult+0xac>)
 800618a:	481e      	ldr	r0, [pc, #120]	@ (8006204 <__pow5mult+0xb0>)
 800618c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006190:	f001 fb62 	bl	8007858 <__assert_func>
 8006194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006198:	6004      	str	r4, [r0, #0]
 800619a:	60c4      	str	r4, [r0, #12]
 800619c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061a4:	b94c      	cbnz	r4, 80061ba <__pow5mult+0x66>
 80061a6:	f240 2171 	movw	r1, #625	@ 0x271
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ff1a 	bl	8005fe4 <__i2b>
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b6:	4604      	mov	r4, r0
 80061b8:	6003      	str	r3, [r0, #0]
 80061ba:	f04f 0900 	mov.w	r9, #0
 80061be:	07eb      	lsls	r3, r5, #31
 80061c0:	d50a      	bpl.n	80061d8 <__pow5mult+0x84>
 80061c2:	4631      	mov	r1, r6
 80061c4:	4622      	mov	r2, r4
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff ff22 	bl	8006010 <__multiply>
 80061cc:	4631      	mov	r1, r6
 80061ce:	4680      	mov	r8, r0
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff fe09 	bl	8005de8 <_Bfree>
 80061d6:	4646      	mov	r6, r8
 80061d8:	106d      	asrs	r5, r5, #1
 80061da:	d00b      	beq.n	80061f4 <__pow5mult+0xa0>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	b938      	cbnz	r0, 80061f0 <__pow5mult+0x9c>
 80061e0:	4622      	mov	r2, r4
 80061e2:	4621      	mov	r1, r4
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ff13 	bl	8006010 <__multiply>
 80061ea:	6020      	str	r0, [r4, #0]
 80061ec:	f8c0 9000 	str.w	r9, [r0]
 80061f0:	4604      	mov	r4, r0
 80061f2:	e7e4      	b.n	80061be <__pow5mult+0x6a>
 80061f4:	4630      	mov	r0, r6
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fa:	bf00      	nop
 80061fc:	0800879c 	.word	0x0800879c
 8006200:	080085f4 	.word	0x080085f4
 8006204:	08008674 	.word	0x08008674

08006208 <__lshift>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	6849      	ldr	r1, [r1, #4]
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	4607      	mov	r7, r0
 800621a:	4691      	mov	r9, r2
 800621c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006220:	f108 0601 	add.w	r6, r8, #1
 8006224:	42b3      	cmp	r3, r6
 8006226:	db0b      	blt.n	8006240 <__lshift+0x38>
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff fd9d 	bl	8005d68 <_Balloc>
 800622e:	4605      	mov	r5, r0
 8006230:	b948      	cbnz	r0, 8006246 <__lshift+0x3e>
 8006232:	4602      	mov	r2, r0
 8006234:	4b28      	ldr	r3, [pc, #160]	@ (80062d8 <__lshift+0xd0>)
 8006236:	4829      	ldr	r0, [pc, #164]	@ (80062dc <__lshift+0xd4>)
 8006238:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800623c:	f001 fb0c 	bl	8007858 <__assert_func>
 8006240:	3101      	adds	r1, #1
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	e7ee      	b.n	8006224 <__lshift+0x1c>
 8006246:	2300      	movs	r3, #0
 8006248:	f100 0114 	add.w	r1, r0, #20
 800624c:	f100 0210 	add.w	r2, r0, #16
 8006250:	4618      	mov	r0, r3
 8006252:	4553      	cmp	r3, sl
 8006254:	db33      	blt.n	80062be <__lshift+0xb6>
 8006256:	6920      	ldr	r0, [r4, #16]
 8006258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800625c:	f104 0314 	add.w	r3, r4, #20
 8006260:	f019 091f 	ands.w	r9, r9, #31
 8006264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800626c:	d02b      	beq.n	80062c6 <__lshift+0xbe>
 800626e:	f1c9 0e20 	rsb	lr, r9, #32
 8006272:	468a      	mov	sl, r1
 8006274:	2200      	movs	r2, #0
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	fa00 f009 	lsl.w	r0, r0, r9
 800627c:	4310      	orrs	r0, r2
 800627e:	f84a 0b04 	str.w	r0, [sl], #4
 8006282:	f853 2b04 	ldr.w	r2, [r3], #4
 8006286:	459c      	cmp	ip, r3
 8006288:	fa22 f20e 	lsr.w	r2, r2, lr
 800628c:	d8f3      	bhi.n	8006276 <__lshift+0x6e>
 800628e:	ebac 0304 	sub.w	r3, ip, r4
 8006292:	3b15      	subs	r3, #21
 8006294:	f023 0303 	bic.w	r3, r3, #3
 8006298:	3304      	adds	r3, #4
 800629a:	f104 0015 	add.w	r0, r4, #21
 800629e:	4560      	cmp	r0, ip
 80062a0:	bf88      	it	hi
 80062a2:	2304      	movhi	r3, #4
 80062a4:	50ca      	str	r2, [r1, r3]
 80062a6:	b10a      	cbz	r2, 80062ac <__lshift+0xa4>
 80062a8:	f108 0602 	add.w	r6, r8, #2
 80062ac:	3e01      	subs	r6, #1
 80062ae:	4638      	mov	r0, r7
 80062b0:	612e      	str	r6, [r5, #16]
 80062b2:	4621      	mov	r1, r4
 80062b4:	f7ff fd98 	bl	8005de8 <_Bfree>
 80062b8:	4628      	mov	r0, r5
 80062ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062be:	f842 0f04 	str.w	r0, [r2, #4]!
 80062c2:	3301      	adds	r3, #1
 80062c4:	e7c5      	b.n	8006252 <__lshift+0x4a>
 80062c6:	3904      	subs	r1, #4
 80062c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80062d0:	459c      	cmp	ip, r3
 80062d2:	d8f9      	bhi.n	80062c8 <__lshift+0xc0>
 80062d4:	e7ea      	b.n	80062ac <__lshift+0xa4>
 80062d6:	bf00      	nop
 80062d8:	08008663 	.word	0x08008663
 80062dc:	08008674 	.word	0x08008674

080062e0 <__mcmp>:
 80062e0:	690a      	ldr	r2, [r1, #16]
 80062e2:	4603      	mov	r3, r0
 80062e4:	6900      	ldr	r0, [r0, #16]
 80062e6:	1a80      	subs	r0, r0, r2
 80062e8:	b530      	push	{r4, r5, lr}
 80062ea:	d10e      	bne.n	800630a <__mcmp+0x2a>
 80062ec:	3314      	adds	r3, #20
 80062ee:	3114      	adds	r1, #20
 80062f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006300:	4295      	cmp	r5, r2
 8006302:	d003      	beq.n	800630c <__mcmp+0x2c>
 8006304:	d205      	bcs.n	8006312 <__mcmp+0x32>
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	bd30      	pop	{r4, r5, pc}
 800630c:	42a3      	cmp	r3, r4
 800630e:	d3f3      	bcc.n	80062f8 <__mcmp+0x18>
 8006310:	e7fb      	b.n	800630a <__mcmp+0x2a>
 8006312:	2001      	movs	r0, #1
 8006314:	e7f9      	b.n	800630a <__mcmp+0x2a>
	...

08006318 <__mdiff>:
 8006318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	4689      	mov	r9, r1
 800631e:	4606      	mov	r6, r0
 8006320:	4611      	mov	r1, r2
 8006322:	4648      	mov	r0, r9
 8006324:	4614      	mov	r4, r2
 8006326:	f7ff ffdb 	bl	80062e0 <__mcmp>
 800632a:	1e05      	subs	r5, r0, #0
 800632c:	d112      	bne.n	8006354 <__mdiff+0x3c>
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff fd19 	bl	8005d68 <_Balloc>
 8006336:	4602      	mov	r2, r0
 8006338:	b928      	cbnz	r0, 8006346 <__mdiff+0x2e>
 800633a:	4b3f      	ldr	r3, [pc, #252]	@ (8006438 <__mdiff+0x120>)
 800633c:	f240 2137 	movw	r1, #567	@ 0x237
 8006340:	483e      	ldr	r0, [pc, #248]	@ (800643c <__mdiff+0x124>)
 8006342:	f001 fa89 	bl	8007858 <__assert_func>
 8006346:	2301      	movs	r3, #1
 8006348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800634c:	4610      	mov	r0, r2
 800634e:	b003      	add	sp, #12
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	bfbc      	itt	lt
 8006356:	464b      	movlt	r3, r9
 8006358:	46a1      	movlt	r9, r4
 800635a:	4630      	mov	r0, r6
 800635c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006360:	bfba      	itte	lt
 8006362:	461c      	movlt	r4, r3
 8006364:	2501      	movlt	r5, #1
 8006366:	2500      	movge	r5, #0
 8006368:	f7ff fcfe 	bl	8005d68 <_Balloc>
 800636c:	4602      	mov	r2, r0
 800636e:	b918      	cbnz	r0, 8006378 <__mdiff+0x60>
 8006370:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <__mdiff+0x120>)
 8006372:	f240 2145 	movw	r1, #581	@ 0x245
 8006376:	e7e3      	b.n	8006340 <__mdiff+0x28>
 8006378:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800637c:	6926      	ldr	r6, [r4, #16]
 800637e:	60c5      	str	r5, [r0, #12]
 8006380:	f109 0310 	add.w	r3, r9, #16
 8006384:	f109 0514 	add.w	r5, r9, #20
 8006388:	f104 0e14 	add.w	lr, r4, #20
 800638c:	f100 0b14 	add.w	fp, r0, #20
 8006390:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006394:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	46d9      	mov	r9, fp
 800639c:	f04f 0c00 	mov.w	ip, #0
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	fa1f f38a 	uxth.w	r3, sl
 80063b0:	4619      	mov	r1, r3
 80063b2:	b283      	uxth	r3, r0
 80063b4:	1acb      	subs	r3, r1, r3
 80063b6:	0c00      	lsrs	r0, r0, #16
 80063b8:	4463      	add	r3, ip
 80063ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063c8:	4576      	cmp	r6, lr
 80063ca:	f849 3b04 	str.w	r3, [r9], #4
 80063ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063d2:	d8e5      	bhi.n	80063a0 <__mdiff+0x88>
 80063d4:	1b33      	subs	r3, r6, r4
 80063d6:	3b15      	subs	r3, #21
 80063d8:	f023 0303 	bic.w	r3, r3, #3
 80063dc:	3415      	adds	r4, #21
 80063de:	3304      	adds	r3, #4
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	bf38      	it	cc
 80063e4:	2304      	movcc	r3, #4
 80063e6:	441d      	add	r5, r3
 80063e8:	445b      	add	r3, fp
 80063ea:	461e      	mov	r6, r3
 80063ec:	462c      	mov	r4, r5
 80063ee:	4544      	cmp	r4, r8
 80063f0:	d30e      	bcc.n	8006410 <__mdiff+0xf8>
 80063f2:	f108 0103 	add.w	r1, r8, #3
 80063f6:	1b49      	subs	r1, r1, r5
 80063f8:	f021 0103 	bic.w	r1, r1, #3
 80063fc:	3d03      	subs	r5, #3
 80063fe:	45a8      	cmp	r8, r5
 8006400:	bf38      	it	cc
 8006402:	2100      	movcc	r1, #0
 8006404:	440b      	add	r3, r1
 8006406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800640a:	b191      	cbz	r1, 8006432 <__mdiff+0x11a>
 800640c:	6117      	str	r7, [r2, #16]
 800640e:	e79d      	b.n	800634c <__mdiff+0x34>
 8006410:	f854 1b04 	ldr.w	r1, [r4], #4
 8006414:	46e6      	mov	lr, ip
 8006416:	0c08      	lsrs	r0, r1, #16
 8006418:	fa1c fc81 	uxtah	ip, ip, r1
 800641c:	4471      	add	r1, lr
 800641e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006422:	b289      	uxth	r1, r1
 8006424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006428:	f846 1b04 	str.w	r1, [r6], #4
 800642c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006430:	e7dd      	b.n	80063ee <__mdiff+0xd6>
 8006432:	3f01      	subs	r7, #1
 8006434:	e7e7      	b.n	8006406 <__mdiff+0xee>
 8006436:	bf00      	nop
 8006438:	08008663 	.word	0x08008663
 800643c:	08008674 	.word	0x08008674

08006440 <__ulp>:
 8006440:	b082      	sub	sp, #8
 8006442:	ed8d 0b00 	vstr	d0, [sp]
 8006446:	9a01      	ldr	r2, [sp, #4]
 8006448:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <__ulp+0x48>)
 800644a:	4013      	ands	r3, r2
 800644c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006450:	2b00      	cmp	r3, #0
 8006452:	dc08      	bgt.n	8006466 <__ulp+0x26>
 8006454:	425b      	negs	r3, r3
 8006456:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800645a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800645e:	da04      	bge.n	800646a <__ulp+0x2a>
 8006460:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006464:	4113      	asrs	r3, r2
 8006466:	2200      	movs	r2, #0
 8006468:	e008      	b.n	800647c <__ulp+0x3c>
 800646a:	f1a2 0314 	sub.w	r3, r2, #20
 800646e:	2b1e      	cmp	r3, #30
 8006470:	bfda      	itte	le
 8006472:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006476:	40da      	lsrle	r2, r3
 8006478:	2201      	movgt	r2, #1
 800647a:	2300      	movs	r3, #0
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	ec41 0b10 	vmov	d0, r0, r1
 8006484:	b002      	add	sp, #8
 8006486:	4770      	bx	lr
 8006488:	7ff00000 	.word	0x7ff00000

0800648c <__b2d>:
 800648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	6906      	ldr	r6, [r0, #16]
 8006492:	f100 0814 	add.w	r8, r0, #20
 8006496:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800649a:	1f37      	subs	r7, r6, #4
 800649c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064a0:	4610      	mov	r0, r2
 80064a2:	f7ff fd53 	bl	8005f4c <__hi0bits>
 80064a6:	f1c0 0320 	rsb	r3, r0, #32
 80064aa:	280a      	cmp	r0, #10
 80064ac:	600b      	str	r3, [r1, #0]
 80064ae:	491b      	ldr	r1, [pc, #108]	@ (800651c <__b2d+0x90>)
 80064b0:	dc15      	bgt.n	80064de <__b2d+0x52>
 80064b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80064b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80064ba:	45b8      	cmp	r8, r7
 80064bc:	ea43 0501 	orr.w	r5, r3, r1
 80064c0:	bf34      	ite	cc
 80064c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80064c6:	2300      	movcs	r3, #0
 80064c8:	3015      	adds	r0, #21
 80064ca:	fa02 f000 	lsl.w	r0, r2, r0
 80064ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80064d2:	4303      	orrs	r3, r0
 80064d4:	461c      	mov	r4, r3
 80064d6:	ec45 4b10 	vmov	d0, r4, r5
 80064da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064de:	45b8      	cmp	r8, r7
 80064e0:	bf3a      	itte	cc
 80064e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80064e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80064ea:	2300      	movcs	r3, #0
 80064ec:	380b      	subs	r0, #11
 80064ee:	d012      	beq.n	8006516 <__b2d+0x8a>
 80064f0:	f1c0 0120 	rsb	r1, r0, #32
 80064f4:	fa23 f401 	lsr.w	r4, r3, r1
 80064f8:	4082      	lsls	r2, r0
 80064fa:	4322      	orrs	r2, r4
 80064fc:	4547      	cmp	r7, r8
 80064fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006502:	bf8c      	ite	hi
 8006504:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006508:	2200      	movls	r2, #0
 800650a:	4083      	lsls	r3, r0
 800650c:	40ca      	lsrs	r2, r1
 800650e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006512:	4313      	orrs	r3, r2
 8006514:	e7de      	b.n	80064d4 <__b2d+0x48>
 8006516:	ea42 0501 	orr.w	r5, r2, r1
 800651a:	e7db      	b.n	80064d4 <__b2d+0x48>
 800651c:	3ff00000 	.word	0x3ff00000

08006520 <__d2b>:
 8006520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006524:	460f      	mov	r7, r1
 8006526:	2101      	movs	r1, #1
 8006528:	ec59 8b10 	vmov	r8, r9, d0
 800652c:	4616      	mov	r6, r2
 800652e:	f7ff fc1b 	bl	8005d68 <_Balloc>
 8006532:	4604      	mov	r4, r0
 8006534:	b930      	cbnz	r0, 8006544 <__d2b+0x24>
 8006536:	4602      	mov	r2, r0
 8006538:	4b23      	ldr	r3, [pc, #140]	@ (80065c8 <__d2b+0xa8>)
 800653a:	4824      	ldr	r0, [pc, #144]	@ (80065cc <__d2b+0xac>)
 800653c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006540:	f001 f98a 	bl	8007858 <__assert_func>
 8006544:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800654c:	b10d      	cbz	r5, 8006552 <__d2b+0x32>
 800654e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	f1b8 0300 	subs.w	r3, r8, #0
 8006558:	d023      	beq.n	80065a2 <__d2b+0x82>
 800655a:	4668      	mov	r0, sp
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	f7ff fd14 	bl	8005f8a <__lo0bits>
 8006562:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006566:	b1d0      	cbz	r0, 800659e <__d2b+0x7e>
 8006568:	f1c0 0320 	rsb	r3, r0, #32
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	430b      	orrs	r3, r1
 8006572:	40c2      	lsrs	r2, r0
 8006574:	6163      	str	r3, [r4, #20]
 8006576:	9201      	str	r2, [sp, #4]
 8006578:	9b01      	ldr	r3, [sp, #4]
 800657a:	61a3      	str	r3, [r4, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf0c      	ite	eq
 8006580:	2201      	moveq	r2, #1
 8006582:	2202      	movne	r2, #2
 8006584:	6122      	str	r2, [r4, #16]
 8006586:	b1a5      	cbz	r5, 80065b2 <__d2b+0x92>
 8006588:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800658c:	4405      	add	r5, r0
 800658e:	603d      	str	r5, [r7, #0]
 8006590:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006594:	6030      	str	r0, [r6, #0]
 8006596:	4620      	mov	r0, r4
 8006598:	b003      	add	sp, #12
 800659a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800659e:	6161      	str	r1, [r4, #20]
 80065a0:	e7ea      	b.n	8006578 <__d2b+0x58>
 80065a2:	a801      	add	r0, sp, #4
 80065a4:	f7ff fcf1 	bl	8005f8a <__lo0bits>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	6163      	str	r3, [r4, #20]
 80065ac:	3020      	adds	r0, #32
 80065ae:	2201      	movs	r2, #1
 80065b0:	e7e8      	b.n	8006584 <__d2b+0x64>
 80065b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80065ba:	6038      	str	r0, [r7, #0]
 80065bc:	6918      	ldr	r0, [r3, #16]
 80065be:	f7ff fcc5 	bl	8005f4c <__hi0bits>
 80065c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065c6:	e7e5      	b.n	8006594 <__d2b+0x74>
 80065c8:	08008663 	.word	0x08008663
 80065cc:	08008674 	.word	0x08008674

080065d0 <__ratio>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	b085      	sub	sp, #20
 80065d6:	e9cd 1000 	strd	r1, r0, [sp]
 80065da:	a902      	add	r1, sp, #8
 80065dc:	f7ff ff56 	bl	800648c <__b2d>
 80065e0:	9800      	ldr	r0, [sp, #0]
 80065e2:	a903      	add	r1, sp, #12
 80065e4:	ec55 4b10 	vmov	r4, r5, d0
 80065e8:	f7ff ff50 	bl	800648c <__b2d>
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	6919      	ldr	r1, [r3, #16]
 80065f0:	9b00      	ldr	r3, [sp, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	1ac9      	subs	r1, r1, r3
 80065f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	ec5b ab10 	vmov	sl, fp, d0
 8006600:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006604:	2b00      	cmp	r3, #0
 8006606:	bfce      	itee	gt
 8006608:	462a      	movgt	r2, r5
 800660a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800660e:	465a      	movle	r2, fp
 8006610:	462f      	mov	r7, r5
 8006612:	46d9      	mov	r9, fp
 8006614:	bfcc      	ite	gt
 8006616:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800661a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800661e:	464b      	mov	r3, r9
 8006620:	4652      	mov	r2, sl
 8006622:	4620      	mov	r0, r4
 8006624:	4639      	mov	r1, r7
 8006626:	f7fa f919 	bl	800085c <__aeabi_ddiv>
 800662a:	ec41 0b10 	vmov	d0, r0, r1
 800662e:	b005      	add	sp, #20
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006634 <__copybits>:
 8006634:	3901      	subs	r1, #1
 8006636:	b570      	push	{r4, r5, r6, lr}
 8006638:	1149      	asrs	r1, r1, #5
 800663a:	6914      	ldr	r4, [r2, #16]
 800663c:	3101      	adds	r1, #1
 800663e:	f102 0314 	add.w	r3, r2, #20
 8006642:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006646:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800664a:	1f05      	subs	r5, r0, #4
 800664c:	42a3      	cmp	r3, r4
 800664e:	d30c      	bcc.n	800666a <__copybits+0x36>
 8006650:	1aa3      	subs	r3, r4, r2
 8006652:	3b11      	subs	r3, #17
 8006654:	f023 0303 	bic.w	r3, r3, #3
 8006658:	3211      	adds	r2, #17
 800665a:	42a2      	cmp	r2, r4
 800665c:	bf88      	it	hi
 800665e:	2300      	movhi	r3, #0
 8006660:	4418      	add	r0, r3
 8006662:	2300      	movs	r3, #0
 8006664:	4288      	cmp	r0, r1
 8006666:	d305      	bcc.n	8006674 <__copybits+0x40>
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	f853 6b04 	ldr.w	r6, [r3], #4
 800666e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006672:	e7eb      	b.n	800664c <__copybits+0x18>
 8006674:	f840 3b04 	str.w	r3, [r0], #4
 8006678:	e7f4      	b.n	8006664 <__copybits+0x30>

0800667a <__any_on>:
 800667a:	f100 0214 	add.w	r2, r0, #20
 800667e:	6900      	ldr	r0, [r0, #16]
 8006680:	114b      	asrs	r3, r1, #5
 8006682:	4298      	cmp	r0, r3
 8006684:	b510      	push	{r4, lr}
 8006686:	db11      	blt.n	80066ac <__any_on+0x32>
 8006688:	dd0a      	ble.n	80066a0 <__any_on+0x26>
 800668a:	f011 011f 	ands.w	r1, r1, #31
 800668e:	d007      	beq.n	80066a0 <__any_on+0x26>
 8006690:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006694:	fa24 f001 	lsr.w	r0, r4, r1
 8006698:	fa00 f101 	lsl.w	r1, r0, r1
 800669c:	428c      	cmp	r4, r1
 800669e:	d10b      	bne.n	80066b8 <__any_on+0x3e>
 80066a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d803      	bhi.n	80066b0 <__any_on+0x36>
 80066a8:	2000      	movs	r0, #0
 80066aa:	bd10      	pop	{r4, pc}
 80066ac:	4603      	mov	r3, r0
 80066ae:	e7f7      	b.n	80066a0 <__any_on+0x26>
 80066b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d0f5      	beq.n	80066a4 <__any_on+0x2a>
 80066b8:	2001      	movs	r0, #1
 80066ba:	e7f6      	b.n	80066aa <__any_on+0x30>

080066bc <sulp>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	4604      	mov	r4, r0
 80066c0:	460d      	mov	r5, r1
 80066c2:	ec45 4b10 	vmov	d0, r4, r5
 80066c6:	4616      	mov	r6, r2
 80066c8:	f7ff feba 	bl	8006440 <__ulp>
 80066cc:	ec51 0b10 	vmov	r0, r1, d0
 80066d0:	b17e      	cbz	r6, 80066f2 <sulp+0x36>
 80066d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80066d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dd09      	ble.n	80066f2 <sulp+0x36>
 80066de:	051b      	lsls	r3, r3, #20
 80066e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80066e4:	2400      	movs	r4, #0
 80066e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80066ea:	4622      	mov	r2, r4
 80066ec:	462b      	mov	r3, r5
 80066ee:	f7f9 ff8b 	bl	8000608 <__aeabi_dmul>
 80066f2:	ec41 0b10 	vmov	d0, r0, r1
 80066f6:	bd70      	pop	{r4, r5, r6, pc}

080066f8 <_strtod_l>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	b09f      	sub	sp, #124	@ 0x7c
 80066fe:	460c      	mov	r4, r1
 8006700:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006702:	2200      	movs	r2, #0
 8006704:	921a      	str	r2, [sp, #104]	@ 0x68
 8006706:	9005      	str	r0, [sp, #20]
 8006708:	f04f 0a00 	mov.w	sl, #0
 800670c:	f04f 0b00 	mov.w	fp, #0
 8006710:	460a      	mov	r2, r1
 8006712:	9219      	str	r2, [sp, #100]	@ 0x64
 8006714:	7811      	ldrb	r1, [r2, #0]
 8006716:	292b      	cmp	r1, #43	@ 0x2b
 8006718:	d04a      	beq.n	80067b0 <_strtod_l+0xb8>
 800671a:	d838      	bhi.n	800678e <_strtod_l+0x96>
 800671c:	290d      	cmp	r1, #13
 800671e:	d832      	bhi.n	8006786 <_strtod_l+0x8e>
 8006720:	2908      	cmp	r1, #8
 8006722:	d832      	bhi.n	800678a <_strtod_l+0x92>
 8006724:	2900      	cmp	r1, #0
 8006726:	d03b      	beq.n	80067a0 <_strtod_l+0xa8>
 8006728:	2200      	movs	r2, #0
 800672a:	920e      	str	r2, [sp, #56]	@ 0x38
 800672c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800672e:	782a      	ldrb	r2, [r5, #0]
 8006730:	2a30      	cmp	r2, #48	@ 0x30
 8006732:	f040 80b2 	bne.w	800689a <_strtod_l+0x1a2>
 8006736:	786a      	ldrb	r2, [r5, #1]
 8006738:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800673c:	2a58      	cmp	r2, #88	@ 0x58
 800673e:	d16e      	bne.n	800681e <_strtod_l+0x126>
 8006740:	9302      	str	r3, [sp, #8]
 8006742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	ab1a      	add	r3, sp, #104	@ 0x68
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	4a8f      	ldr	r2, [pc, #572]	@ (8006988 <_strtod_l+0x290>)
 800674c:	9805      	ldr	r0, [sp, #20]
 800674e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006750:	a919      	add	r1, sp, #100	@ 0x64
 8006752:	f001 f91b 	bl	800798c <__gethex>
 8006756:	f010 060f 	ands.w	r6, r0, #15
 800675a:	4604      	mov	r4, r0
 800675c:	d005      	beq.n	800676a <_strtod_l+0x72>
 800675e:	2e06      	cmp	r6, #6
 8006760:	d128      	bne.n	80067b4 <_strtod_l+0xbc>
 8006762:	3501      	adds	r5, #1
 8006764:	2300      	movs	r3, #0
 8006766:	9519      	str	r5, [sp, #100]	@ 0x64
 8006768:	930e      	str	r3, [sp, #56]	@ 0x38
 800676a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 858e 	bne.w	800728e <_strtod_l+0xb96>
 8006772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006774:	b1cb      	cbz	r3, 80067aa <_strtod_l+0xb2>
 8006776:	4652      	mov	r2, sl
 8006778:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800677c:	ec43 2b10 	vmov	d0, r2, r3
 8006780:	b01f      	add	sp, #124	@ 0x7c
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	2920      	cmp	r1, #32
 8006788:	d1ce      	bne.n	8006728 <_strtod_l+0x30>
 800678a:	3201      	adds	r2, #1
 800678c:	e7c1      	b.n	8006712 <_strtod_l+0x1a>
 800678e:	292d      	cmp	r1, #45	@ 0x2d
 8006790:	d1ca      	bne.n	8006728 <_strtod_l+0x30>
 8006792:	2101      	movs	r1, #1
 8006794:	910e      	str	r1, [sp, #56]	@ 0x38
 8006796:	1c51      	adds	r1, r2, #1
 8006798:	9119      	str	r1, [sp, #100]	@ 0x64
 800679a:	7852      	ldrb	r2, [r2, #1]
 800679c:	2a00      	cmp	r2, #0
 800679e:	d1c5      	bne.n	800672c <_strtod_l+0x34>
 80067a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 8570 	bne.w	800728a <_strtod_l+0xb92>
 80067aa:	4652      	mov	r2, sl
 80067ac:	465b      	mov	r3, fp
 80067ae:	e7e5      	b.n	800677c <_strtod_l+0x84>
 80067b0:	2100      	movs	r1, #0
 80067b2:	e7ef      	b.n	8006794 <_strtod_l+0x9c>
 80067b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067b6:	b13a      	cbz	r2, 80067c8 <_strtod_l+0xd0>
 80067b8:	2135      	movs	r1, #53	@ 0x35
 80067ba:	a81c      	add	r0, sp, #112	@ 0x70
 80067bc:	f7ff ff3a 	bl	8006634 <__copybits>
 80067c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067c2:	9805      	ldr	r0, [sp, #20]
 80067c4:	f7ff fb10 	bl	8005de8 <_Bfree>
 80067c8:	3e01      	subs	r6, #1
 80067ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80067cc:	2e04      	cmp	r6, #4
 80067ce:	d806      	bhi.n	80067de <_strtod_l+0xe6>
 80067d0:	e8df f006 	tbb	[pc, r6]
 80067d4:	201d0314 	.word	0x201d0314
 80067d8:	14          	.byte	0x14
 80067d9:	00          	.byte	0x00
 80067da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80067de:	05e1      	lsls	r1, r4, #23
 80067e0:	bf48      	it	mi
 80067e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067ea:	0d1b      	lsrs	r3, r3, #20
 80067ec:	051b      	lsls	r3, r3, #20
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1bb      	bne.n	800676a <_strtod_l+0x72>
 80067f2:	f7fe fb1f 	bl	8004e34 <__errno>
 80067f6:	2322      	movs	r3, #34	@ 0x22
 80067f8:	6003      	str	r3, [r0, #0]
 80067fa:	e7b6      	b.n	800676a <_strtod_l+0x72>
 80067fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006800:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006804:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006808:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800680c:	e7e7      	b.n	80067de <_strtod_l+0xe6>
 800680e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006990 <_strtod_l+0x298>
 8006812:	e7e4      	b.n	80067de <_strtod_l+0xe6>
 8006814:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006818:	f04f 3aff 	mov.w	sl, #4294967295
 800681c:	e7df      	b.n	80067de <_strtod_l+0xe6>
 800681e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	9219      	str	r2, [sp, #100]	@ 0x64
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b30      	cmp	r3, #48	@ 0x30
 8006828:	d0f9      	beq.n	800681e <_strtod_l+0x126>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d09d      	beq.n	800676a <_strtod_l+0x72>
 800682e:	2301      	movs	r3, #1
 8006830:	2700      	movs	r7, #0
 8006832:	9308      	str	r3, [sp, #32]
 8006834:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006836:	930c      	str	r3, [sp, #48]	@ 0x30
 8006838:	970b      	str	r7, [sp, #44]	@ 0x2c
 800683a:	46b9      	mov	r9, r7
 800683c:	220a      	movs	r2, #10
 800683e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006840:	7805      	ldrb	r5, [r0, #0]
 8006842:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006846:	b2d9      	uxtb	r1, r3
 8006848:	2909      	cmp	r1, #9
 800684a:	d928      	bls.n	800689e <_strtod_l+0x1a6>
 800684c:	494f      	ldr	r1, [pc, #316]	@ (800698c <_strtod_l+0x294>)
 800684e:	2201      	movs	r2, #1
 8006850:	f000 ffd6 	bl	8007800 <strncmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	d032      	beq.n	80068be <_strtod_l+0x1c6>
 8006858:	2000      	movs	r0, #0
 800685a:	462a      	mov	r2, r5
 800685c:	900a      	str	r0, [sp, #40]	@ 0x28
 800685e:	464d      	mov	r5, r9
 8006860:	4603      	mov	r3, r0
 8006862:	2a65      	cmp	r2, #101	@ 0x65
 8006864:	d001      	beq.n	800686a <_strtod_l+0x172>
 8006866:	2a45      	cmp	r2, #69	@ 0x45
 8006868:	d114      	bne.n	8006894 <_strtod_l+0x19c>
 800686a:	b91d      	cbnz	r5, 8006874 <_strtod_l+0x17c>
 800686c:	9a08      	ldr	r2, [sp, #32]
 800686e:	4302      	orrs	r2, r0
 8006870:	d096      	beq.n	80067a0 <_strtod_l+0xa8>
 8006872:	2500      	movs	r5, #0
 8006874:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006876:	1c62      	adds	r2, r4, #1
 8006878:	9219      	str	r2, [sp, #100]	@ 0x64
 800687a:	7862      	ldrb	r2, [r4, #1]
 800687c:	2a2b      	cmp	r2, #43	@ 0x2b
 800687e:	d07a      	beq.n	8006976 <_strtod_l+0x27e>
 8006880:	2a2d      	cmp	r2, #45	@ 0x2d
 8006882:	d07e      	beq.n	8006982 <_strtod_l+0x28a>
 8006884:	f04f 0c00 	mov.w	ip, #0
 8006888:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800688c:	2909      	cmp	r1, #9
 800688e:	f240 8085 	bls.w	800699c <_strtod_l+0x2a4>
 8006892:	9419      	str	r4, [sp, #100]	@ 0x64
 8006894:	f04f 0800 	mov.w	r8, #0
 8006898:	e0a5      	b.n	80069e6 <_strtod_l+0x2ee>
 800689a:	2300      	movs	r3, #0
 800689c:	e7c8      	b.n	8006830 <_strtod_l+0x138>
 800689e:	f1b9 0f08 	cmp.w	r9, #8
 80068a2:	bfd8      	it	le
 80068a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80068a6:	f100 0001 	add.w	r0, r0, #1
 80068aa:	bfda      	itte	le
 80068ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80068b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80068b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80068b6:	f109 0901 	add.w	r9, r9, #1
 80068ba:	9019      	str	r0, [sp, #100]	@ 0x64
 80068bc:	e7bf      	b.n	800683e <_strtod_l+0x146>
 80068be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068c4:	785a      	ldrb	r2, [r3, #1]
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	d03b      	beq.n	8006944 <_strtod_l+0x24c>
 80068cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80068ce:	464d      	mov	r5, r9
 80068d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80068d4:	2b09      	cmp	r3, #9
 80068d6:	d912      	bls.n	80068fe <_strtod_l+0x206>
 80068d8:	2301      	movs	r3, #1
 80068da:	e7c2      	b.n	8006862 <_strtod_l+0x16a>
 80068dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80068e2:	785a      	ldrb	r2, [r3, #1]
 80068e4:	3001      	adds	r0, #1
 80068e6:	2a30      	cmp	r2, #48	@ 0x30
 80068e8:	d0f8      	beq.n	80068dc <_strtod_l+0x1e4>
 80068ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	f200 84d2 	bhi.w	8007298 <_strtod_l+0xba0>
 80068f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80068f8:	2000      	movs	r0, #0
 80068fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80068fc:	4605      	mov	r5, r0
 80068fe:	3a30      	subs	r2, #48	@ 0x30
 8006900:	f100 0301 	add.w	r3, r0, #1
 8006904:	d018      	beq.n	8006938 <_strtod_l+0x240>
 8006906:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006908:	4419      	add	r1, r3
 800690a:	910a      	str	r1, [sp, #40]	@ 0x28
 800690c:	462e      	mov	r6, r5
 800690e:	f04f 0e0a 	mov.w	lr, #10
 8006912:	1c71      	adds	r1, r6, #1
 8006914:	eba1 0c05 	sub.w	ip, r1, r5
 8006918:	4563      	cmp	r3, ip
 800691a:	dc15      	bgt.n	8006948 <_strtod_l+0x250>
 800691c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006920:	182b      	adds	r3, r5, r0
 8006922:	2b08      	cmp	r3, #8
 8006924:	f105 0501 	add.w	r5, r5, #1
 8006928:	4405      	add	r5, r0
 800692a:	dc1a      	bgt.n	8006962 <_strtod_l+0x26a>
 800692c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800692e:	230a      	movs	r3, #10
 8006930:	fb03 2301 	mla	r3, r3, r1, r2
 8006934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006936:	2300      	movs	r3, #0
 8006938:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800693a:	1c51      	adds	r1, r2, #1
 800693c:	9119      	str	r1, [sp, #100]	@ 0x64
 800693e:	7852      	ldrb	r2, [r2, #1]
 8006940:	4618      	mov	r0, r3
 8006942:	e7c5      	b.n	80068d0 <_strtod_l+0x1d8>
 8006944:	4648      	mov	r0, r9
 8006946:	e7ce      	b.n	80068e6 <_strtod_l+0x1ee>
 8006948:	2e08      	cmp	r6, #8
 800694a:	dc05      	bgt.n	8006958 <_strtod_l+0x260>
 800694c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800694e:	fb0e f606 	mul.w	r6, lr, r6
 8006952:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006954:	460e      	mov	r6, r1
 8006956:	e7dc      	b.n	8006912 <_strtod_l+0x21a>
 8006958:	2910      	cmp	r1, #16
 800695a:	bfd8      	it	le
 800695c:	fb0e f707 	mulle.w	r7, lr, r7
 8006960:	e7f8      	b.n	8006954 <_strtod_l+0x25c>
 8006962:	2b0f      	cmp	r3, #15
 8006964:	bfdc      	itt	le
 8006966:	230a      	movle	r3, #10
 8006968:	fb03 2707 	mlale	r7, r3, r7, r2
 800696c:	e7e3      	b.n	8006936 <_strtod_l+0x23e>
 800696e:	2300      	movs	r3, #0
 8006970:	930a      	str	r3, [sp, #40]	@ 0x28
 8006972:	2301      	movs	r3, #1
 8006974:	e77a      	b.n	800686c <_strtod_l+0x174>
 8006976:	f04f 0c00 	mov.w	ip, #0
 800697a:	1ca2      	adds	r2, r4, #2
 800697c:	9219      	str	r2, [sp, #100]	@ 0x64
 800697e:	78a2      	ldrb	r2, [r4, #2]
 8006980:	e782      	b.n	8006888 <_strtod_l+0x190>
 8006982:	f04f 0c01 	mov.w	ip, #1
 8006986:	e7f8      	b.n	800697a <_strtod_l+0x282>
 8006988:	080088ac 	.word	0x080088ac
 800698c:	080086cd 	.word	0x080086cd
 8006990:	7ff00000 	.word	0x7ff00000
 8006994:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006996:	1c51      	adds	r1, r2, #1
 8006998:	9119      	str	r1, [sp, #100]	@ 0x64
 800699a:	7852      	ldrb	r2, [r2, #1]
 800699c:	2a30      	cmp	r2, #48	@ 0x30
 800699e:	d0f9      	beq.n	8006994 <_strtod_l+0x29c>
 80069a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80069a4:	2908      	cmp	r1, #8
 80069a6:	f63f af75 	bhi.w	8006894 <_strtod_l+0x19c>
 80069aa:	3a30      	subs	r2, #48	@ 0x30
 80069ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80069ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80069b2:	f04f 080a 	mov.w	r8, #10
 80069b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069b8:	1c56      	adds	r6, r2, #1
 80069ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80069bc:	7852      	ldrb	r2, [r2, #1]
 80069be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80069c2:	f1be 0f09 	cmp.w	lr, #9
 80069c6:	d939      	bls.n	8006a3c <_strtod_l+0x344>
 80069c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069ca:	1a76      	subs	r6, r6, r1
 80069cc:	2e08      	cmp	r6, #8
 80069ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80069d2:	dc03      	bgt.n	80069dc <_strtod_l+0x2e4>
 80069d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069d6:	4588      	cmp	r8, r1
 80069d8:	bfa8      	it	ge
 80069da:	4688      	movge	r8, r1
 80069dc:	f1bc 0f00 	cmp.w	ip, #0
 80069e0:	d001      	beq.n	80069e6 <_strtod_l+0x2ee>
 80069e2:	f1c8 0800 	rsb	r8, r8, #0
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	d14e      	bne.n	8006a88 <_strtod_l+0x390>
 80069ea:	9908      	ldr	r1, [sp, #32]
 80069ec:	4308      	orrs	r0, r1
 80069ee:	f47f aebc 	bne.w	800676a <_strtod_l+0x72>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f47f aed4 	bne.w	80067a0 <_strtod_l+0xa8>
 80069f8:	2a69      	cmp	r2, #105	@ 0x69
 80069fa:	d028      	beq.n	8006a4e <_strtod_l+0x356>
 80069fc:	dc25      	bgt.n	8006a4a <_strtod_l+0x352>
 80069fe:	2a49      	cmp	r2, #73	@ 0x49
 8006a00:	d025      	beq.n	8006a4e <_strtod_l+0x356>
 8006a02:	2a4e      	cmp	r2, #78	@ 0x4e
 8006a04:	f47f aecc 	bne.w	80067a0 <_strtod_l+0xa8>
 8006a08:	499a      	ldr	r1, [pc, #616]	@ (8006c74 <_strtod_l+0x57c>)
 8006a0a:	a819      	add	r0, sp, #100	@ 0x64
 8006a0c:	f001 f9e0 	bl	8007dd0 <__match>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	f43f aec5 	beq.w	80067a0 <_strtod_l+0xa8>
 8006a16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b28      	cmp	r3, #40	@ 0x28
 8006a1c:	d12e      	bne.n	8006a7c <_strtod_l+0x384>
 8006a1e:	4996      	ldr	r1, [pc, #600]	@ (8006c78 <_strtod_l+0x580>)
 8006a20:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a22:	a819      	add	r0, sp, #100	@ 0x64
 8006a24:	f001 f9e8 	bl	8007df8 <__hexnan>
 8006a28:	2805      	cmp	r0, #5
 8006a2a:	d127      	bne.n	8006a7c <_strtod_l+0x384>
 8006a2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a3a:	e696      	b.n	800676a <_strtod_l+0x72>
 8006a3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a3e:	fb08 2101 	mla	r1, r8, r1, r2
 8006a42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a48:	e7b5      	b.n	80069b6 <_strtod_l+0x2be>
 8006a4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a4c:	e7da      	b.n	8006a04 <_strtod_l+0x30c>
 8006a4e:	498b      	ldr	r1, [pc, #556]	@ (8006c7c <_strtod_l+0x584>)
 8006a50:	a819      	add	r0, sp, #100	@ 0x64
 8006a52:	f001 f9bd 	bl	8007dd0 <__match>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f43f aea2 	beq.w	80067a0 <_strtod_l+0xa8>
 8006a5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a5e:	4988      	ldr	r1, [pc, #544]	@ (8006c80 <_strtod_l+0x588>)
 8006a60:	3b01      	subs	r3, #1
 8006a62:	a819      	add	r0, sp, #100	@ 0x64
 8006a64:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a66:	f001 f9b3 	bl	8007dd0 <__match>
 8006a6a:	b910      	cbnz	r0, 8006a72 <_strtod_l+0x37a>
 8006a6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a6e:	3301      	adds	r3, #1
 8006a70:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006c90 <_strtod_l+0x598>
 8006a76:	f04f 0a00 	mov.w	sl, #0
 8006a7a:	e676      	b.n	800676a <_strtod_l+0x72>
 8006a7c:	4881      	ldr	r0, [pc, #516]	@ (8006c84 <_strtod_l+0x58c>)
 8006a7e:	f000 fee3 	bl	8007848 <nan>
 8006a82:	ec5b ab10 	vmov	sl, fp, d0
 8006a86:	e670      	b.n	800676a <_strtod_l+0x72>
 8006a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a8c:	eba8 0303 	sub.w	r3, r8, r3
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	bf08      	it	eq
 8006a96:	46a9      	moveq	r9, r5
 8006a98:	2d10      	cmp	r5, #16
 8006a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a9c:	462c      	mov	r4, r5
 8006a9e:	bfa8      	it	ge
 8006aa0:	2410      	movge	r4, #16
 8006aa2:	f7f9 fd37 	bl	8000514 <__aeabi_ui2d>
 8006aa6:	2d09      	cmp	r5, #9
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	468b      	mov	fp, r1
 8006aac:	dc13      	bgt.n	8006ad6 <_strtod_l+0x3de>
 8006aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f43f ae5a 	beq.w	800676a <_strtod_l+0x72>
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	dd78      	ble.n	8006bac <_strtod_l+0x4b4>
 8006aba:	2b16      	cmp	r3, #22
 8006abc:	dc5f      	bgt.n	8006b7e <_strtod_l+0x486>
 8006abe:	4972      	ldr	r1, [pc, #456]	@ (8006c88 <_strtod_l+0x590>)
 8006ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac8:	4652      	mov	r2, sl
 8006aca:	465b      	mov	r3, fp
 8006acc:	f7f9 fd9c 	bl	8000608 <__aeabi_dmul>
 8006ad0:	4682      	mov	sl, r0
 8006ad2:	468b      	mov	fp, r1
 8006ad4:	e649      	b.n	800676a <_strtod_l+0x72>
 8006ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8006c88 <_strtod_l+0x590>)
 8006ad8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006adc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ae0:	f7f9 fd92 	bl	8000608 <__aeabi_dmul>
 8006ae4:	4682      	mov	sl, r0
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	468b      	mov	fp, r1
 8006aea:	f7f9 fd13 	bl	8000514 <__aeabi_ui2d>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4650      	mov	r0, sl
 8006af4:	4659      	mov	r1, fp
 8006af6:	f7f9 fbd1 	bl	800029c <__adddf3>
 8006afa:	2d0f      	cmp	r5, #15
 8006afc:	4682      	mov	sl, r0
 8006afe:	468b      	mov	fp, r1
 8006b00:	ddd5      	ble.n	8006aae <_strtod_l+0x3b6>
 8006b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b04:	1b2c      	subs	r4, r5, r4
 8006b06:	441c      	add	r4, r3
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	f340 8093 	ble.w	8006c34 <_strtod_l+0x53c>
 8006b0e:	f014 030f 	ands.w	r3, r4, #15
 8006b12:	d00a      	beq.n	8006b2a <_strtod_l+0x432>
 8006b14:	495c      	ldr	r1, [pc, #368]	@ (8006c88 <_strtod_l+0x590>)
 8006b16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b22:	f7f9 fd71 	bl	8000608 <__aeabi_dmul>
 8006b26:	4682      	mov	sl, r0
 8006b28:	468b      	mov	fp, r1
 8006b2a:	f034 040f 	bics.w	r4, r4, #15
 8006b2e:	d073      	beq.n	8006c18 <_strtod_l+0x520>
 8006b30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b34:	dd49      	ble.n	8006bca <_strtod_l+0x4d2>
 8006b36:	2400      	movs	r4, #0
 8006b38:	46a0      	mov	r8, r4
 8006b3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b3c:	46a1      	mov	r9, r4
 8006b3e:	9a05      	ldr	r2, [sp, #20]
 8006b40:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006c90 <_strtod_l+0x598>
 8006b44:	2322      	movs	r3, #34	@ 0x22
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	f04f 0a00 	mov.w	sl, #0
 8006b4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f43f ae0b 	beq.w	800676a <_strtod_l+0x72>
 8006b54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f7ff f946 	bl	8005de8 <_Bfree>
 8006b5c:	9805      	ldr	r0, [sp, #20]
 8006b5e:	4649      	mov	r1, r9
 8006b60:	f7ff f942 	bl	8005de8 <_Bfree>
 8006b64:	9805      	ldr	r0, [sp, #20]
 8006b66:	4641      	mov	r1, r8
 8006b68:	f7ff f93e 	bl	8005de8 <_Bfree>
 8006b6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b6e:	9805      	ldr	r0, [sp, #20]
 8006b70:	f7ff f93a 	bl	8005de8 <_Bfree>
 8006b74:	9805      	ldr	r0, [sp, #20]
 8006b76:	4621      	mov	r1, r4
 8006b78:	f7ff f936 	bl	8005de8 <_Bfree>
 8006b7c:	e5f5      	b.n	800676a <_strtod_l+0x72>
 8006b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b84:	4293      	cmp	r3, r2
 8006b86:	dbbc      	blt.n	8006b02 <_strtod_l+0x40a>
 8006b88:	4c3f      	ldr	r4, [pc, #252]	@ (8006c88 <_strtod_l+0x590>)
 8006b8a:	f1c5 050f 	rsb	r5, r5, #15
 8006b8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b92:	4652      	mov	r2, sl
 8006b94:	465b      	mov	r3, fp
 8006b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9a:	f7f9 fd35 	bl	8000608 <__aeabi_dmul>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba0:	1b5d      	subs	r5, r3, r5
 8006ba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006baa:	e78f      	b.n	8006acc <_strtod_l+0x3d4>
 8006bac:	3316      	adds	r3, #22
 8006bae:	dba8      	blt.n	8006b02 <_strtod_l+0x40a>
 8006bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bb2:	eba3 0808 	sub.w	r8, r3, r8
 8006bb6:	4b34      	ldr	r3, [pc, #208]	@ (8006c88 <_strtod_l+0x590>)
 8006bb8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006bbc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 fe4a 	bl	800085c <__aeabi_ddiv>
 8006bc8:	e782      	b.n	8006ad0 <_strtod_l+0x3d8>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4f2f      	ldr	r7, [pc, #188]	@ (8006c8c <_strtod_l+0x594>)
 8006bce:	1124      	asrs	r4, r4, #4
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	4659      	mov	r1, fp
 8006bd4:	461e      	mov	r6, r3
 8006bd6:	2c01      	cmp	r4, #1
 8006bd8:	dc21      	bgt.n	8006c1e <_strtod_l+0x526>
 8006bda:	b10b      	cbz	r3, 8006be0 <_strtod_l+0x4e8>
 8006bdc:	4682      	mov	sl, r0
 8006bde:	468b      	mov	fp, r1
 8006be0:	492a      	ldr	r1, [pc, #168]	@ (8006c8c <_strtod_l+0x594>)
 8006be2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006be6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006bea:	4652      	mov	r2, sl
 8006bec:	465b      	mov	r3, fp
 8006bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bf2:	f7f9 fd09 	bl	8000608 <__aeabi_dmul>
 8006bf6:	4b26      	ldr	r3, [pc, #152]	@ (8006c90 <_strtod_l+0x598>)
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	400b      	ands	r3, r1
 8006bfc:	4925      	ldr	r1, [pc, #148]	@ (8006c94 <_strtod_l+0x59c>)
 8006bfe:	428b      	cmp	r3, r1
 8006c00:	4682      	mov	sl, r0
 8006c02:	d898      	bhi.n	8006b36 <_strtod_l+0x43e>
 8006c04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf86      	itte	hi
 8006c0c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006c98 <_strtod_l+0x5a0>
 8006c10:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9308      	str	r3, [sp, #32]
 8006c1c:	e076      	b.n	8006d0c <_strtod_l+0x614>
 8006c1e:	07e2      	lsls	r2, r4, #31
 8006c20:	d504      	bpl.n	8006c2c <_strtod_l+0x534>
 8006c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c26:	f7f9 fcef 	bl	8000608 <__aeabi_dmul>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	1064      	asrs	r4, r4, #1
 8006c30:	3708      	adds	r7, #8
 8006c32:	e7d0      	b.n	8006bd6 <_strtod_l+0x4de>
 8006c34:	d0f0      	beq.n	8006c18 <_strtod_l+0x520>
 8006c36:	4264      	negs	r4, r4
 8006c38:	f014 020f 	ands.w	r2, r4, #15
 8006c3c:	d00a      	beq.n	8006c54 <_strtod_l+0x55c>
 8006c3e:	4b12      	ldr	r3, [pc, #72]	@ (8006c88 <_strtod_l+0x590>)
 8006c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c44:	4650      	mov	r0, sl
 8006c46:	4659      	mov	r1, fp
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fe06 	bl	800085c <__aeabi_ddiv>
 8006c50:	4682      	mov	sl, r0
 8006c52:	468b      	mov	fp, r1
 8006c54:	1124      	asrs	r4, r4, #4
 8006c56:	d0df      	beq.n	8006c18 <_strtod_l+0x520>
 8006c58:	2c1f      	cmp	r4, #31
 8006c5a:	dd1f      	ble.n	8006c9c <_strtod_l+0x5a4>
 8006c5c:	2400      	movs	r4, #0
 8006c5e:	46a0      	mov	r8, r4
 8006c60:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c62:	46a1      	mov	r9, r4
 8006c64:	9a05      	ldr	r2, [sp, #20]
 8006c66:	2322      	movs	r3, #34	@ 0x22
 8006c68:	f04f 0a00 	mov.w	sl, #0
 8006c6c:	f04f 0b00 	mov.w	fp, #0
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e76b      	b.n	8006b4c <_strtod_l+0x454>
 8006c74:	080085bb 	.word	0x080085bb
 8006c78:	08008898 	.word	0x08008898
 8006c7c:	080085b3 	.word	0x080085b3
 8006c80:	080085ea 	.word	0x080085ea
 8006c84:	08008573 	.word	0x08008573
 8006c88:	080087d0 	.word	0x080087d0
 8006c8c:	080087a8 	.word	0x080087a8
 8006c90:	7ff00000 	.word	0x7ff00000
 8006c94:	7ca00000 	.word	0x7ca00000
 8006c98:	7fefffff 	.word	0x7fefffff
 8006c9c:	f014 0310 	ands.w	r3, r4, #16
 8006ca0:	bf18      	it	ne
 8006ca2:	236a      	movne	r3, #106	@ 0x6a
 8006ca4:	4ea9      	ldr	r6, [pc, #676]	@ (8006f4c <_strtod_l+0x854>)
 8006ca6:	9308      	str	r3, [sp, #32]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	2300      	movs	r3, #0
 8006cae:	07e7      	lsls	r7, r4, #31
 8006cb0:	d504      	bpl.n	8006cbc <_strtod_l+0x5c4>
 8006cb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cb6:	f7f9 fca7 	bl	8000608 <__aeabi_dmul>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	1064      	asrs	r4, r4, #1
 8006cbe:	f106 0608 	add.w	r6, r6, #8
 8006cc2:	d1f4      	bne.n	8006cae <_strtod_l+0x5b6>
 8006cc4:	b10b      	cbz	r3, 8006cca <_strtod_l+0x5d2>
 8006cc6:	4682      	mov	sl, r0
 8006cc8:	468b      	mov	fp, r1
 8006cca:	9b08      	ldr	r3, [sp, #32]
 8006ccc:	b1b3      	cbz	r3, 8006cfc <_strtod_l+0x604>
 8006cce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006cd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	4659      	mov	r1, fp
 8006cda:	dd0f      	ble.n	8006cfc <_strtod_l+0x604>
 8006cdc:	2b1f      	cmp	r3, #31
 8006cde:	dd56      	ble.n	8006d8e <_strtod_l+0x696>
 8006ce0:	2b34      	cmp	r3, #52	@ 0x34
 8006ce2:	bfde      	ittt	le
 8006ce4:	f04f 33ff 	movle.w	r3, #4294967295
 8006ce8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cec:	4093      	lslle	r3, r2
 8006cee:	f04f 0a00 	mov.w	sl, #0
 8006cf2:	bfcc      	ite	gt
 8006cf4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006cf8:	ea03 0b01 	andle.w	fp, r3, r1
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4650      	mov	r0, sl
 8006d02:	4659      	mov	r1, fp
 8006d04:	f7f9 fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d1a7      	bne.n	8006c5c <_strtod_l+0x564>
 8006d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006d12:	9805      	ldr	r0, [sp, #20]
 8006d14:	462b      	mov	r3, r5
 8006d16:	464a      	mov	r2, r9
 8006d18:	f7ff f8ce 	bl	8005eb8 <__s2b>
 8006d1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f af09 	beq.w	8006b36 <_strtod_l+0x43e>
 8006d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d28:	2a00      	cmp	r2, #0
 8006d2a:	eba3 0308 	sub.w	r3, r3, r8
 8006d2e:	bfa8      	it	ge
 8006d30:	2300      	movge	r3, #0
 8006d32:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d34:	2400      	movs	r4, #0
 8006d36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d3c:	46a0      	mov	r8, r4
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d40:	9805      	ldr	r0, [sp, #20]
 8006d42:	6859      	ldr	r1, [r3, #4]
 8006d44:	f7ff f810 	bl	8005d68 <_Balloc>
 8006d48:	4681      	mov	r9, r0
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f43f aef7 	beq.w	8006b3e <_strtod_l+0x446>
 8006d50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	3202      	adds	r2, #2
 8006d56:	f103 010c 	add.w	r1, r3, #12
 8006d5a:	0092      	lsls	r2, r2, #2
 8006d5c:	300c      	adds	r0, #12
 8006d5e:	f7fe f896 	bl	8004e8e <memcpy>
 8006d62:	ec4b ab10 	vmov	d0, sl, fp
 8006d66:	9805      	ldr	r0, [sp, #20]
 8006d68:	aa1c      	add	r2, sp, #112	@ 0x70
 8006d6a:	a91b      	add	r1, sp, #108	@ 0x6c
 8006d6c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d70:	f7ff fbd6 	bl	8006520 <__d2b>
 8006d74:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f43f aee1 	beq.w	8006b3e <_strtod_l+0x446>
 8006d7c:	9805      	ldr	r0, [sp, #20]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	f7ff f930 	bl	8005fe4 <__i2b>
 8006d84:	4680      	mov	r8, r0
 8006d86:	b948      	cbnz	r0, 8006d9c <_strtod_l+0x6a4>
 8006d88:	f04f 0800 	mov.w	r8, #0
 8006d8c:	e6d7      	b.n	8006b3e <_strtod_l+0x446>
 8006d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	ea03 0a0a 	and.w	sl, r3, sl
 8006d9a:	e7af      	b.n	8006cfc <_strtod_l+0x604>
 8006d9c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d9e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	bfab      	itete	ge
 8006da4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006da6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006da8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006daa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006dac:	bfac      	ite	ge
 8006dae:	18ef      	addge	r7, r5, r3
 8006db0:	1b5e      	sublt	r6, r3, r5
 8006db2:	9b08      	ldr	r3, [sp, #32]
 8006db4:	1aed      	subs	r5, r5, r3
 8006db6:	4415      	add	r5, r2
 8006db8:	4b65      	ldr	r3, [pc, #404]	@ (8006f50 <_strtod_l+0x858>)
 8006dba:	3d01      	subs	r5, #1
 8006dbc:	429d      	cmp	r5, r3
 8006dbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006dc2:	da50      	bge.n	8006e66 <_strtod_l+0x76e>
 8006dc4:	1b5b      	subs	r3, r3, r5
 8006dc6:	2b1f      	cmp	r3, #31
 8006dc8:	eba2 0203 	sub.w	r2, r2, r3
 8006dcc:	f04f 0101 	mov.w	r1, #1
 8006dd0:	dc3d      	bgt.n	8006e4e <_strtod_l+0x756>
 8006dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ddc:	18bd      	adds	r5, r7, r2
 8006dde:	9b08      	ldr	r3, [sp, #32]
 8006de0:	42af      	cmp	r7, r5
 8006de2:	4416      	add	r6, r2
 8006de4:	441e      	add	r6, r3
 8006de6:	463b      	mov	r3, r7
 8006de8:	bfa8      	it	ge
 8006dea:	462b      	movge	r3, r5
 8006dec:	42b3      	cmp	r3, r6
 8006dee:	bfa8      	it	ge
 8006df0:	4633      	movge	r3, r6
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bfc2      	ittt	gt
 8006df6:	1aed      	subgt	r5, r5, r3
 8006df8:	1af6      	subgt	r6, r6, r3
 8006dfa:	1aff      	subgt	r7, r7, r3
 8006dfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd16      	ble.n	8006e30 <_strtod_l+0x738>
 8006e02:	4641      	mov	r1, r8
 8006e04:	9805      	ldr	r0, [sp, #20]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f7ff f9a4 	bl	8006154 <__pow5mult>
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d0ba      	beq.n	8006d88 <_strtod_l+0x690>
 8006e12:	4601      	mov	r1, r0
 8006e14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e16:	9805      	ldr	r0, [sp, #20]
 8006e18:	f7ff f8fa 	bl	8006010 <__multiply>
 8006e1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f43f ae8d 	beq.w	8006b3e <_strtod_l+0x446>
 8006e24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e26:	9805      	ldr	r0, [sp, #20]
 8006e28:	f7fe ffde 	bl	8005de8 <_Bfree>
 8006e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	dc1d      	bgt.n	8006e70 <_strtod_l+0x778>
 8006e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	dd23      	ble.n	8006e82 <_strtod_l+0x78a>
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e3e:	9805      	ldr	r0, [sp, #20]
 8006e40:	f7ff f988 	bl	8006154 <__pow5mult>
 8006e44:	4681      	mov	r9, r0
 8006e46:	b9e0      	cbnz	r0, 8006e82 <_strtod_l+0x78a>
 8006e48:	f04f 0900 	mov.w	r9, #0
 8006e4c:	e677      	b.n	8006b3e <_strtod_l+0x446>
 8006e4e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e52:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e56:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e5a:	35e2      	adds	r5, #226	@ 0xe2
 8006e5c:	fa01 f305 	lsl.w	r3, r1, r5
 8006e60:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e62:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e64:	e7ba      	b.n	8006ddc <_strtod_l+0x6e4>
 8006e66:	2300      	movs	r3, #0
 8006e68:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e6e:	e7b5      	b.n	8006ddc <_strtod_l+0x6e4>
 8006e70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e72:	9805      	ldr	r0, [sp, #20]
 8006e74:	462a      	mov	r2, r5
 8006e76:	f7ff f9c7 	bl	8006208 <__lshift>
 8006e7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1d9      	bne.n	8006e34 <_strtod_l+0x73c>
 8006e80:	e65d      	b.n	8006b3e <_strtod_l+0x446>
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	dd07      	ble.n	8006e96 <_strtod_l+0x79e>
 8006e86:	4649      	mov	r1, r9
 8006e88:	9805      	ldr	r0, [sp, #20]
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	f7ff f9bc 	bl	8006208 <__lshift>
 8006e90:	4681      	mov	r9, r0
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0d8      	beq.n	8006e48 <_strtod_l+0x750>
 8006e96:	2f00      	cmp	r7, #0
 8006e98:	dd08      	ble.n	8006eac <_strtod_l+0x7b4>
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	9805      	ldr	r0, [sp, #20]
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	f7ff f9b2 	bl	8006208 <__lshift>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f43f ae49 	beq.w	8006b3e <_strtod_l+0x446>
 8006eac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eae:	9805      	ldr	r0, [sp, #20]
 8006eb0:	464a      	mov	r2, r9
 8006eb2:	f7ff fa31 	bl	8006318 <__mdiff>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f43f ae40 	beq.w	8006b3e <_strtod_l+0x446>
 8006ebe:	68c3      	ldr	r3, [r0, #12]
 8006ec0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60c3      	str	r3, [r0, #12]
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	f7ff fa0a 	bl	80062e0 <__mcmp>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	da45      	bge.n	8006f5c <_strtod_l+0x864>
 8006ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ed6:	d16b      	bne.n	8006fb0 <_strtod_l+0x8b8>
 8006ed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d167      	bne.n	8006fb0 <_strtod_l+0x8b8>
 8006ee0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ee4:	0d1b      	lsrs	r3, r3, #20
 8006ee6:	051b      	lsls	r3, r3, #20
 8006ee8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006eec:	d960      	bls.n	8006fb0 <_strtod_l+0x8b8>
 8006eee:	6963      	ldr	r3, [r4, #20]
 8006ef0:	b913      	cbnz	r3, 8006ef8 <_strtod_l+0x800>
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	dd5b      	ble.n	8006fb0 <_strtod_l+0x8b8>
 8006ef8:	4621      	mov	r1, r4
 8006efa:	2201      	movs	r2, #1
 8006efc:	9805      	ldr	r0, [sp, #20]
 8006efe:	f7ff f983 	bl	8006208 <__lshift>
 8006f02:	4641      	mov	r1, r8
 8006f04:	4604      	mov	r4, r0
 8006f06:	f7ff f9eb 	bl	80062e0 <__mcmp>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	dd50      	ble.n	8006fb0 <_strtod_l+0x8b8>
 8006f0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f12:	9a08      	ldr	r2, [sp, #32]
 8006f14:	0d1b      	lsrs	r3, r3, #20
 8006f16:	051b      	lsls	r3, r3, #20
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	d06a      	beq.n	8006ff2 <_strtod_l+0x8fa>
 8006f1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f20:	d867      	bhi.n	8006ff2 <_strtod_l+0x8fa>
 8006f22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f26:	f67f ae9d 	bls.w	8006c64 <_strtod_l+0x56c>
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <_strtod_l+0x85c>)
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	4659      	mov	r1, fp
 8006f30:	2200      	movs	r2, #0
 8006f32:	f7f9 fb69 	bl	8000608 <__aeabi_dmul>
 8006f36:	4b08      	ldr	r3, [pc, #32]	@ (8006f58 <_strtod_l+0x860>)
 8006f38:	400b      	ands	r3, r1
 8006f3a:	4682      	mov	sl, r0
 8006f3c:	468b      	mov	fp, r1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f47f ae08 	bne.w	8006b54 <_strtod_l+0x45c>
 8006f44:	9a05      	ldr	r2, [sp, #20]
 8006f46:	2322      	movs	r3, #34	@ 0x22
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e603      	b.n	8006b54 <_strtod_l+0x45c>
 8006f4c:	080088c0 	.word	0x080088c0
 8006f50:	fffffc02 	.word	0xfffffc02
 8006f54:	39500000 	.word	0x39500000
 8006f58:	7ff00000 	.word	0x7ff00000
 8006f5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006f60:	d165      	bne.n	800702e <_strtod_l+0x936>
 8006f62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f68:	b35a      	cbz	r2, 8006fc2 <_strtod_l+0x8ca>
 8006f6a:	4a9f      	ldr	r2, [pc, #636]	@ (80071e8 <_strtod_l+0xaf0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d12b      	bne.n	8006fc8 <_strtod_l+0x8d0>
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	4651      	mov	r1, sl
 8006f74:	b303      	cbz	r3, 8006fb8 <_strtod_l+0x8c0>
 8006f76:	4b9d      	ldr	r3, [pc, #628]	@ (80071ec <_strtod_l+0xaf4>)
 8006f78:	465a      	mov	r2, fp
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	d81b      	bhi.n	8006fbe <_strtod_l+0x8c6>
 8006f86:	0d1b      	lsrs	r3, r3, #20
 8006f88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	4299      	cmp	r1, r3
 8006f92:	d119      	bne.n	8006fc8 <_strtod_l+0x8d0>
 8006f94:	4b96      	ldr	r3, [pc, #600]	@ (80071f0 <_strtod_l+0xaf8>)
 8006f96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d102      	bne.n	8006fa2 <_strtod_l+0x8aa>
 8006f9c:	3101      	adds	r1, #1
 8006f9e:	f43f adce 	beq.w	8006b3e <_strtod_l+0x446>
 8006fa2:	4b92      	ldr	r3, [pc, #584]	@ (80071ec <_strtod_l+0xaf4>)
 8006fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006fac:	f04f 0a00 	mov.w	sl, #0
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1b9      	bne.n	8006f2a <_strtod_l+0x832>
 8006fb6:	e5cd      	b.n	8006b54 <_strtod_l+0x45c>
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbc:	e7e8      	b.n	8006f90 <_strtod_l+0x898>
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	e7e6      	b.n	8006f90 <_strtod_l+0x898>
 8006fc2:	ea53 030a 	orrs.w	r3, r3, sl
 8006fc6:	d0a2      	beq.n	8006f0e <_strtod_l+0x816>
 8006fc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fca:	b1db      	cbz	r3, 8007004 <_strtod_l+0x90c>
 8006fcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fce:	4213      	tst	r3, r2
 8006fd0:	d0ee      	beq.n	8006fb0 <_strtod_l+0x8b8>
 8006fd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fd4:	9a08      	ldr	r2, [sp, #32]
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	4659      	mov	r1, fp
 8006fda:	b1bb      	cbz	r3, 800700c <_strtod_l+0x914>
 8006fdc:	f7ff fb6e 	bl	80066bc <sulp>
 8006fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fe4:	ec53 2b10 	vmov	r2, r3, d0
 8006fe8:	f7f9 f958 	bl	800029c <__adddf3>
 8006fec:	4682      	mov	sl, r0
 8006fee:	468b      	mov	fp, r1
 8006ff0:	e7de      	b.n	8006fb0 <_strtod_l+0x8b8>
 8006ff2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006ff6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ffa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ffe:	f04f 3aff 	mov.w	sl, #4294967295
 8007002:	e7d5      	b.n	8006fb0 <_strtod_l+0x8b8>
 8007004:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007006:	ea13 0f0a 	tst.w	r3, sl
 800700a:	e7e1      	b.n	8006fd0 <_strtod_l+0x8d8>
 800700c:	f7ff fb56 	bl	80066bc <sulp>
 8007010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007014:	ec53 2b10 	vmov	r2, r3, d0
 8007018:	f7f9 f93e 	bl	8000298 <__aeabi_dsub>
 800701c:	2200      	movs	r2, #0
 800701e:	2300      	movs	r3, #0
 8007020:	4682      	mov	sl, r0
 8007022:	468b      	mov	fp, r1
 8007024:	f7f9 fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007028:	2800      	cmp	r0, #0
 800702a:	d0c1      	beq.n	8006fb0 <_strtod_l+0x8b8>
 800702c:	e61a      	b.n	8006c64 <_strtod_l+0x56c>
 800702e:	4641      	mov	r1, r8
 8007030:	4620      	mov	r0, r4
 8007032:	f7ff facd 	bl	80065d0 <__ratio>
 8007036:	ec57 6b10 	vmov	r6, r7, d0
 800703a:	2200      	movs	r2, #0
 800703c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 fd5c 	bl	8000b00 <__aeabi_dcmple>
 8007048:	2800      	cmp	r0, #0
 800704a:	d06f      	beq.n	800712c <_strtod_l+0xa34>
 800704c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d17a      	bne.n	8007148 <_strtod_l+0xa50>
 8007052:	f1ba 0f00 	cmp.w	sl, #0
 8007056:	d158      	bne.n	800710a <_strtod_l+0xa12>
 8007058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800705e:	2b00      	cmp	r3, #0
 8007060:	d15a      	bne.n	8007118 <_strtod_l+0xa20>
 8007062:	4b64      	ldr	r3, [pc, #400]	@ (80071f4 <_strtod_l+0xafc>)
 8007064:	2200      	movs	r2, #0
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7f9 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800706e:	2800      	cmp	r0, #0
 8007070:	d159      	bne.n	8007126 <_strtod_l+0xa2e>
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	4b60      	ldr	r3, [pc, #384]	@ (80071f8 <_strtod_l+0xb00>)
 8007078:	2200      	movs	r2, #0
 800707a:	f7f9 fac5 	bl	8000608 <__aeabi_dmul>
 800707e:	4606      	mov	r6, r0
 8007080:	460f      	mov	r7, r1
 8007082:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007086:	9606      	str	r6, [sp, #24]
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800708e:	4d57      	ldr	r5, [pc, #348]	@ (80071ec <_strtod_l+0xaf4>)
 8007090:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007096:	401d      	ands	r5, r3
 8007098:	4b58      	ldr	r3, [pc, #352]	@ (80071fc <_strtod_l+0xb04>)
 800709a:	429d      	cmp	r5, r3
 800709c:	f040 80b2 	bne.w	8007204 <_strtod_l+0xb0c>
 80070a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80070a6:	ec4b ab10 	vmov	d0, sl, fp
 80070aa:	f7ff f9c9 	bl	8006440 <__ulp>
 80070ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070b2:	ec51 0b10 	vmov	r0, r1, d0
 80070b6:	f7f9 faa7 	bl	8000608 <__aeabi_dmul>
 80070ba:	4652      	mov	r2, sl
 80070bc:	465b      	mov	r3, fp
 80070be:	f7f9 f8ed 	bl	800029c <__adddf3>
 80070c2:	460b      	mov	r3, r1
 80070c4:	4949      	ldr	r1, [pc, #292]	@ (80071ec <_strtod_l+0xaf4>)
 80070c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007200 <_strtod_l+0xb08>)
 80070c8:	4019      	ands	r1, r3
 80070ca:	4291      	cmp	r1, r2
 80070cc:	4682      	mov	sl, r0
 80070ce:	d942      	bls.n	8007156 <_strtod_l+0xa5e>
 80070d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070d2:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <_strtod_l+0xaf8>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d103      	bne.n	80070e0 <_strtod_l+0x9e8>
 80070d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070da:	3301      	adds	r3, #1
 80070dc:	f43f ad2f 	beq.w	8006b3e <_strtod_l+0x446>
 80070e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80071f0 <_strtod_l+0xaf8>
 80070e4:	f04f 3aff 	mov.w	sl, #4294967295
 80070e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070ea:	9805      	ldr	r0, [sp, #20]
 80070ec:	f7fe fe7c 	bl	8005de8 <_Bfree>
 80070f0:	9805      	ldr	r0, [sp, #20]
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7fe fe78 	bl	8005de8 <_Bfree>
 80070f8:	9805      	ldr	r0, [sp, #20]
 80070fa:	4641      	mov	r1, r8
 80070fc:	f7fe fe74 	bl	8005de8 <_Bfree>
 8007100:	9805      	ldr	r0, [sp, #20]
 8007102:	4621      	mov	r1, r4
 8007104:	f7fe fe70 	bl	8005de8 <_Bfree>
 8007108:	e619      	b.n	8006d3e <_strtod_l+0x646>
 800710a:	f1ba 0f01 	cmp.w	sl, #1
 800710e:	d103      	bne.n	8007118 <_strtod_l+0xa20>
 8007110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	f43f ada6 	beq.w	8006c64 <_strtod_l+0x56c>
 8007118:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80071c8 <_strtod_l+0xad0>
 800711c:	4f35      	ldr	r7, [pc, #212]	@ (80071f4 <_strtod_l+0xafc>)
 800711e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007122:	2600      	movs	r6, #0
 8007124:	e7b1      	b.n	800708a <_strtod_l+0x992>
 8007126:	4f34      	ldr	r7, [pc, #208]	@ (80071f8 <_strtod_l+0xb00>)
 8007128:	2600      	movs	r6, #0
 800712a:	e7aa      	b.n	8007082 <_strtod_l+0x98a>
 800712c:	4b32      	ldr	r3, [pc, #200]	@ (80071f8 <_strtod_l+0xb00>)
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 fa68 	bl	8000608 <__aeabi_dmul>
 8007138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800713a:	4606      	mov	r6, r0
 800713c:	460f      	mov	r7, r1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d09f      	beq.n	8007082 <_strtod_l+0x98a>
 8007142:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007146:	e7a0      	b.n	800708a <_strtod_l+0x992>
 8007148:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80071d0 <_strtod_l+0xad8>
 800714c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007150:	ec57 6b17 	vmov	r6, r7, d7
 8007154:	e799      	b.n	800708a <_strtod_l+0x992>
 8007156:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1c1      	bne.n	80070e8 <_strtod_l+0x9f0>
 8007164:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007168:	0d1b      	lsrs	r3, r3, #20
 800716a:	051b      	lsls	r3, r3, #20
 800716c:	429d      	cmp	r5, r3
 800716e:	d1bb      	bne.n	80070e8 <_strtod_l+0x9f0>
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fda8 	bl	8000cc8 <__aeabi_d2lz>
 8007178:	f7f9 fa18 	bl	80005ac <__aeabi_l2d>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 f888 	bl	8000298 <__aeabi_dsub>
 8007188:	460b      	mov	r3, r1
 800718a:	4602      	mov	r2, r0
 800718c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007190:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007196:	ea46 060a 	orr.w	r6, r6, sl
 800719a:	431e      	orrs	r6, r3
 800719c:	d06f      	beq.n	800727e <_strtod_l+0xb86>
 800719e:	a30e      	add	r3, pc, #56	@ (adr r3, 80071d8 <_strtod_l+0xae0>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f9 fca2 	bl	8000aec <__aeabi_dcmplt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f47f acd3 	bne.w	8006b54 <_strtod_l+0x45c>
 80071ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80071e0 <_strtod_l+0xae8>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071b8:	f7f9 fcb6 	bl	8000b28 <__aeabi_dcmpgt>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d093      	beq.n	80070e8 <_strtod_l+0x9f0>
 80071c0:	e4c8      	b.n	8006b54 <_strtod_l+0x45c>
 80071c2:	bf00      	nop
 80071c4:	f3af 8000 	nop.w
 80071c8:	00000000 	.word	0x00000000
 80071cc:	bff00000 	.word	0xbff00000
 80071d0:	00000000 	.word	0x00000000
 80071d4:	3ff00000 	.word	0x3ff00000
 80071d8:	94a03595 	.word	0x94a03595
 80071dc:	3fdfffff 	.word	0x3fdfffff
 80071e0:	35afe535 	.word	0x35afe535
 80071e4:	3fe00000 	.word	0x3fe00000
 80071e8:	000fffff 	.word	0x000fffff
 80071ec:	7ff00000 	.word	0x7ff00000
 80071f0:	7fefffff 	.word	0x7fefffff
 80071f4:	3ff00000 	.word	0x3ff00000
 80071f8:	3fe00000 	.word	0x3fe00000
 80071fc:	7fe00000 	.word	0x7fe00000
 8007200:	7c9fffff 	.word	0x7c9fffff
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	b323      	cbz	r3, 8007252 <_strtod_l+0xb5a>
 8007208:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800720c:	d821      	bhi.n	8007252 <_strtod_l+0xb5a>
 800720e:	a328      	add	r3, pc, #160	@ (adr r3, 80072b0 <_strtod_l+0xbb8>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 fc72 	bl	8000b00 <__aeabi_dcmple>
 800721c:	b1a0      	cbz	r0, 8007248 <_strtod_l+0xb50>
 800721e:	4639      	mov	r1, r7
 8007220:	4630      	mov	r0, r6
 8007222:	f7f9 fcc9 	bl	8000bb8 <__aeabi_d2uiz>
 8007226:	2801      	cmp	r0, #1
 8007228:	bf38      	it	cc
 800722a:	2001      	movcc	r0, #1
 800722c:	f7f9 f972 	bl	8000514 <__aeabi_ui2d>
 8007230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007232:	4606      	mov	r6, r0
 8007234:	460f      	mov	r7, r1
 8007236:	b9fb      	cbnz	r3, 8007278 <_strtod_l+0xb80>
 8007238:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800723c:	9014      	str	r0, [sp, #80]	@ 0x50
 800723e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007240:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007244:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007248:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800724a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800724e:	1b5b      	subs	r3, r3, r5
 8007250:	9311      	str	r3, [sp, #68]	@ 0x44
 8007252:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007256:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800725a:	f7ff f8f1 	bl	8006440 <__ulp>
 800725e:	4650      	mov	r0, sl
 8007260:	ec53 2b10 	vmov	r2, r3, d0
 8007264:	4659      	mov	r1, fp
 8007266:	f7f9 f9cf 	bl	8000608 <__aeabi_dmul>
 800726a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800726e:	f7f9 f815 	bl	800029c <__adddf3>
 8007272:	4682      	mov	sl, r0
 8007274:	468b      	mov	fp, r1
 8007276:	e770      	b.n	800715a <_strtod_l+0xa62>
 8007278:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800727c:	e7e0      	b.n	8007240 <_strtod_l+0xb48>
 800727e:	a30e      	add	r3, pc, #56	@ (adr r3, 80072b8 <_strtod_l+0xbc0>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f9 fc32 	bl	8000aec <__aeabi_dcmplt>
 8007288:	e798      	b.n	80071bc <_strtod_l+0xac4>
 800728a:	2300      	movs	r3, #0
 800728c:	930e      	str	r3, [sp, #56]	@ 0x38
 800728e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	f7ff ba6d 	b.w	8006772 <_strtod_l+0x7a>
 8007298:	2a65      	cmp	r2, #101	@ 0x65
 800729a:	f43f ab68 	beq.w	800696e <_strtod_l+0x276>
 800729e:	2a45      	cmp	r2, #69	@ 0x45
 80072a0:	f43f ab65 	beq.w	800696e <_strtod_l+0x276>
 80072a4:	2301      	movs	r3, #1
 80072a6:	f7ff bba0 	b.w	80069ea <_strtod_l+0x2f2>
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w
 80072b0:	ffc00000 	.word	0xffc00000
 80072b4:	41dfffff 	.word	0x41dfffff
 80072b8:	94a03595 	.word	0x94a03595
 80072bc:	3fcfffff 	.word	0x3fcfffff

080072c0 <_strtod_r>:
 80072c0:	4b01      	ldr	r3, [pc, #4]	@ (80072c8 <_strtod_r+0x8>)
 80072c2:	f7ff ba19 	b.w	80066f8 <_strtod_l>
 80072c6:	bf00      	nop
 80072c8:	2000006c 	.word	0x2000006c

080072cc <_strtol_l.isra.0>:
 80072cc:	2b24      	cmp	r3, #36	@ 0x24
 80072ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d2:	4686      	mov	lr, r0
 80072d4:	4690      	mov	r8, r2
 80072d6:	d801      	bhi.n	80072dc <_strtol_l.isra.0+0x10>
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d106      	bne.n	80072ea <_strtol_l.isra.0+0x1e>
 80072dc:	f7fd fdaa 	bl	8004e34 <__errno>
 80072e0:	2316      	movs	r3, #22
 80072e2:	6003      	str	r3, [r0, #0]
 80072e4:	2000      	movs	r0, #0
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	4834      	ldr	r0, [pc, #208]	@ (80073bc <_strtol_l.isra.0+0xf0>)
 80072ec:	460d      	mov	r5, r1
 80072ee:	462a      	mov	r2, r5
 80072f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f4:	5d06      	ldrb	r6, [r0, r4]
 80072f6:	f016 0608 	ands.w	r6, r6, #8
 80072fa:	d1f8      	bne.n	80072ee <_strtol_l.isra.0+0x22>
 80072fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80072fe:	d110      	bne.n	8007322 <_strtol_l.isra.0+0x56>
 8007300:	782c      	ldrb	r4, [r5, #0]
 8007302:	2601      	movs	r6, #1
 8007304:	1c95      	adds	r5, r2, #2
 8007306:	f033 0210 	bics.w	r2, r3, #16
 800730a:	d115      	bne.n	8007338 <_strtol_l.isra.0+0x6c>
 800730c:	2c30      	cmp	r4, #48	@ 0x30
 800730e:	d10d      	bne.n	800732c <_strtol_l.isra.0+0x60>
 8007310:	782a      	ldrb	r2, [r5, #0]
 8007312:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007316:	2a58      	cmp	r2, #88	@ 0x58
 8007318:	d108      	bne.n	800732c <_strtol_l.isra.0+0x60>
 800731a:	786c      	ldrb	r4, [r5, #1]
 800731c:	3502      	adds	r5, #2
 800731e:	2310      	movs	r3, #16
 8007320:	e00a      	b.n	8007338 <_strtol_l.isra.0+0x6c>
 8007322:	2c2b      	cmp	r4, #43	@ 0x2b
 8007324:	bf04      	itt	eq
 8007326:	782c      	ldrbeq	r4, [r5, #0]
 8007328:	1c95      	addeq	r5, r2, #2
 800732a:	e7ec      	b.n	8007306 <_strtol_l.isra.0+0x3a>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f6      	bne.n	800731e <_strtol_l.isra.0+0x52>
 8007330:	2c30      	cmp	r4, #48	@ 0x30
 8007332:	bf14      	ite	ne
 8007334:	230a      	movne	r3, #10
 8007336:	2308      	moveq	r3, #8
 8007338:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800733c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007340:	2200      	movs	r2, #0
 8007342:	fbbc f9f3 	udiv	r9, ip, r3
 8007346:	4610      	mov	r0, r2
 8007348:	fb03 ca19 	mls	sl, r3, r9, ip
 800734c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007350:	2f09      	cmp	r7, #9
 8007352:	d80f      	bhi.n	8007374 <_strtol_l.isra.0+0xa8>
 8007354:	463c      	mov	r4, r7
 8007356:	42a3      	cmp	r3, r4
 8007358:	dd1b      	ble.n	8007392 <_strtol_l.isra.0+0xc6>
 800735a:	1c57      	adds	r7, r2, #1
 800735c:	d007      	beq.n	800736e <_strtol_l.isra.0+0xa2>
 800735e:	4581      	cmp	r9, r0
 8007360:	d314      	bcc.n	800738c <_strtol_l.isra.0+0xc0>
 8007362:	d101      	bne.n	8007368 <_strtol_l.isra.0+0x9c>
 8007364:	45a2      	cmp	sl, r4
 8007366:	db11      	blt.n	800738c <_strtol_l.isra.0+0xc0>
 8007368:	fb00 4003 	mla	r0, r0, r3, r4
 800736c:	2201      	movs	r2, #1
 800736e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007372:	e7eb      	b.n	800734c <_strtol_l.isra.0+0x80>
 8007374:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007378:	2f19      	cmp	r7, #25
 800737a:	d801      	bhi.n	8007380 <_strtol_l.isra.0+0xb4>
 800737c:	3c37      	subs	r4, #55	@ 0x37
 800737e:	e7ea      	b.n	8007356 <_strtol_l.isra.0+0x8a>
 8007380:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007384:	2f19      	cmp	r7, #25
 8007386:	d804      	bhi.n	8007392 <_strtol_l.isra.0+0xc6>
 8007388:	3c57      	subs	r4, #87	@ 0x57
 800738a:	e7e4      	b.n	8007356 <_strtol_l.isra.0+0x8a>
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	e7ed      	b.n	800736e <_strtol_l.isra.0+0xa2>
 8007392:	1c53      	adds	r3, r2, #1
 8007394:	d108      	bne.n	80073a8 <_strtol_l.isra.0+0xdc>
 8007396:	2322      	movs	r3, #34	@ 0x22
 8007398:	f8ce 3000 	str.w	r3, [lr]
 800739c:	4660      	mov	r0, ip
 800739e:	f1b8 0f00 	cmp.w	r8, #0
 80073a2:	d0a0      	beq.n	80072e6 <_strtol_l.isra.0+0x1a>
 80073a4:	1e69      	subs	r1, r5, #1
 80073a6:	e006      	b.n	80073b6 <_strtol_l.isra.0+0xea>
 80073a8:	b106      	cbz	r6, 80073ac <_strtol_l.isra.0+0xe0>
 80073aa:	4240      	negs	r0, r0
 80073ac:	f1b8 0f00 	cmp.w	r8, #0
 80073b0:	d099      	beq.n	80072e6 <_strtol_l.isra.0+0x1a>
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	d1f6      	bne.n	80073a4 <_strtol_l.isra.0+0xd8>
 80073b6:	f8c8 1000 	str.w	r1, [r8]
 80073ba:	e794      	b.n	80072e6 <_strtol_l.isra.0+0x1a>
 80073bc:	080088e9 	.word	0x080088e9

080073c0 <_strtol_r>:
 80073c0:	f7ff bf84 	b.w	80072cc <_strtol_l.isra.0>

080073c4 <__ssputs_r>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	688e      	ldr	r6, [r1, #8]
 80073ca:	461f      	mov	r7, r3
 80073cc:	42be      	cmp	r6, r7
 80073ce:	680b      	ldr	r3, [r1, #0]
 80073d0:	4682      	mov	sl, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	4690      	mov	r8, r2
 80073d6:	d82d      	bhi.n	8007434 <__ssputs_r+0x70>
 80073d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073e0:	d026      	beq.n	8007430 <__ssputs_r+0x6c>
 80073e2:	6965      	ldr	r5, [r4, #20]
 80073e4:	6909      	ldr	r1, [r1, #16]
 80073e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073ea:	eba3 0901 	sub.w	r9, r3, r1
 80073ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073f2:	1c7b      	adds	r3, r7, #1
 80073f4:	444b      	add	r3, r9
 80073f6:	106d      	asrs	r5, r5, #1
 80073f8:	429d      	cmp	r5, r3
 80073fa:	bf38      	it	cc
 80073fc:	461d      	movcc	r5, r3
 80073fe:	0553      	lsls	r3, r2, #21
 8007400:	d527      	bpl.n	8007452 <__ssputs_r+0x8e>
 8007402:	4629      	mov	r1, r5
 8007404:	f7fe fc24 	bl	8005c50 <_malloc_r>
 8007408:	4606      	mov	r6, r0
 800740a:	b360      	cbz	r0, 8007466 <__ssputs_r+0xa2>
 800740c:	6921      	ldr	r1, [r4, #16]
 800740e:	464a      	mov	r2, r9
 8007410:	f7fd fd3d 	bl	8004e8e <memcpy>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800741a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	6126      	str	r6, [r4, #16]
 8007422:	6165      	str	r5, [r4, #20]
 8007424:	444e      	add	r6, r9
 8007426:	eba5 0509 	sub.w	r5, r5, r9
 800742a:	6026      	str	r6, [r4, #0]
 800742c:	60a5      	str	r5, [r4, #8]
 800742e:	463e      	mov	r6, r7
 8007430:	42be      	cmp	r6, r7
 8007432:	d900      	bls.n	8007436 <__ssputs_r+0x72>
 8007434:	463e      	mov	r6, r7
 8007436:	6820      	ldr	r0, [r4, #0]
 8007438:	4632      	mov	r2, r6
 800743a:	4641      	mov	r1, r8
 800743c:	f000 f9c6 	bl	80077cc <memmove>
 8007440:	68a3      	ldr	r3, [r4, #8]
 8007442:	1b9b      	subs	r3, r3, r6
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	4433      	add	r3, r6
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	2000      	movs	r0, #0
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	462a      	mov	r2, r5
 8007454:	f000 fd7d 	bl	8007f52 <_realloc_r>
 8007458:	4606      	mov	r6, r0
 800745a:	2800      	cmp	r0, #0
 800745c:	d1e0      	bne.n	8007420 <__ssputs_r+0x5c>
 800745e:	6921      	ldr	r1, [r4, #16]
 8007460:	4650      	mov	r0, sl
 8007462:	f7fe fb81 	bl	8005b68 <_free_r>
 8007466:	230c      	movs	r3, #12
 8007468:	f8ca 3000 	str.w	r3, [sl]
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	e7e9      	b.n	800744e <__ssputs_r+0x8a>
	...

0800747c <_svfiprintf_r>:
 800747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	4698      	mov	r8, r3
 8007482:	898b      	ldrh	r3, [r1, #12]
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	b09d      	sub	sp, #116	@ 0x74
 8007488:	4607      	mov	r7, r0
 800748a:	460d      	mov	r5, r1
 800748c:	4614      	mov	r4, r2
 800748e:	d510      	bpl.n	80074b2 <_svfiprintf_r+0x36>
 8007490:	690b      	ldr	r3, [r1, #16]
 8007492:	b973      	cbnz	r3, 80074b2 <_svfiprintf_r+0x36>
 8007494:	2140      	movs	r1, #64	@ 0x40
 8007496:	f7fe fbdb 	bl	8005c50 <_malloc_r>
 800749a:	6028      	str	r0, [r5, #0]
 800749c:	6128      	str	r0, [r5, #16]
 800749e:	b930      	cbnz	r0, 80074ae <_svfiprintf_r+0x32>
 80074a0:	230c      	movs	r3, #12
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	b01d      	add	sp, #116	@ 0x74
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	2340      	movs	r3, #64	@ 0x40
 80074b0:	616b      	str	r3, [r5, #20]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b6:	2320      	movs	r3, #32
 80074b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80074c0:	2330      	movs	r3, #48	@ 0x30
 80074c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007660 <_svfiprintf_r+0x1e4>
 80074c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074ca:	f04f 0901 	mov.w	r9, #1
 80074ce:	4623      	mov	r3, r4
 80074d0:	469a      	mov	sl, r3
 80074d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d6:	b10a      	cbz	r2, 80074dc <_svfiprintf_r+0x60>
 80074d8:	2a25      	cmp	r2, #37	@ 0x25
 80074da:	d1f9      	bne.n	80074d0 <_svfiprintf_r+0x54>
 80074dc:	ebba 0b04 	subs.w	fp, sl, r4
 80074e0:	d00b      	beq.n	80074fa <_svfiprintf_r+0x7e>
 80074e2:	465b      	mov	r3, fp
 80074e4:	4622      	mov	r2, r4
 80074e6:	4629      	mov	r1, r5
 80074e8:	4638      	mov	r0, r7
 80074ea:	f7ff ff6b 	bl	80073c4 <__ssputs_r>
 80074ee:	3001      	adds	r0, #1
 80074f0:	f000 80a7 	beq.w	8007642 <_svfiprintf_r+0x1c6>
 80074f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f6:	445a      	add	r2, fp
 80074f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80074fa:	f89a 3000 	ldrb.w	r3, [sl]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 809f 	beq.w	8007642 <_svfiprintf_r+0x1c6>
 8007504:	2300      	movs	r3, #0
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800750e:	f10a 0a01 	add.w	sl, sl, #1
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	9307      	str	r3, [sp, #28]
 8007516:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800751a:	931a      	str	r3, [sp, #104]	@ 0x68
 800751c:	4654      	mov	r4, sl
 800751e:	2205      	movs	r2, #5
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	484e      	ldr	r0, [pc, #312]	@ (8007660 <_svfiprintf_r+0x1e4>)
 8007526:	f7f8 fe5b 	bl	80001e0 <memchr>
 800752a:	9a04      	ldr	r2, [sp, #16]
 800752c:	b9d8      	cbnz	r0, 8007566 <_svfiprintf_r+0xea>
 800752e:	06d0      	lsls	r0, r2, #27
 8007530:	bf44      	itt	mi
 8007532:	2320      	movmi	r3, #32
 8007534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007538:	0711      	lsls	r1, r2, #28
 800753a:	bf44      	itt	mi
 800753c:	232b      	movmi	r3, #43	@ 0x2b
 800753e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007542:	f89a 3000 	ldrb.w	r3, [sl]
 8007546:	2b2a      	cmp	r3, #42	@ 0x2a
 8007548:	d015      	beq.n	8007576 <_svfiprintf_r+0xfa>
 800754a:	9a07      	ldr	r2, [sp, #28]
 800754c:	4654      	mov	r4, sl
 800754e:	2000      	movs	r0, #0
 8007550:	f04f 0c0a 	mov.w	ip, #10
 8007554:	4621      	mov	r1, r4
 8007556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800755a:	3b30      	subs	r3, #48	@ 0x30
 800755c:	2b09      	cmp	r3, #9
 800755e:	d94b      	bls.n	80075f8 <_svfiprintf_r+0x17c>
 8007560:	b1b0      	cbz	r0, 8007590 <_svfiprintf_r+0x114>
 8007562:	9207      	str	r2, [sp, #28]
 8007564:	e014      	b.n	8007590 <_svfiprintf_r+0x114>
 8007566:	eba0 0308 	sub.w	r3, r0, r8
 800756a:	fa09 f303 	lsl.w	r3, r9, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	9304      	str	r3, [sp, #16]
 8007572:	46a2      	mov	sl, r4
 8007574:	e7d2      	b.n	800751c <_svfiprintf_r+0xa0>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	1d19      	adds	r1, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9103      	str	r1, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	bfbb      	ittet	lt
 8007582:	425b      	neglt	r3, r3
 8007584:	f042 0202 	orrlt.w	r2, r2, #2
 8007588:	9307      	strge	r3, [sp, #28]
 800758a:	9307      	strlt	r3, [sp, #28]
 800758c:	bfb8      	it	lt
 800758e:	9204      	strlt	r2, [sp, #16]
 8007590:	7823      	ldrb	r3, [r4, #0]
 8007592:	2b2e      	cmp	r3, #46	@ 0x2e
 8007594:	d10a      	bne.n	80075ac <_svfiprintf_r+0x130>
 8007596:	7863      	ldrb	r3, [r4, #1]
 8007598:	2b2a      	cmp	r3, #42	@ 0x2a
 800759a:	d132      	bne.n	8007602 <_svfiprintf_r+0x186>
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	9203      	str	r2, [sp, #12]
 80075a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075a8:	3402      	adds	r4, #2
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007670 <_svfiprintf_r+0x1f4>
 80075b0:	7821      	ldrb	r1, [r4, #0]
 80075b2:	2203      	movs	r2, #3
 80075b4:	4650      	mov	r0, sl
 80075b6:	f7f8 fe13 	bl	80001e0 <memchr>
 80075ba:	b138      	cbz	r0, 80075cc <_svfiprintf_r+0x150>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	eba0 000a 	sub.w	r0, r0, sl
 80075c2:	2240      	movs	r2, #64	@ 0x40
 80075c4:	4082      	lsls	r2, r0
 80075c6:	4313      	orrs	r3, r2
 80075c8:	3401      	adds	r4, #1
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	4824      	ldr	r0, [pc, #144]	@ (8007664 <_svfiprintf_r+0x1e8>)
 80075d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075d6:	2206      	movs	r2, #6
 80075d8:	f7f8 fe02 	bl	80001e0 <memchr>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d036      	beq.n	800764e <_svfiprintf_r+0x1d2>
 80075e0:	4b21      	ldr	r3, [pc, #132]	@ (8007668 <_svfiprintf_r+0x1ec>)
 80075e2:	bb1b      	cbnz	r3, 800762c <_svfiprintf_r+0x1b0>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	3307      	adds	r3, #7
 80075e8:	f023 0307 	bic.w	r3, r3, #7
 80075ec:	3308      	adds	r3, #8
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f2:	4433      	add	r3, r6
 80075f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f6:	e76a      	b.n	80074ce <_svfiprintf_r+0x52>
 80075f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fc:	460c      	mov	r4, r1
 80075fe:	2001      	movs	r0, #1
 8007600:	e7a8      	b.n	8007554 <_svfiprintf_r+0xd8>
 8007602:	2300      	movs	r3, #0
 8007604:	3401      	adds	r4, #1
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	4619      	mov	r1, r3
 800760a:	f04f 0c0a 	mov.w	ip, #10
 800760e:	4620      	mov	r0, r4
 8007610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007614:	3a30      	subs	r2, #48	@ 0x30
 8007616:	2a09      	cmp	r2, #9
 8007618:	d903      	bls.n	8007622 <_svfiprintf_r+0x1a6>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0c6      	beq.n	80075ac <_svfiprintf_r+0x130>
 800761e:	9105      	str	r1, [sp, #20]
 8007620:	e7c4      	b.n	80075ac <_svfiprintf_r+0x130>
 8007622:	fb0c 2101 	mla	r1, ip, r1, r2
 8007626:	4604      	mov	r4, r0
 8007628:	2301      	movs	r3, #1
 800762a:	e7f0      	b.n	800760e <_svfiprintf_r+0x192>
 800762c:	ab03      	add	r3, sp, #12
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	462a      	mov	r2, r5
 8007632:	4b0e      	ldr	r3, [pc, #56]	@ (800766c <_svfiprintf_r+0x1f0>)
 8007634:	a904      	add	r1, sp, #16
 8007636:	4638      	mov	r0, r7
 8007638:	f7fc fc60 	bl	8003efc <_printf_float>
 800763c:	1c42      	adds	r2, r0, #1
 800763e:	4606      	mov	r6, r0
 8007640:	d1d6      	bne.n	80075f0 <_svfiprintf_r+0x174>
 8007642:	89ab      	ldrh	r3, [r5, #12]
 8007644:	065b      	lsls	r3, r3, #25
 8007646:	f53f af2d 	bmi.w	80074a4 <_svfiprintf_r+0x28>
 800764a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800764c:	e72c      	b.n	80074a8 <_svfiprintf_r+0x2c>
 800764e:	ab03      	add	r3, sp, #12
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	462a      	mov	r2, r5
 8007654:	4b05      	ldr	r3, [pc, #20]	@ (800766c <_svfiprintf_r+0x1f0>)
 8007656:	a904      	add	r1, sp, #16
 8007658:	4638      	mov	r0, r7
 800765a:	f7fc fee7 	bl	800442c <_printf_i>
 800765e:	e7ed      	b.n	800763c <_svfiprintf_r+0x1c0>
 8007660:	080086cf 	.word	0x080086cf
 8007664:	080086d9 	.word	0x080086d9
 8007668:	08003efd 	.word	0x08003efd
 800766c:	080073c5 	.word	0x080073c5
 8007670:	080086d5 	.word	0x080086d5

08007674 <__sflush_r>:
 8007674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	0716      	lsls	r6, r2, #28
 800767e:	4605      	mov	r5, r0
 8007680:	460c      	mov	r4, r1
 8007682:	d454      	bmi.n	800772e <__sflush_r+0xba>
 8007684:	684b      	ldr	r3, [r1, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	dc02      	bgt.n	8007690 <__sflush_r+0x1c>
 800768a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd48      	ble.n	8007722 <__sflush_r+0xae>
 8007690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007692:	2e00      	cmp	r6, #0
 8007694:	d045      	beq.n	8007722 <__sflush_r+0xae>
 8007696:	2300      	movs	r3, #0
 8007698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800769c:	682f      	ldr	r7, [r5, #0]
 800769e:	6a21      	ldr	r1, [r4, #32]
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	d030      	beq.n	8007706 <__sflush_r+0x92>
 80076a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	0759      	lsls	r1, r3, #29
 80076aa:	d505      	bpl.n	80076b8 <__sflush_r+0x44>
 80076ac:	6863      	ldr	r3, [r4, #4]
 80076ae:	1ad2      	subs	r2, r2, r3
 80076b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076b2:	b10b      	cbz	r3, 80076b8 <__sflush_r+0x44>
 80076b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	2300      	movs	r3, #0
 80076ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076bc:	6a21      	ldr	r1, [r4, #32]
 80076be:	4628      	mov	r0, r5
 80076c0:	47b0      	blx	r6
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	d106      	bne.n	80076d6 <__sflush_r+0x62>
 80076c8:	6829      	ldr	r1, [r5, #0]
 80076ca:	291d      	cmp	r1, #29
 80076cc:	d82b      	bhi.n	8007726 <__sflush_r+0xb2>
 80076ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007778 <__sflush_r+0x104>)
 80076d0:	40ca      	lsrs	r2, r1
 80076d2:	07d6      	lsls	r6, r2, #31
 80076d4:	d527      	bpl.n	8007726 <__sflush_r+0xb2>
 80076d6:	2200      	movs	r2, #0
 80076d8:	6062      	str	r2, [r4, #4]
 80076da:	04d9      	lsls	r1, r3, #19
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	d504      	bpl.n	80076ec <__sflush_r+0x78>
 80076e2:	1c42      	adds	r2, r0, #1
 80076e4:	d101      	bne.n	80076ea <__sflush_r+0x76>
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	b903      	cbnz	r3, 80076ec <__sflush_r+0x78>
 80076ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80076ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076ee:	602f      	str	r7, [r5, #0]
 80076f0:	b1b9      	cbz	r1, 8007722 <__sflush_r+0xae>
 80076f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076f6:	4299      	cmp	r1, r3
 80076f8:	d002      	beq.n	8007700 <__sflush_r+0x8c>
 80076fa:	4628      	mov	r0, r5
 80076fc:	f7fe fa34 	bl	8005b68 <_free_r>
 8007700:	2300      	movs	r3, #0
 8007702:	6363      	str	r3, [r4, #52]	@ 0x34
 8007704:	e00d      	b.n	8007722 <__sflush_r+0xae>
 8007706:	2301      	movs	r3, #1
 8007708:	4628      	mov	r0, r5
 800770a:	47b0      	blx	r6
 800770c:	4602      	mov	r2, r0
 800770e:	1c50      	adds	r0, r2, #1
 8007710:	d1c9      	bne.n	80076a6 <__sflush_r+0x32>
 8007712:	682b      	ldr	r3, [r5, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0c6      	beq.n	80076a6 <__sflush_r+0x32>
 8007718:	2b1d      	cmp	r3, #29
 800771a:	d001      	beq.n	8007720 <__sflush_r+0xac>
 800771c:	2b16      	cmp	r3, #22
 800771e:	d11e      	bne.n	800775e <__sflush_r+0xea>
 8007720:	602f      	str	r7, [r5, #0]
 8007722:	2000      	movs	r0, #0
 8007724:	e022      	b.n	800776c <__sflush_r+0xf8>
 8007726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772a:	b21b      	sxth	r3, r3
 800772c:	e01b      	b.n	8007766 <__sflush_r+0xf2>
 800772e:	690f      	ldr	r7, [r1, #16]
 8007730:	2f00      	cmp	r7, #0
 8007732:	d0f6      	beq.n	8007722 <__sflush_r+0xae>
 8007734:	0793      	lsls	r3, r2, #30
 8007736:	680e      	ldr	r6, [r1, #0]
 8007738:	bf08      	it	eq
 800773a:	694b      	ldreq	r3, [r1, #20]
 800773c:	600f      	str	r7, [r1, #0]
 800773e:	bf18      	it	ne
 8007740:	2300      	movne	r3, #0
 8007742:	eba6 0807 	sub.w	r8, r6, r7
 8007746:	608b      	str	r3, [r1, #8]
 8007748:	f1b8 0f00 	cmp.w	r8, #0
 800774c:	dde9      	ble.n	8007722 <__sflush_r+0xae>
 800774e:	6a21      	ldr	r1, [r4, #32]
 8007750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007752:	4643      	mov	r3, r8
 8007754:	463a      	mov	r2, r7
 8007756:	4628      	mov	r0, r5
 8007758:	47b0      	blx	r6
 800775a:	2800      	cmp	r0, #0
 800775c:	dc08      	bgt.n	8007770 <__sflush_r+0xfc>
 800775e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	4407      	add	r7, r0
 8007772:	eba8 0800 	sub.w	r8, r8, r0
 8007776:	e7e7      	b.n	8007748 <__sflush_r+0xd4>
 8007778:	20400001 	.word	0x20400001

0800777c <_fflush_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	b913      	cbnz	r3, 800778c <_fflush_r+0x10>
 8007786:	2500      	movs	r5, #0
 8007788:	4628      	mov	r0, r5
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	b118      	cbz	r0, 8007796 <_fflush_r+0x1a>
 800778e:	6a03      	ldr	r3, [r0, #32]
 8007790:	b90b      	cbnz	r3, 8007796 <_fflush_r+0x1a>
 8007792:	f7fd fa03 	bl	8004b9c <__sinit>
 8007796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0f3      	beq.n	8007786 <_fflush_r+0xa>
 800779e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077a0:	07d0      	lsls	r0, r2, #31
 80077a2:	d404      	bmi.n	80077ae <_fflush_r+0x32>
 80077a4:	0599      	lsls	r1, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_fflush_r+0x32>
 80077a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077aa:	f7fd fb6e 	bl	8004e8a <__retarget_lock_acquire_recursive>
 80077ae:	4628      	mov	r0, r5
 80077b0:	4621      	mov	r1, r4
 80077b2:	f7ff ff5f 	bl	8007674 <__sflush_r>
 80077b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077b8:	07da      	lsls	r2, r3, #31
 80077ba:	4605      	mov	r5, r0
 80077bc:	d4e4      	bmi.n	8007788 <_fflush_r+0xc>
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	059b      	lsls	r3, r3, #22
 80077c2:	d4e1      	bmi.n	8007788 <_fflush_r+0xc>
 80077c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077c6:	f7fd fb61 	bl	8004e8c <__retarget_lock_release_recursive>
 80077ca:	e7dd      	b.n	8007788 <_fflush_r+0xc>

080077cc <memmove>:
 80077cc:	4288      	cmp	r0, r1
 80077ce:	b510      	push	{r4, lr}
 80077d0:	eb01 0402 	add.w	r4, r1, r2
 80077d4:	d902      	bls.n	80077dc <memmove+0x10>
 80077d6:	4284      	cmp	r4, r0
 80077d8:	4623      	mov	r3, r4
 80077da:	d807      	bhi.n	80077ec <memmove+0x20>
 80077dc:	1e43      	subs	r3, r0, #1
 80077de:	42a1      	cmp	r1, r4
 80077e0:	d008      	beq.n	80077f4 <memmove+0x28>
 80077e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ea:	e7f8      	b.n	80077de <memmove+0x12>
 80077ec:	4402      	add	r2, r0
 80077ee:	4601      	mov	r1, r0
 80077f0:	428a      	cmp	r2, r1
 80077f2:	d100      	bne.n	80077f6 <memmove+0x2a>
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077fe:	e7f7      	b.n	80077f0 <memmove+0x24>

08007800 <strncmp>:
 8007800:	b510      	push	{r4, lr}
 8007802:	b16a      	cbz	r2, 8007820 <strncmp+0x20>
 8007804:	3901      	subs	r1, #1
 8007806:	1884      	adds	r4, r0, r2
 8007808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007810:	429a      	cmp	r2, r3
 8007812:	d103      	bne.n	800781c <strncmp+0x1c>
 8007814:	42a0      	cmp	r0, r4
 8007816:	d001      	beq.n	800781c <strncmp+0x1c>
 8007818:	2a00      	cmp	r2, #0
 800781a:	d1f5      	bne.n	8007808 <strncmp+0x8>
 800781c:	1ad0      	subs	r0, r2, r3
 800781e:	bd10      	pop	{r4, pc}
 8007820:	4610      	mov	r0, r2
 8007822:	e7fc      	b.n	800781e <strncmp+0x1e>

08007824 <_sbrk_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	@ (8007840 <_sbrk_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 fe9e 	bl	8001570 <_sbrk>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_sbrk_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_sbrk_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20004dd8 	.word	0x20004dd8
 8007844:	00000000 	.word	0x00000000

08007848 <nan>:
 8007848:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007850 <nan+0x8>
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	00000000 	.word	0x00000000
 8007854:	7ff80000 	.word	0x7ff80000

08007858 <__assert_func>:
 8007858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800785a:	4614      	mov	r4, r2
 800785c:	461a      	mov	r2, r3
 800785e:	4b09      	ldr	r3, [pc, #36]	@ (8007884 <__assert_func+0x2c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4605      	mov	r5, r0
 8007864:	68d8      	ldr	r0, [r3, #12]
 8007866:	b14c      	cbz	r4, 800787c <__assert_func+0x24>
 8007868:	4b07      	ldr	r3, [pc, #28]	@ (8007888 <__assert_func+0x30>)
 800786a:	9100      	str	r1, [sp, #0]
 800786c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007870:	4906      	ldr	r1, [pc, #24]	@ (800788c <__assert_func+0x34>)
 8007872:	462b      	mov	r3, r5
 8007874:	f000 fba8 	bl	8007fc8 <fiprintf>
 8007878:	f000 fbb8 	bl	8007fec <abort>
 800787c:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <__assert_func+0x38>)
 800787e:	461c      	mov	r4, r3
 8007880:	e7f3      	b.n	800786a <__assert_func+0x12>
 8007882:	bf00      	nop
 8007884:	2000001c 	.word	0x2000001c
 8007888:	080086e8 	.word	0x080086e8
 800788c:	080086f5 	.word	0x080086f5
 8007890:	08008573 	.word	0x08008573

08007894 <_calloc_r>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	fba1 5402 	umull	r5, r4, r1, r2
 800789a:	b934      	cbnz	r4, 80078aa <_calloc_r+0x16>
 800789c:	4629      	mov	r1, r5
 800789e:	f7fe f9d7 	bl	8005c50 <_malloc_r>
 80078a2:	4606      	mov	r6, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <_calloc_r+0x1e>
 80078a6:	4630      	mov	r0, r6
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	220c      	movs	r2, #12
 80078ac:	6002      	str	r2, [r0, #0]
 80078ae:	2600      	movs	r6, #0
 80078b0:	e7f9      	b.n	80078a6 <_calloc_r+0x12>
 80078b2:	462a      	mov	r2, r5
 80078b4:	4621      	mov	r1, r4
 80078b6:	f7fd fa0c 	bl	8004cd2 <memset>
 80078ba:	e7f4      	b.n	80078a6 <_calloc_r+0x12>

080078bc <rshift>:
 80078bc:	6903      	ldr	r3, [r0, #16]
 80078be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80078c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078ca:	f100 0414 	add.w	r4, r0, #20
 80078ce:	dd45      	ble.n	800795c <rshift+0xa0>
 80078d0:	f011 011f 	ands.w	r1, r1, #31
 80078d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078dc:	d10c      	bne.n	80078f8 <rshift+0x3c>
 80078de:	f100 0710 	add.w	r7, r0, #16
 80078e2:	4629      	mov	r1, r5
 80078e4:	42b1      	cmp	r1, r6
 80078e6:	d334      	bcc.n	8007952 <rshift+0x96>
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	1eea      	subs	r2, r5, #3
 80078ee:	4296      	cmp	r6, r2
 80078f0:	bf38      	it	cc
 80078f2:	2300      	movcc	r3, #0
 80078f4:	4423      	add	r3, r4
 80078f6:	e015      	b.n	8007924 <rshift+0x68>
 80078f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078fc:	f1c1 0820 	rsb	r8, r1, #32
 8007900:	40cf      	lsrs	r7, r1
 8007902:	f105 0e04 	add.w	lr, r5, #4
 8007906:	46a1      	mov	r9, r4
 8007908:	4576      	cmp	r6, lr
 800790a:	46f4      	mov	ip, lr
 800790c:	d815      	bhi.n	800793a <rshift+0x7e>
 800790e:	1a9a      	subs	r2, r3, r2
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	3a04      	subs	r2, #4
 8007914:	3501      	adds	r5, #1
 8007916:	42ae      	cmp	r6, r5
 8007918:	bf38      	it	cc
 800791a:	2200      	movcc	r2, #0
 800791c:	18a3      	adds	r3, r4, r2
 800791e:	50a7      	str	r7, [r4, r2]
 8007920:	b107      	cbz	r7, 8007924 <rshift+0x68>
 8007922:	3304      	adds	r3, #4
 8007924:	1b1a      	subs	r2, r3, r4
 8007926:	42a3      	cmp	r3, r4
 8007928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800792c:	bf08      	it	eq
 800792e:	2300      	moveq	r3, #0
 8007930:	6102      	str	r2, [r0, #16]
 8007932:	bf08      	it	eq
 8007934:	6143      	streq	r3, [r0, #20]
 8007936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800793a:	f8dc c000 	ldr.w	ip, [ip]
 800793e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007942:	ea4c 0707 	orr.w	r7, ip, r7
 8007946:	f849 7b04 	str.w	r7, [r9], #4
 800794a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800794e:	40cf      	lsrs	r7, r1
 8007950:	e7da      	b.n	8007908 <rshift+0x4c>
 8007952:	f851 cb04 	ldr.w	ip, [r1], #4
 8007956:	f847 cf04 	str.w	ip, [r7, #4]!
 800795a:	e7c3      	b.n	80078e4 <rshift+0x28>
 800795c:	4623      	mov	r3, r4
 800795e:	e7e1      	b.n	8007924 <rshift+0x68>

08007960 <__hexdig_fun>:
 8007960:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007964:	2b09      	cmp	r3, #9
 8007966:	d802      	bhi.n	800796e <__hexdig_fun+0xe>
 8007968:	3820      	subs	r0, #32
 800796a:	b2c0      	uxtb	r0, r0
 800796c:	4770      	bx	lr
 800796e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007972:	2b05      	cmp	r3, #5
 8007974:	d801      	bhi.n	800797a <__hexdig_fun+0x1a>
 8007976:	3847      	subs	r0, #71	@ 0x47
 8007978:	e7f7      	b.n	800796a <__hexdig_fun+0xa>
 800797a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800797e:	2b05      	cmp	r3, #5
 8007980:	d801      	bhi.n	8007986 <__hexdig_fun+0x26>
 8007982:	3827      	subs	r0, #39	@ 0x27
 8007984:	e7f1      	b.n	800796a <__hexdig_fun+0xa>
 8007986:	2000      	movs	r0, #0
 8007988:	4770      	bx	lr
	...

0800798c <__gethex>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	b085      	sub	sp, #20
 8007992:	468a      	mov	sl, r1
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	680b      	ldr	r3, [r1, #0]
 8007998:	9001      	str	r0, [sp, #4]
 800799a:	4690      	mov	r8, r2
 800799c:	1c9c      	adds	r4, r3, #2
 800799e:	46a1      	mov	r9, r4
 80079a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80079a4:	2830      	cmp	r0, #48	@ 0x30
 80079a6:	d0fa      	beq.n	800799e <__gethex+0x12>
 80079a8:	eba9 0303 	sub.w	r3, r9, r3
 80079ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80079b0:	f7ff ffd6 	bl	8007960 <__hexdig_fun>
 80079b4:	4605      	mov	r5, r0
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d168      	bne.n	8007a8c <__gethex+0x100>
 80079ba:	49a0      	ldr	r1, [pc, #640]	@ (8007c3c <__gethex+0x2b0>)
 80079bc:	2201      	movs	r2, #1
 80079be:	4648      	mov	r0, r9
 80079c0:	f7ff ff1e 	bl	8007800 <strncmp>
 80079c4:	4607      	mov	r7, r0
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d167      	bne.n	8007a9a <__gethex+0x10e>
 80079ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80079ce:	4626      	mov	r6, r4
 80079d0:	f7ff ffc6 	bl	8007960 <__hexdig_fun>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d062      	beq.n	8007a9e <__gethex+0x112>
 80079d8:	4623      	mov	r3, r4
 80079da:	7818      	ldrb	r0, [r3, #0]
 80079dc:	2830      	cmp	r0, #48	@ 0x30
 80079de:	4699      	mov	r9, r3
 80079e0:	f103 0301 	add.w	r3, r3, #1
 80079e4:	d0f9      	beq.n	80079da <__gethex+0x4e>
 80079e6:	f7ff ffbb 	bl	8007960 <__hexdig_fun>
 80079ea:	fab0 f580 	clz	r5, r0
 80079ee:	096d      	lsrs	r5, r5, #5
 80079f0:	f04f 0b01 	mov.w	fp, #1
 80079f4:	464a      	mov	r2, r9
 80079f6:	4616      	mov	r6, r2
 80079f8:	3201      	adds	r2, #1
 80079fa:	7830      	ldrb	r0, [r6, #0]
 80079fc:	f7ff ffb0 	bl	8007960 <__hexdig_fun>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d1f8      	bne.n	80079f6 <__gethex+0x6a>
 8007a04:	498d      	ldr	r1, [pc, #564]	@ (8007c3c <__gethex+0x2b0>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7ff fef9 	bl	8007800 <strncmp>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d13f      	bne.n	8007a92 <__gethex+0x106>
 8007a12:	b944      	cbnz	r4, 8007a26 <__gethex+0x9a>
 8007a14:	1c74      	adds	r4, r6, #1
 8007a16:	4622      	mov	r2, r4
 8007a18:	4616      	mov	r6, r2
 8007a1a:	3201      	adds	r2, #1
 8007a1c:	7830      	ldrb	r0, [r6, #0]
 8007a1e:	f7ff ff9f 	bl	8007960 <__hexdig_fun>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d1f8      	bne.n	8007a18 <__gethex+0x8c>
 8007a26:	1ba4      	subs	r4, r4, r6
 8007a28:	00a7      	lsls	r7, r4, #2
 8007a2a:	7833      	ldrb	r3, [r6, #0]
 8007a2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007a30:	2b50      	cmp	r3, #80	@ 0x50
 8007a32:	d13e      	bne.n	8007ab2 <__gethex+0x126>
 8007a34:	7873      	ldrb	r3, [r6, #1]
 8007a36:	2b2b      	cmp	r3, #43	@ 0x2b
 8007a38:	d033      	beq.n	8007aa2 <__gethex+0x116>
 8007a3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a3c:	d034      	beq.n	8007aa8 <__gethex+0x11c>
 8007a3e:	1c71      	adds	r1, r6, #1
 8007a40:	2400      	movs	r4, #0
 8007a42:	7808      	ldrb	r0, [r1, #0]
 8007a44:	f7ff ff8c 	bl	8007960 <__hexdig_fun>
 8007a48:	1e43      	subs	r3, r0, #1
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b18      	cmp	r3, #24
 8007a4e:	d830      	bhi.n	8007ab2 <__gethex+0x126>
 8007a50:	f1a0 0210 	sub.w	r2, r0, #16
 8007a54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a58:	f7ff ff82 	bl	8007960 <__hexdig_fun>
 8007a5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a60:	fa5f fc8c 	uxtb.w	ip, ip
 8007a64:	f1bc 0f18 	cmp.w	ip, #24
 8007a68:	f04f 030a 	mov.w	r3, #10
 8007a6c:	d91e      	bls.n	8007aac <__gethex+0x120>
 8007a6e:	b104      	cbz	r4, 8007a72 <__gethex+0xe6>
 8007a70:	4252      	negs	r2, r2
 8007a72:	4417      	add	r7, r2
 8007a74:	f8ca 1000 	str.w	r1, [sl]
 8007a78:	b1ed      	cbz	r5, 8007ab6 <__gethex+0x12a>
 8007a7a:	f1bb 0f00 	cmp.w	fp, #0
 8007a7e:	bf0c      	ite	eq
 8007a80:	2506      	moveq	r5, #6
 8007a82:	2500      	movne	r5, #0
 8007a84:	4628      	mov	r0, r5
 8007a86:	b005      	add	sp, #20
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	462c      	mov	r4, r5
 8007a90:	e7b0      	b.n	80079f4 <__gethex+0x68>
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	d1c7      	bne.n	8007a26 <__gethex+0x9a>
 8007a96:	4627      	mov	r7, r4
 8007a98:	e7c7      	b.n	8007a2a <__gethex+0x9e>
 8007a9a:	464e      	mov	r6, r9
 8007a9c:	462f      	mov	r7, r5
 8007a9e:	2501      	movs	r5, #1
 8007aa0:	e7c3      	b.n	8007a2a <__gethex+0x9e>
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	1cb1      	adds	r1, r6, #2
 8007aa6:	e7cc      	b.n	8007a42 <__gethex+0xb6>
 8007aa8:	2401      	movs	r4, #1
 8007aaa:	e7fb      	b.n	8007aa4 <__gethex+0x118>
 8007aac:	fb03 0002 	mla	r0, r3, r2, r0
 8007ab0:	e7ce      	b.n	8007a50 <__gethex+0xc4>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	e7de      	b.n	8007a74 <__gethex+0xe8>
 8007ab6:	eba6 0309 	sub.w	r3, r6, r9
 8007aba:	3b01      	subs	r3, #1
 8007abc:	4629      	mov	r1, r5
 8007abe:	2b07      	cmp	r3, #7
 8007ac0:	dc0a      	bgt.n	8007ad8 <__gethex+0x14c>
 8007ac2:	9801      	ldr	r0, [sp, #4]
 8007ac4:	f7fe f950 	bl	8005d68 <_Balloc>
 8007ac8:	4604      	mov	r4, r0
 8007aca:	b940      	cbnz	r0, 8007ade <__gethex+0x152>
 8007acc:	4b5c      	ldr	r3, [pc, #368]	@ (8007c40 <__gethex+0x2b4>)
 8007ace:	4602      	mov	r2, r0
 8007ad0:	21e4      	movs	r1, #228	@ 0xe4
 8007ad2:	485c      	ldr	r0, [pc, #368]	@ (8007c44 <__gethex+0x2b8>)
 8007ad4:	f7ff fec0 	bl	8007858 <__assert_func>
 8007ad8:	3101      	adds	r1, #1
 8007ada:	105b      	asrs	r3, r3, #1
 8007adc:	e7ef      	b.n	8007abe <__gethex+0x132>
 8007ade:	f100 0a14 	add.w	sl, r0, #20
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4655      	mov	r5, sl
 8007ae6:	469b      	mov	fp, r3
 8007ae8:	45b1      	cmp	r9, r6
 8007aea:	d337      	bcc.n	8007b5c <__gethex+0x1d0>
 8007aec:	f845 bb04 	str.w	fp, [r5], #4
 8007af0:	eba5 050a 	sub.w	r5, r5, sl
 8007af4:	10ad      	asrs	r5, r5, #2
 8007af6:	6125      	str	r5, [r4, #16]
 8007af8:	4658      	mov	r0, fp
 8007afa:	f7fe fa27 	bl	8005f4c <__hi0bits>
 8007afe:	016d      	lsls	r5, r5, #5
 8007b00:	f8d8 6000 	ldr.w	r6, [r8]
 8007b04:	1a2d      	subs	r5, r5, r0
 8007b06:	42b5      	cmp	r5, r6
 8007b08:	dd54      	ble.n	8007bb4 <__gethex+0x228>
 8007b0a:	1bad      	subs	r5, r5, r6
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7fe fdb3 	bl	800667a <__any_on>
 8007b14:	4681      	mov	r9, r0
 8007b16:	b178      	cbz	r0, 8007b38 <__gethex+0x1ac>
 8007b18:	1e6b      	subs	r3, r5, #1
 8007b1a:	1159      	asrs	r1, r3, #5
 8007b1c:	f003 021f 	and.w	r2, r3, #31
 8007b20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007b24:	f04f 0901 	mov.w	r9, #1
 8007b28:	fa09 f202 	lsl.w	r2, r9, r2
 8007b2c:	420a      	tst	r2, r1
 8007b2e:	d003      	beq.n	8007b38 <__gethex+0x1ac>
 8007b30:	454b      	cmp	r3, r9
 8007b32:	dc36      	bgt.n	8007ba2 <__gethex+0x216>
 8007b34:	f04f 0902 	mov.w	r9, #2
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7ff febe 	bl	80078bc <rshift>
 8007b40:	442f      	add	r7, r5
 8007b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b46:	42bb      	cmp	r3, r7
 8007b48:	da42      	bge.n	8007bd0 <__gethex+0x244>
 8007b4a:	9801      	ldr	r0, [sp, #4]
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	f7fe f94b 	bl	8005de8 <_Bfree>
 8007b52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b54:	2300      	movs	r3, #0
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	25a3      	movs	r5, #163	@ 0xa3
 8007b5a:	e793      	b.n	8007a84 <__gethex+0xf8>
 8007b5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007b60:	2a2e      	cmp	r2, #46	@ 0x2e
 8007b62:	d012      	beq.n	8007b8a <__gethex+0x1fe>
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d104      	bne.n	8007b72 <__gethex+0x1e6>
 8007b68:	f845 bb04 	str.w	fp, [r5], #4
 8007b6c:	f04f 0b00 	mov.w	fp, #0
 8007b70:	465b      	mov	r3, fp
 8007b72:	7830      	ldrb	r0, [r6, #0]
 8007b74:	9303      	str	r3, [sp, #12]
 8007b76:	f7ff fef3 	bl	8007960 <__hexdig_fun>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	f000 000f 	and.w	r0, r0, #15
 8007b80:	4098      	lsls	r0, r3
 8007b82:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b86:	3304      	adds	r3, #4
 8007b88:	e7ae      	b.n	8007ae8 <__gethex+0x15c>
 8007b8a:	45b1      	cmp	r9, r6
 8007b8c:	d8ea      	bhi.n	8007b64 <__gethex+0x1d8>
 8007b8e:	492b      	ldr	r1, [pc, #172]	@ (8007c3c <__gethex+0x2b0>)
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	4630      	mov	r0, r6
 8007b96:	f7ff fe33 	bl	8007800 <strncmp>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1e1      	bne.n	8007b64 <__gethex+0x1d8>
 8007ba0:	e7a2      	b.n	8007ae8 <__gethex+0x15c>
 8007ba2:	1ea9      	subs	r1, r5, #2
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7fe fd68 	bl	800667a <__any_on>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d0c2      	beq.n	8007b34 <__gethex+0x1a8>
 8007bae:	f04f 0903 	mov.w	r9, #3
 8007bb2:	e7c1      	b.n	8007b38 <__gethex+0x1ac>
 8007bb4:	da09      	bge.n	8007bca <__gethex+0x23e>
 8007bb6:	1b75      	subs	r5, r6, r5
 8007bb8:	4621      	mov	r1, r4
 8007bba:	9801      	ldr	r0, [sp, #4]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	f7fe fb23 	bl	8006208 <__lshift>
 8007bc2:	1b7f      	subs	r7, r7, r5
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	f100 0a14 	add.w	sl, r0, #20
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	e7b8      	b.n	8007b42 <__gethex+0x1b6>
 8007bd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bd4:	42bd      	cmp	r5, r7
 8007bd6:	dd6f      	ble.n	8007cb8 <__gethex+0x32c>
 8007bd8:	1bed      	subs	r5, r5, r7
 8007bda:	42ae      	cmp	r6, r5
 8007bdc:	dc34      	bgt.n	8007c48 <__gethex+0x2bc>
 8007bde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d022      	beq.n	8007c2c <__gethex+0x2a0>
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d024      	beq.n	8007c34 <__gethex+0x2a8>
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d115      	bne.n	8007c1a <__gethex+0x28e>
 8007bee:	42ae      	cmp	r6, r5
 8007bf0:	d113      	bne.n	8007c1a <__gethex+0x28e>
 8007bf2:	2e01      	cmp	r6, #1
 8007bf4:	d10b      	bne.n	8007c0e <__gethex+0x282>
 8007bf6:	9a02      	ldr	r2, [sp, #8]
 8007bf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	2301      	movs	r3, #1
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	f8ca 3000 	str.w	r3, [sl]
 8007c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c08:	2562      	movs	r5, #98	@ 0x62
 8007c0a:	601c      	str	r4, [r3, #0]
 8007c0c:	e73a      	b.n	8007a84 <__gethex+0xf8>
 8007c0e:	1e71      	subs	r1, r6, #1
 8007c10:	4620      	mov	r0, r4
 8007c12:	f7fe fd32 	bl	800667a <__any_on>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1ed      	bne.n	8007bf6 <__gethex+0x26a>
 8007c1a:	9801      	ldr	r0, [sp, #4]
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	f7fe f8e3 	bl	8005de8 <_Bfree>
 8007c22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c24:	2300      	movs	r3, #0
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	2550      	movs	r5, #80	@ 0x50
 8007c2a:	e72b      	b.n	8007a84 <__gethex+0xf8>
 8007c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f3      	bne.n	8007c1a <__gethex+0x28e>
 8007c32:	e7e0      	b.n	8007bf6 <__gethex+0x26a>
 8007c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1dd      	bne.n	8007bf6 <__gethex+0x26a>
 8007c3a:	e7ee      	b.n	8007c1a <__gethex+0x28e>
 8007c3c:	080086cd 	.word	0x080086cd
 8007c40:	08008663 	.word	0x08008663
 8007c44:	08008724 	.word	0x08008724
 8007c48:	1e6f      	subs	r7, r5, #1
 8007c4a:	f1b9 0f00 	cmp.w	r9, #0
 8007c4e:	d130      	bne.n	8007cb2 <__gethex+0x326>
 8007c50:	b127      	cbz	r7, 8007c5c <__gethex+0x2d0>
 8007c52:	4639      	mov	r1, r7
 8007c54:	4620      	mov	r0, r4
 8007c56:	f7fe fd10 	bl	800667a <__any_on>
 8007c5a:	4681      	mov	r9, r0
 8007c5c:	117a      	asrs	r2, r7, #5
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c64:	f007 071f 	and.w	r7, r7, #31
 8007c68:	40bb      	lsls	r3, r7
 8007c6a:	4213      	tst	r3, r2
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4620      	mov	r0, r4
 8007c70:	bf18      	it	ne
 8007c72:	f049 0902 	orrne.w	r9, r9, #2
 8007c76:	f7ff fe21 	bl	80078bc <rshift>
 8007c7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c7e:	1b76      	subs	r6, r6, r5
 8007c80:	2502      	movs	r5, #2
 8007c82:	f1b9 0f00 	cmp.w	r9, #0
 8007c86:	d047      	beq.n	8007d18 <__gethex+0x38c>
 8007c88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d015      	beq.n	8007cbc <__gethex+0x330>
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d017      	beq.n	8007cc4 <__gethex+0x338>
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d109      	bne.n	8007cac <__gethex+0x320>
 8007c98:	f019 0f02 	tst.w	r9, #2
 8007c9c:	d006      	beq.n	8007cac <__gethex+0x320>
 8007c9e:	f8da 3000 	ldr.w	r3, [sl]
 8007ca2:	ea49 0903 	orr.w	r9, r9, r3
 8007ca6:	f019 0f01 	tst.w	r9, #1
 8007caa:	d10e      	bne.n	8007cca <__gethex+0x33e>
 8007cac:	f045 0510 	orr.w	r5, r5, #16
 8007cb0:	e032      	b.n	8007d18 <__gethex+0x38c>
 8007cb2:	f04f 0901 	mov.w	r9, #1
 8007cb6:	e7d1      	b.n	8007c5c <__gethex+0x2d0>
 8007cb8:	2501      	movs	r5, #1
 8007cba:	e7e2      	b.n	8007c82 <__gethex+0x2f6>
 8007cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cbe:	f1c3 0301 	rsb	r3, r3, #1
 8007cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <__gethex+0x320>
 8007cca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007cce:	f104 0314 	add.w	r3, r4, #20
 8007cd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007cd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007cda:	f04f 0c00 	mov.w	ip, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ce8:	d01b      	beq.n	8007d22 <__gethex+0x396>
 8007cea:	3201      	adds	r2, #1
 8007cec:	6002      	str	r2, [r0, #0]
 8007cee:	2d02      	cmp	r5, #2
 8007cf0:	f104 0314 	add.w	r3, r4, #20
 8007cf4:	d13c      	bne.n	8007d70 <__gethex+0x3e4>
 8007cf6:	f8d8 2000 	ldr.w	r2, [r8]
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	42b2      	cmp	r2, r6
 8007cfe:	d109      	bne.n	8007d14 <__gethex+0x388>
 8007d00:	1171      	asrs	r1, r6, #5
 8007d02:	2201      	movs	r2, #1
 8007d04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d08:	f006 061f 	and.w	r6, r6, #31
 8007d0c:	fa02 f606 	lsl.w	r6, r2, r6
 8007d10:	421e      	tst	r6, r3
 8007d12:	d13a      	bne.n	8007d8a <__gethex+0x3fe>
 8007d14:	f045 0520 	orr.w	r5, r5, #32
 8007d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1a:	601c      	str	r4, [r3, #0]
 8007d1c:	9b02      	ldr	r3, [sp, #8]
 8007d1e:	601f      	str	r7, [r3, #0]
 8007d20:	e6b0      	b.n	8007a84 <__gethex+0xf8>
 8007d22:	4299      	cmp	r1, r3
 8007d24:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d28:	d8d9      	bhi.n	8007cde <__gethex+0x352>
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	459b      	cmp	fp, r3
 8007d2e:	db17      	blt.n	8007d60 <__gethex+0x3d4>
 8007d30:	6861      	ldr	r1, [r4, #4]
 8007d32:	9801      	ldr	r0, [sp, #4]
 8007d34:	3101      	adds	r1, #1
 8007d36:	f7fe f817 	bl	8005d68 <_Balloc>
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	b918      	cbnz	r0, 8007d46 <__gethex+0x3ba>
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <__gethex+0x41c>)
 8007d40:	4602      	mov	r2, r0
 8007d42:	2184      	movs	r1, #132	@ 0x84
 8007d44:	e6c5      	b.n	8007ad2 <__gethex+0x146>
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	3202      	adds	r2, #2
 8007d4a:	f104 010c 	add.w	r1, r4, #12
 8007d4e:	0092      	lsls	r2, r2, #2
 8007d50:	300c      	adds	r0, #12
 8007d52:	f7fd f89c 	bl	8004e8e <memcpy>
 8007d56:	4621      	mov	r1, r4
 8007d58:	9801      	ldr	r0, [sp, #4]
 8007d5a:	f7fe f845 	bl	8005de8 <_Bfree>
 8007d5e:	464c      	mov	r4, r9
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d68:	6122      	str	r2, [r4, #16]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	615a      	str	r2, [r3, #20]
 8007d6e:	e7be      	b.n	8007cee <__gethex+0x362>
 8007d70:	6922      	ldr	r2, [r4, #16]
 8007d72:	455a      	cmp	r2, fp
 8007d74:	dd0b      	ble.n	8007d8e <__gethex+0x402>
 8007d76:	2101      	movs	r1, #1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7ff fd9f 	bl	80078bc <rshift>
 8007d7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d82:	3701      	adds	r7, #1
 8007d84:	42bb      	cmp	r3, r7
 8007d86:	f6ff aee0 	blt.w	8007b4a <__gethex+0x1be>
 8007d8a:	2501      	movs	r5, #1
 8007d8c:	e7c2      	b.n	8007d14 <__gethex+0x388>
 8007d8e:	f016 061f 	ands.w	r6, r6, #31
 8007d92:	d0fa      	beq.n	8007d8a <__gethex+0x3fe>
 8007d94:	4453      	add	r3, sl
 8007d96:	f1c6 0620 	rsb	r6, r6, #32
 8007d9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d9e:	f7fe f8d5 	bl	8005f4c <__hi0bits>
 8007da2:	42b0      	cmp	r0, r6
 8007da4:	dbe7      	blt.n	8007d76 <__gethex+0x3ea>
 8007da6:	e7f0      	b.n	8007d8a <__gethex+0x3fe>
 8007da8:	08008663 	.word	0x08008663

08007dac <L_shift>:
 8007dac:	f1c2 0208 	rsb	r2, r2, #8
 8007db0:	0092      	lsls	r2, r2, #2
 8007db2:	b570      	push	{r4, r5, r6, lr}
 8007db4:	f1c2 0620 	rsb	r6, r2, #32
 8007db8:	6843      	ldr	r3, [r0, #4]
 8007dba:	6804      	ldr	r4, [r0, #0]
 8007dbc:	fa03 f506 	lsl.w	r5, r3, r6
 8007dc0:	432c      	orrs	r4, r5
 8007dc2:	40d3      	lsrs	r3, r2
 8007dc4:	6004      	str	r4, [r0, #0]
 8007dc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007dca:	4288      	cmp	r0, r1
 8007dcc:	d3f4      	bcc.n	8007db8 <L_shift+0xc>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}

08007dd0 <__match>:
 8007dd0:	b530      	push	{r4, r5, lr}
 8007dd2:	6803      	ldr	r3, [r0, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dda:	b914      	cbnz	r4, 8007de2 <__match+0x12>
 8007ddc:	6003      	str	r3, [r0, #0]
 8007dde:	2001      	movs	r0, #1
 8007de0:	bd30      	pop	{r4, r5, pc}
 8007de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007dea:	2d19      	cmp	r5, #25
 8007dec:	bf98      	it	ls
 8007dee:	3220      	addls	r2, #32
 8007df0:	42a2      	cmp	r2, r4
 8007df2:	d0f0      	beq.n	8007dd6 <__match+0x6>
 8007df4:	2000      	movs	r0, #0
 8007df6:	e7f3      	b.n	8007de0 <__match+0x10>

08007df8 <__hexnan>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	680b      	ldr	r3, [r1, #0]
 8007dfe:	6801      	ldr	r1, [r0, #0]
 8007e00:	115e      	asrs	r6, r3, #5
 8007e02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e06:	f013 031f 	ands.w	r3, r3, #31
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	bf18      	it	ne
 8007e0e:	3604      	addne	r6, #4
 8007e10:	2500      	movs	r5, #0
 8007e12:	1f37      	subs	r7, r6, #4
 8007e14:	4682      	mov	sl, r0
 8007e16:	4690      	mov	r8, r2
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e1e:	46b9      	mov	r9, r7
 8007e20:	463c      	mov	r4, r7
 8007e22:	9502      	str	r5, [sp, #8]
 8007e24:	46ab      	mov	fp, r5
 8007e26:	784a      	ldrb	r2, [r1, #1]
 8007e28:	1c4b      	adds	r3, r1, #1
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	b342      	cbz	r2, 8007e80 <__hexnan+0x88>
 8007e2e:	4610      	mov	r0, r2
 8007e30:	9105      	str	r1, [sp, #20]
 8007e32:	9204      	str	r2, [sp, #16]
 8007e34:	f7ff fd94 	bl	8007960 <__hexdig_fun>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d151      	bne.n	8007ee0 <__hexnan+0xe8>
 8007e3c:	9a04      	ldr	r2, [sp, #16]
 8007e3e:	9905      	ldr	r1, [sp, #20]
 8007e40:	2a20      	cmp	r2, #32
 8007e42:	d818      	bhi.n	8007e76 <__hexnan+0x7e>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	459b      	cmp	fp, r3
 8007e48:	dd13      	ble.n	8007e72 <__hexnan+0x7a>
 8007e4a:	454c      	cmp	r4, r9
 8007e4c:	d206      	bcs.n	8007e5c <__hexnan+0x64>
 8007e4e:	2d07      	cmp	r5, #7
 8007e50:	dc04      	bgt.n	8007e5c <__hexnan+0x64>
 8007e52:	462a      	mov	r2, r5
 8007e54:	4649      	mov	r1, r9
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7ff ffa8 	bl	8007dac <L_shift>
 8007e5c:	4544      	cmp	r4, r8
 8007e5e:	d952      	bls.n	8007f06 <__hexnan+0x10e>
 8007e60:	2300      	movs	r3, #0
 8007e62:	f1a4 0904 	sub.w	r9, r4, #4
 8007e66:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8007e6e:	464c      	mov	r4, r9
 8007e70:	461d      	mov	r5, r3
 8007e72:	9903      	ldr	r1, [sp, #12]
 8007e74:	e7d7      	b.n	8007e26 <__hexnan+0x2e>
 8007e76:	2a29      	cmp	r2, #41	@ 0x29
 8007e78:	d157      	bne.n	8007f2a <__hexnan+0x132>
 8007e7a:	3102      	adds	r1, #2
 8007e7c:	f8ca 1000 	str.w	r1, [sl]
 8007e80:	f1bb 0f00 	cmp.w	fp, #0
 8007e84:	d051      	beq.n	8007f2a <__hexnan+0x132>
 8007e86:	454c      	cmp	r4, r9
 8007e88:	d206      	bcs.n	8007e98 <__hexnan+0xa0>
 8007e8a:	2d07      	cmp	r5, #7
 8007e8c:	dc04      	bgt.n	8007e98 <__hexnan+0xa0>
 8007e8e:	462a      	mov	r2, r5
 8007e90:	4649      	mov	r1, r9
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7ff ff8a 	bl	8007dac <L_shift>
 8007e98:	4544      	cmp	r4, r8
 8007e9a:	d936      	bls.n	8007f0a <__hexnan+0x112>
 8007e9c:	f1a8 0204 	sub.w	r2, r8, #4
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ea6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007eaa:	429f      	cmp	r7, r3
 8007eac:	d2f9      	bcs.n	8007ea2 <__hexnan+0xaa>
 8007eae:	1b3b      	subs	r3, r7, r4
 8007eb0:	f023 0303 	bic.w	r3, r3, #3
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	3401      	adds	r4, #1
 8007eb8:	3e03      	subs	r6, #3
 8007eba:	42b4      	cmp	r4, r6
 8007ebc:	bf88      	it	hi
 8007ebe:	2304      	movhi	r3, #4
 8007ec0:	4443      	add	r3, r8
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f843 2b04 	str.w	r2, [r3], #4
 8007ec8:	429f      	cmp	r7, r3
 8007eca:	d2fb      	bcs.n	8007ec4 <__hexnan+0xcc>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	b91b      	cbnz	r3, 8007ed8 <__hexnan+0xe0>
 8007ed0:	4547      	cmp	r7, r8
 8007ed2:	d128      	bne.n	8007f26 <__hexnan+0x12e>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	2005      	movs	r0, #5
 8007eda:	b007      	add	sp, #28
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	2d08      	cmp	r5, #8
 8007ee4:	f10b 0b01 	add.w	fp, fp, #1
 8007ee8:	dd06      	ble.n	8007ef8 <__hexnan+0x100>
 8007eea:	4544      	cmp	r4, r8
 8007eec:	d9c1      	bls.n	8007e72 <__hexnan+0x7a>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ef4:	2501      	movs	r5, #1
 8007ef6:	3c04      	subs	r4, #4
 8007ef8:	6822      	ldr	r2, [r4, #0]
 8007efa:	f000 000f 	and.w	r0, r0, #15
 8007efe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f02:	6020      	str	r0, [r4, #0]
 8007f04:	e7b5      	b.n	8007e72 <__hexnan+0x7a>
 8007f06:	2508      	movs	r5, #8
 8007f08:	e7b3      	b.n	8007e72 <__hexnan+0x7a>
 8007f0a:	9b01      	ldr	r3, [sp, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0dd      	beq.n	8007ecc <__hexnan+0xd4>
 8007f10:	f1c3 0320 	rsb	r3, r3, #32
 8007f14:	f04f 32ff 	mov.w	r2, #4294967295
 8007f18:	40da      	lsrs	r2, r3
 8007f1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f24:	e7d2      	b.n	8007ecc <__hexnan+0xd4>
 8007f26:	3f04      	subs	r7, #4
 8007f28:	e7d0      	b.n	8007ecc <__hexnan+0xd4>
 8007f2a:	2004      	movs	r0, #4
 8007f2c:	e7d5      	b.n	8007eda <__hexnan+0xe2>

08007f2e <__ascii_mbtowc>:
 8007f2e:	b082      	sub	sp, #8
 8007f30:	b901      	cbnz	r1, 8007f34 <__ascii_mbtowc+0x6>
 8007f32:	a901      	add	r1, sp, #4
 8007f34:	b142      	cbz	r2, 8007f48 <__ascii_mbtowc+0x1a>
 8007f36:	b14b      	cbz	r3, 8007f4c <__ascii_mbtowc+0x1e>
 8007f38:	7813      	ldrb	r3, [r2, #0]
 8007f3a:	600b      	str	r3, [r1, #0]
 8007f3c:	7812      	ldrb	r2, [r2, #0]
 8007f3e:	1e10      	subs	r0, r2, #0
 8007f40:	bf18      	it	ne
 8007f42:	2001      	movne	r0, #1
 8007f44:	b002      	add	sp, #8
 8007f46:	4770      	bx	lr
 8007f48:	4610      	mov	r0, r2
 8007f4a:	e7fb      	b.n	8007f44 <__ascii_mbtowc+0x16>
 8007f4c:	f06f 0001 	mvn.w	r0, #1
 8007f50:	e7f8      	b.n	8007f44 <__ascii_mbtowc+0x16>

08007f52 <_realloc_r>:
 8007f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	4607      	mov	r7, r0
 8007f58:	4614      	mov	r4, r2
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	b921      	cbnz	r1, 8007f68 <_realloc_r+0x16>
 8007f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f62:	4611      	mov	r1, r2
 8007f64:	f7fd be74 	b.w	8005c50 <_malloc_r>
 8007f68:	b92a      	cbnz	r2, 8007f76 <_realloc_r+0x24>
 8007f6a:	f7fd fdfd 	bl	8005b68 <_free_r>
 8007f6e:	4625      	mov	r5, r4
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f76:	f000 f840 	bl	8007ffa <_malloc_usable_size_r>
 8007f7a:	4284      	cmp	r4, r0
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	d802      	bhi.n	8007f86 <_realloc_r+0x34>
 8007f80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f84:	d8f4      	bhi.n	8007f70 <_realloc_r+0x1e>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7fd fe61 	bl	8005c50 <_malloc_r>
 8007f8e:	4680      	mov	r8, r0
 8007f90:	b908      	cbnz	r0, 8007f96 <_realloc_r+0x44>
 8007f92:	4645      	mov	r5, r8
 8007f94:	e7ec      	b.n	8007f70 <_realloc_r+0x1e>
 8007f96:	42b4      	cmp	r4, r6
 8007f98:	4622      	mov	r2, r4
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	bf28      	it	cs
 8007f9e:	4632      	movcs	r2, r6
 8007fa0:	f7fc ff75 	bl	8004e8e <memcpy>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f7fd fdde 	bl	8005b68 <_free_r>
 8007fac:	e7f1      	b.n	8007f92 <_realloc_r+0x40>

08007fae <__ascii_wctomb>:
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	b141      	cbz	r1, 8007fc6 <__ascii_wctomb+0x18>
 8007fb4:	2aff      	cmp	r2, #255	@ 0xff
 8007fb6:	d904      	bls.n	8007fc2 <__ascii_wctomb+0x14>
 8007fb8:	228a      	movs	r2, #138	@ 0x8a
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	4770      	bx	lr
 8007fc2:	700a      	strb	r2, [r1, #0]
 8007fc4:	2001      	movs	r0, #1
 8007fc6:	4770      	bx	lr

08007fc8 <fiprintf>:
 8007fc8:	b40e      	push	{r1, r2, r3}
 8007fca:	b503      	push	{r0, r1, lr}
 8007fcc:	4601      	mov	r1, r0
 8007fce:	ab03      	add	r3, sp, #12
 8007fd0:	4805      	ldr	r0, [pc, #20]	@ (8007fe8 <fiprintf+0x20>)
 8007fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd6:	6800      	ldr	r0, [r0, #0]
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	f000 f83f 	bl	800805c <_vfiprintf_r>
 8007fde:	b002      	add	sp, #8
 8007fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe4:	b003      	add	sp, #12
 8007fe6:	4770      	bx	lr
 8007fe8:	2000001c 	.word	0x2000001c

08007fec <abort>:
 8007fec:	b508      	push	{r3, lr}
 8007fee:	2006      	movs	r0, #6
 8007ff0:	f000 fa08 	bl	8008404 <raise>
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f7f9 fa8d 	bl	8001514 <_exit>

08007ffa <_malloc_usable_size_r>:
 8007ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffe:	1f18      	subs	r0, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	bfbc      	itt	lt
 8008004:	580b      	ldrlt	r3, [r1, r0]
 8008006:	18c0      	addlt	r0, r0, r3
 8008008:	4770      	bx	lr

0800800a <__sfputc_r>:
 800800a:	6893      	ldr	r3, [r2, #8]
 800800c:	3b01      	subs	r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	b410      	push	{r4}
 8008012:	6093      	str	r3, [r2, #8]
 8008014:	da08      	bge.n	8008028 <__sfputc_r+0x1e>
 8008016:	6994      	ldr	r4, [r2, #24]
 8008018:	42a3      	cmp	r3, r4
 800801a:	db01      	blt.n	8008020 <__sfputc_r+0x16>
 800801c:	290a      	cmp	r1, #10
 800801e:	d103      	bne.n	8008028 <__sfputc_r+0x1e>
 8008020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008024:	f000 b932 	b.w	800828c <__swbuf_r>
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	1c58      	adds	r0, r3, #1
 800802c:	6010      	str	r0, [r2, #0]
 800802e:	7019      	strb	r1, [r3, #0]
 8008030:	4608      	mov	r0, r1
 8008032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008036:	4770      	bx	lr

08008038 <__sfputs_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	4606      	mov	r6, r0
 800803c:	460f      	mov	r7, r1
 800803e:	4614      	mov	r4, r2
 8008040:	18d5      	adds	r5, r2, r3
 8008042:	42ac      	cmp	r4, r5
 8008044:	d101      	bne.n	800804a <__sfputs_r+0x12>
 8008046:	2000      	movs	r0, #0
 8008048:	e007      	b.n	800805a <__sfputs_r+0x22>
 800804a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804e:	463a      	mov	r2, r7
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff ffda 	bl	800800a <__sfputc_r>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	d1f3      	bne.n	8008042 <__sfputs_r+0xa>
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800805c <_vfiprintf_r>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460d      	mov	r5, r1
 8008062:	b09d      	sub	sp, #116	@ 0x74
 8008064:	4614      	mov	r4, r2
 8008066:	4698      	mov	r8, r3
 8008068:	4606      	mov	r6, r0
 800806a:	b118      	cbz	r0, 8008074 <_vfiprintf_r+0x18>
 800806c:	6a03      	ldr	r3, [r0, #32]
 800806e:	b90b      	cbnz	r3, 8008074 <_vfiprintf_r+0x18>
 8008070:	f7fc fd94 	bl	8004b9c <__sinit>
 8008074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008076:	07d9      	lsls	r1, r3, #31
 8008078:	d405      	bmi.n	8008086 <_vfiprintf_r+0x2a>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	059a      	lsls	r2, r3, #22
 800807e:	d402      	bmi.n	8008086 <_vfiprintf_r+0x2a>
 8008080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008082:	f7fc ff02 	bl	8004e8a <__retarget_lock_acquire_recursive>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	071b      	lsls	r3, r3, #28
 800808a:	d501      	bpl.n	8008090 <_vfiprintf_r+0x34>
 800808c:	692b      	ldr	r3, [r5, #16]
 800808e:	b99b      	cbnz	r3, 80080b8 <_vfiprintf_r+0x5c>
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f000 f938 	bl	8008308 <__swsetup_r>
 8008098:	b170      	cbz	r0, 80080b8 <_vfiprintf_r+0x5c>
 800809a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800809c:	07dc      	lsls	r4, r3, #31
 800809e:	d504      	bpl.n	80080aa <_vfiprintf_r+0x4e>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b01d      	add	sp, #116	@ 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	0598      	lsls	r0, r3, #22
 80080ae:	d4f7      	bmi.n	80080a0 <_vfiprintf_r+0x44>
 80080b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080b2:	f7fc feeb 	bl	8004e8c <__retarget_lock_release_recursive>
 80080b6:	e7f3      	b.n	80080a0 <_vfiprintf_r+0x44>
 80080b8:	2300      	movs	r3, #0
 80080ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80080bc:	2320      	movs	r3, #32
 80080be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c6:	2330      	movs	r3, #48	@ 0x30
 80080c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008278 <_vfiprintf_r+0x21c>
 80080cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080d0:	f04f 0901 	mov.w	r9, #1
 80080d4:	4623      	mov	r3, r4
 80080d6:	469a      	mov	sl, r3
 80080d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080dc:	b10a      	cbz	r2, 80080e2 <_vfiprintf_r+0x86>
 80080de:	2a25      	cmp	r2, #37	@ 0x25
 80080e0:	d1f9      	bne.n	80080d6 <_vfiprintf_r+0x7a>
 80080e2:	ebba 0b04 	subs.w	fp, sl, r4
 80080e6:	d00b      	beq.n	8008100 <_vfiprintf_r+0xa4>
 80080e8:	465b      	mov	r3, fp
 80080ea:	4622      	mov	r2, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ffa2 	bl	8008038 <__sfputs_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	f000 80a7 	beq.w	8008248 <_vfiprintf_r+0x1ec>
 80080fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080fc:	445a      	add	r2, fp
 80080fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008100:	f89a 3000 	ldrb.w	r3, [sl]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 809f 	beq.w	8008248 <_vfiprintf_r+0x1ec>
 800810a:	2300      	movs	r3, #0
 800810c:	f04f 32ff 	mov.w	r2, #4294967295
 8008110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008114:	f10a 0a01 	add.w	sl, sl, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008120:	931a      	str	r3, [sp, #104]	@ 0x68
 8008122:	4654      	mov	r4, sl
 8008124:	2205      	movs	r2, #5
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	4853      	ldr	r0, [pc, #332]	@ (8008278 <_vfiprintf_r+0x21c>)
 800812c:	f7f8 f858 	bl	80001e0 <memchr>
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	b9d8      	cbnz	r0, 800816c <_vfiprintf_r+0x110>
 8008134:	06d1      	lsls	r1, r2, #27
 8008136:	bf44      	itt	mi
 8008138:	2320      	movmi	r3, #32
 800813a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813e:	0713      	lsls	r3, r2, #28
 8008140:	bf44      	itt	mi
 8008142:	232b      	movmi	r3, #43	@ 0x2b
 8008144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008148:	f89a 3000 	ldrb.w	r3, [sl]
 800814c:	2b2a      	cmp	r3, #42	@ 0x2a
 800814e:	d015      	beq.n	800817c <_vfiprintf_r+0x120>
 8008150:	9a07      	ldr	r2, [sp, #28]
 8008152:	4654      	mov	r4, sl
 8008154:	2000      	movs	r0, #0
 8008156:	f04f 0c0a 	mov.w	ip, #10
 800815a:	4621      	mov	r1, r4
 800815c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008160:	3b30      	subs	r3, #48	@ 0x30
 8008162:	2b09      	cmp	r3, #9
 8008164:	d94b      	bls.n	80081fe <_vfiprintf_r+0x1a2>
 8008166:	b1b0      	cbz	r0, 8008196 <_vfiprintf_r+0x13a>
 8008168:	9207      	str	r2, [sp, #28]
 800816a:	e014      	b.n	8008196 <_vfiprintf_r+0x13a>
 800816c:	eba0 0308 	sub.w	r3, r0, r8
 8008170:	fa09 f303 	lsl.w	r3, r9, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	46a2      	mov	sl, r4
 800817a:	e7d2      	b.n	8008122 <_vfiprintf_r+0xc6>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	1d19      	adds	r1, r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfbb      	ittet	lt
 8008188:	425b      	neglt	r3, r3
 800818a:	f042 0202 	orrlt.w	r2, r2, #2
 800818e:	9307      	strge	r3, [sp, #28]
 8008190:	9307      	strlt	r3, [sp, #28]
 8008192:	bfb8      	it	lt
 8008194:	9204      	strlt	r2, [sp, #16]
 8008196:	7823      	ldrb	r3, [r4, #0]
 8008198:	2b2e      	cmp	r3, #46	@ 0x2e
 800819a:	d10a      	bne.n	80081b2 <_vfiprintf_r+0x156>
 800819c:	7863      	ldrb	r3, [r4, #1]
 800819e:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a0:	d132      	bne.n	8008208 <_vfiprintf_r+0x1ac>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	1d1a      	adds	r2, r3, #4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081ae:	3402      	adds	r4, #2
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008288 <_vfiprintf_r+0x22c>
 80081b6:	7821      	ldrb	r1, [r4, #0]
 80081b8:	2203      	movs	r2, #3
 80081ba:	4650      	mov	r0, sl
 80081bc:	f7f8 f810 	bl	80001e0 <memchr>
 80081c0:	b138      	cbz	r0, 80081d2 <_vfiprintf_r+0x176>
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	eba0 000a 	sub.w	r0, r0, sl
 80081c8:	2240      	movs	r2, #64	@ 0x40
 80081ca:	4082      	lsls	r2, r0
 80081cc:	4313      	orrs	r3, r2
 80081ce:	3401      	adds	r4, #1
 80081d0:	9304      	str	r3, [sp, #16]
 80081d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d6:	4829      	ldr	r0, [pc, #164]	@ (800827c <_vfiprintf_r+0x220>)
 80081d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081dc:	2206      	movs	r2, #6
 80081de:	f7f7 ffff 	bl	80001e0 <memchr>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d03f      	beq.n	8008266 <_vfiprintf_r+0x20a>
 80081e6:	4b26      	ldr	r3, [pc, #152]	@ (8008280 <_vfiprintf_r+0x224>)
 80081e8:	bb1b      	cbnz	r3, 8008232 <_vfiprintf_r+0x1d6>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	3307      	adds	r3, #7
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	3308      	adds	r3, #8
 80081f4:	9303      	str	r3, [sp, #12]
 80081f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f8:	443b      	add	r3, r7
 80081fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fc:	e76a      	b.n	80080d4 <_vfiprintf_r+0x78>
 80081fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008202:	460c      	mov	r4, r1
 8008204:	2001      	movs	r0, #1
 8008206:	e7a8      	b.n	800815a <_vfiprintf_r+0xfe>
 8008208:	2300      	movs	r3, #0
 800820a:	3401      	adds	r4, #1
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	4619      	mov	r1, r3
 8008210:	f04f 0c0a 	mov.w	ip, #10
 8008214:	4620      	mov	r0, r4
 8008216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821a:	3a30      	subs	r2, #48	@ 0x30
 800821c:	2a09      	cmp	r2, #9
 800821e:	d903      	bls.n	8008228 <_vfiprintf_r+0x1cc>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0c6      	beq.n	80081b2 <_vfiprintf_r+0x156>
 8008224:	9105      	str	r1, [sp, #20]
 8008226:	e7c4      	b.n	80081b2 <_vfiprintf_r+0x156>
 8008228:	fb0c 2101 	mla	r1, ip, r1, r2
 800822c:	4604      	mov	r4, r0
 800822e:	2301      	movs	r3, #1
 8008230:	e7f0      	b.n	8008214 <_vfiprintf_r+0x1b8>
 8008232:	ab03      	add	r3, sp, #12
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	462a      	mov	r2, r5
 8008238:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <_vfiprintf_r+0x228>)
 800823a:	a904      	add	r1, sp, #16
 800823c:	4630      	mov	r0, r6
 800823e:	f7fb fe5d 	bl	8003efc <_printf_float>
 8008242:	4607      	mov	r7, r0
 8008244:	1c78      	adds	r0, r7, #1
 8008246:	d1d6      	bne.n	80081f6 <_vfiprintf_r+0x19a>
 8008248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800824a:	07d9      	lsls	r1, r3, #31
 800824c:	d405      	bmi.n	800825a <_vfiprintf_r+0x1fe>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	059a      	lsls	r2, r3, #22
 8008252:	d402      	bmi.n	800825a <_vfiprintf_r+0x1fe>
 8008254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008256:	f7fc fe19 	bl	8004e8c <__retarget_lock_release_recursive>
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	065b      	lsls	r3, r3, #25
 800825e:	f53f af1f 	bmi.w	80080a0 <_vfiprintf_r+0x44>
 8008262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008264:	e71e      	b.n	80080a4 <_vfiprintf_r+0x48>
 8008266:	ab03      	add	r3, sp, #12
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	462a      	mov	r2, r5
 800826c:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <_vfiprintf_r+0x228>)
 800826e:	a904      	add	r1, sp, #16
 8008270:	4630      	mov	r0, r6
 8008272:	f7fc f8db 	bl	800442c <_printf_i>
 8008276:	e7e4      	b.n	8008242 <_vfiprintf_r+0x1e6>
 8008278:	080086cf 	.word	0x080086cf
 800827c:	080086d9 	.word	0x080086d9
 8008280:	08003efd 	.word	0x08003efd
 8008284:	08008039 	.word	0x08008039
 8008288:	080086d5 	.word	0x080086d5

0800828c <__swbuf_r>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	460e      	mov	r6, r1
 8008290:	4614      	mov	r4, r2
 8008292:	4605      	mov	r5, r0
 8008294:	b118      	cbz	r0, 800829e <__swbuf_r+0x12>
 8008296:	6a03      	ldr	r3, [r0, #32]
 8008298:	b90b      	cbnz	r3, 800829e <__swbuf_r+0x12>
 800829a:	f7fc fc7f 	bl	8004b9c <__sinit>
 800829e:	69a3      	ldr	r3, [r4, #24]
 80082a0:	60a3      	str	r3, [r4, #8]
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	071a      	lsls	r2, r3, #28
 80082a6:	d501      	bpl.n	80082ac <__swbuf_r+0x20>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	b943      	cbnz	r3, 80082be <__swbuf_r+0x32>
 80082ac:	4621      	mov	r1, r4
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 f82a 	bl	8008308 <__swsetup_r>
 80082b4:	b118      	cbz	r0, 80082be <__swbuf_r+0x32>
 80082b6:	f04f 37ff 	mov.w	r7, #4294967295
 80082ba:	4638      	mov	r0, r7
 80082bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	6922      	ldr	r2, [r4, #16]
 80082c2:	1a98      	subs	r0, r3, r2
 80082c4:	6963      	ldr	r3, [r4, #20]
 80082c6:	b2f6      	uxtb	r6, r6
 80082c8:	4283      	cmp	r3, r0
 80082ca:	4637      	mov	r7, r6
 80082cc:	dc05      	bgt.n	80082da <__swbuf_r+0x4e>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7ff fa53 	bl	800777c <_fflush_r>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d1ed      	bne.n	80082b6 <__swbuf_r+0x2a>
 80082da:	68a3      	ldr	r3, [r4, #8]
 80082dc:	3b01      	subs	r3, #1
 80082de:	60a3      	str	r3, [r4, #8]
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	6022      	str	r2, [r4, #0]
 80082e6:	701e      	strb	r6, [r3, #0]
 80082e8:	6962      	ldr	r2, [r4, #20]
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d004      	beq.n	80082fa <__swbuf_r+0x6e>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	07db      	lsls	r3, r3, #31
 80082f4:	d5e1      	bpl.n	80082ba <__swbuf_r+0x2e>
 80082f6:	2e0a      	cmp	r6, #10
 80082f8:	d1df      	bne.n	80082ba <__swbuf_r+0x2e>
 80082fa:	4621      	mov	r1, r4
 80082fc:	4628      	mov	r0, r5
 80082fe:	f7ff fa3d 	bl	800777c <_fflush_r>
 8008302:	2800      	cmp	r0, #0
 8008304:	d0d9      	beq.n	80082ba <__swbuf_r+0x2e>
 8008306:	e7d6      	b.n	80082b6 <__swbuf_r+0x2a>

08008308 <__swsetup_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4b29      	ldr	r3, [pc, #164]	@ (80083b0 <__swsetup_r+0xa8>)
 800830c:	4605      	mov	r5, r0
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	460c      	mov	r4, r1
 8008312:	b118      	cbz	r0, 800831c <__swsetup_r+0x14>
 8008314:	6a03      	ldr	r3, [r0, #32]
 8008316:	b90b      	cbnz	r3, 800831c <__swsetup_r+0x14>
 8008318:	f7fc fc40 	bl	8004b9c <__sinit>
 800831c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	d422      	bmi.n	800836a <__swsetup_r+0x62>
 8008324:	06da      	lsls	r2, r3, #27
 8008326:	d407      	bmi.n	8008338 <__swsetup_r+0x30>
 8008328:	2209      	movs	r2, #9
 800832a:	602a      	str	r2, [r5, #0]
 800832c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e033      	b.n	80083a0 <__swsetup_r+0x98>
 8008338:	0758      	lsls	r0, r3, #29
 800833a:	d512      	bpl.n	8008362 <__swsetup_r+0x5a>
 800833c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800833e:	b141      	cbz	r1, 8008352 <__swsetup_r+0x4a>
 8008340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008344:	4299      	cmp	r1, r3
 8008346:	d002      	beq.n	800834e <__swsetup_r+0x46>
 8008348:	4628      	mov	r0, r5
 800834a:	f7fd fc0d 	bl	8005b68 <_free_r>
 800834e:	2300      	movs	r3, #0
 8008350:	6363      	str	r3, [r4, #52]	@ 0x34
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	b94b      	cbnz	r3, 8008382 <__swsetup_r+0x7a>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008378:	d003      	beq.n	8008382 <__swsetup_r+0x7a>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f000 f883 	bl	8008488 <__smakebuf_r>
 8008382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008386:	f013 0201 	ands.w	r2, r3, #1
 800838a:	d00a      	beq.n	80083a2 <__swsetup_r+0x9a>
 800838c:	2200      	movs	r2, #0
 800838e:	60a2      	str	r2, [r4, #8]
 8008390:	6962      	ldr	r2, [r4, #20]
 8008392:	4252      	negs	r2, r2
 8008394:	61a2      	str	r2, [r4, #24]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	b942      	cbnz	r2, 80083ac <__swsetup_r+0xa4>
 800839a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800839e:	d1c5      	bne.n	800832c <__swsetup_r+0x24>
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	0799      	lsls	r1, r3, #30
 80083a4:	bf58      	it	pl
 80083a6:	6962      	ldrpl	r2, [r4, #20]
 80083a8:	60a2      	str	r2, [r4, #8]
 80083aa:	e7f4      	b.n	8008396 <__swsetup_r+0x8e>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7f7      	b.n	80083a0 <__swsetup_r+0x98>
 80083b0:	2000001c 	.word	0x2000001c

080083b4 <_raise_r>:
 80083b4:	291f      	cmp	r1, #31
 80083b6:	b538      	push	{r3, r4, r5, lr}
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	d904      	bls.n	80083c8 <_raise_r+0x14>
 80083be:	2316      	movs	r3, #22
 80083c0:	6003      	str	r3, [r0, #0]
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083ca:	b112      	cbz	r2, 80083d2 <_raise_r+0x1e>
 80083cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083d0:	b94b      	cbnz	r3, 80083e6 <_raise_r+0x32>
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 f830 	bl	8008438 <_getpid_r>
 80083d8:	4622      	mov	r2, r4
 80083da:	4601      	mov	r1, r0
 80083dc:	4628      	mov	r0, r5
 80083de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e2:	f000 b817 	b.w	8008414 <_kill_r>
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d00a      	beq.n	8008400 <_raise_r+0x4c>
 80083ea:	1c59      	adds	r1, r3, #1
 80083ec:	d103      	bne.n	80083f6 <_raise_r+0x42>
 80083ee:	2316      	movs	r3, #22
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	2001      	movs	r0, #1
 80083f4:	e7e7      	b.n	80083c6 <_raise_r+0x12>
 80083f6:	2100      	movs	r1, #0
 80083f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083fc:	4620      	mov	r0, r4
 80083fe:	4798      	blx	r3
 8008400:	2000      	movs	r0, #0
 8008402:	e7e0      	b.n	80083c6 <_raise_r+0x12>

08008404 <raise>:
 8008404:	4b02      	ldr	r3, [pc, #8]	@ (8008410 <raise+0xc>)
 8008406:	4601      	mov	r1, r0
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f7ff bfd3 	b.w	80083b4 <_raise_r>
 800840e:	bf00      	nop
 8008410:	2000001c 	.word	0x2000001c

08008414 <_kill_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	@ (8008434 <_kill_r+0x20>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	4611      	mov	r1, r2
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	f7f9 f86f 	bl	8001504 <_kill>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d102      	bne.n	8008430 <_kill_r+0x1c>
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	b103      	cbz	r3, 8008430 <_kill_r+0x1c>
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	bd38      	pop	{r3, r4, r5, pc}
 8008432:	bf00      	nop
 8008434:	20004dd8 	.word	0x20004dd8

08008438 <_getpid_r>:
 8008438:	f7f9 b862 	b.w	8001500 <_getpid>

0800843c <__swhatbuf_r>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	460c      	mov	r4, r1
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	2900      	cmp	r1, #0
 8008446:	b096      	sub	sp, #88	@ 0x58
 8008448:	4615      	mov	r5, r2
 800844a:	461e      	mov	r6, r3
 800844c:	da0d      	bge.n	800846a <__swhatbuf_r+0x2e>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008454:	f04f 0100 	mov.w	r1, #0
 8008458:	bf14      	ite	ne
 800845a:	2340      	movne	r3, #64	@ 0x40
 800845c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008460:	2000      	movs	r0, #0
 8008462:	6031      	str	r1, [r6, #0]
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	b016      	add	sp, #88	@ 0x58
 8008468:	bd70      	pop	{r4, r5, r6, pc}
 800846a:	466a      	mov	r2, sp
 800846c:	f000 f848 	bl	8008500 <_fstat_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	dbec      	blt.n	800844e <__swhatbuf_r+0x12>
 8008474:	9901      	ldr	r1, [sp, #4]
 8008476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800847a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800847e:	4259      	negs	r1, r3
 8008480:	4159      	adcs	r1, r3
 8008482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008486:	e7eb      	b.n	8008460 <__swhatbuf_r+0x24>

08008488 <__smakebuf_r>:
 8008488:	898b      	ldrh	r3, [r1, #12]
 800848a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800848c:	079d      	lsls	r5, r3, #30
 800848e:	4606      	mov	r6, r0
 8008490:	460c      	mov	r4, r1
 8008492:	d507      	bpl.n	80084a4 <__smakebuf_r+0x1c>
 8008494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	2301      	movs	r3, #1
 800849e:	6163      	str	r3, [r4, #20]
 80084a0:	b003      	add	sp, #12
 80084a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a4:	ab01      	add	r3, sp, #4
 80084a6:	466a      	mov	r2, sp
 80084a8:	f7ff ffc8 	bl	800843c <__swhatbuf_r>
 80084ac:	9f00      	ldr	r7, [sp, #0]
 80084ae:	4605      	mov	r5, r0
 80084b0:	4639      	mov	r1, r7
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7fd fbcc 	bl	8005c50 <_malloc_r>
 80084b8:	b948      	cbnz	r0, 80084ce <__smakebuf_r+0x46>
 80084ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084be:	059a      	lsls	r2, r3, #22
 80084c0:	d4ee      	bmi.n	80084a0 <__smakebuf_r+0x18>
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	f043 0302 	orr.w	r3, r3, #2
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	e7e2      	b.n	8008494 <__smakebuf_r+0xc>
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	6020      	str	r0, [r4, #0]
 80084d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d6:	81a3      	strh	r3, [r4, #12]
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084de:	b15b      	cbz	r3, 80084f8 <__smakebuf_r+0x70>
 80084e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f81d 	bl	8008524 <_isatty_r>
 80084ea:	b128      	cbz	r0, 80084f8 <__smakebuf_r+0x70>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	f043 0301 	orr.w	r3, r3, #1
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	431d      	orrs	r5, r3
 80084fc:	81a5      	strh	r5, [r4, #12]
 80084fe:	e7cf      	b.n	80084a0 <__smakebuf_r+0x18>

08008500 <_fstat_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d07      	ldr	r5, [pc, #28]	@ (8008520 <_fstat_r+0x20>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	f7f9 f826 	bl	800155e <_fstat>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	d102      	bne.n	800851c <_fstat_r+0x1c>
 8008516:	682b      	ldr	r3, [r5, #0]
 8008518:	b103      	cbz	r3, 800851c <_fstat_r+0x1c>
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	bf00      	nop
 8008520:	20004dd8 	.word	0x20004dd8

08008524 <_isatty_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d06      	ldr	r5, [pc, #24]	@ (8008540 <_isatty_r+0x1c>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	f7f9 f81a 	bl	8001568 <_isatty>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_isatty_r+0x1a>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_isatty_r+0x1a>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	20004dd8 	.word	0x20004dd8

08008544 <_init>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr

08008550 <_fini>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr
