
Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003114  08003114  00004114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800314c  0800314c  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003154  08003154  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003154  08003154  00004154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003158  08003158  00004158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800315c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  20000060  080031bc  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  080031bc  00005c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb2b  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c97  00000000  00000000  00023bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d190  00000000  00000000  00027852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  000349e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000135c  00000000  00000000  00035c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fcc  00000000  00000000  00036f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a896  00000000  00000000  00039f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000984e2  00000000  00000000  000547de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eccc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003508  00000000  00000000  000ecd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000f020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080030fc 	.word	0x080030fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080030fc 	.word	0x080030fc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Task1>:
/* USER CODE BEGIN 4 */
msg_t msg_task1 = {.val1 = 0, .val2 = 0, .val3 = '\0'};
uint8_t task1_send_err = 0;
uint32_t task1_receive_time = 0;
void Task1(void* param)
{
 800050c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t prev_time=0, prev_time2=0;
	msg_t msg = {.val1 = 0, .val2 = 0, .val3 = '\0'};
 8000510:	2400      	movs	r4, #0

			msg.val1++;
			msg.val2++;
			msg.val3++;

			if(xQueueSend(q_task1_to_task2, &msg, pdMS_TO_TICKS(20)) != pdPASS)
 8000512:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80005a4 <Task1+0x98>
				task1_send_err++;
 8000516:	4e1f      	ldr	r6, [pc, #124]	@ (8000594 <Task1+0x88>)

		}

		if(xQueueReceive(q_task2_to_task1, &msg_task1, portMAX_DELAY) != pdPASS){
 8000518:	4f1f      	ldr	r7, [pc, #124]	@ (8000598 <Task1+0x8c>)
	msg_t msg = {.val1 = 0, .val2 = 0, .val3 = '\0'};
 800051a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800051e:	f88d 4006 	strb.w	r4, [sp, #6]
	uint32_t prev_time=0, prev_time2=0;
 8000522:	4625      	mov	r5, r4
		if((getMS() - prev_time) >= 500){
 8000524:	f001 fde4 	bl	80020f0 <xTaskGetTickCount>
 8000528:	1b40      	subs	r0, r0, r5
 800052a:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800052e:	d31d      	bcc.n	800056c <Task1+0x60>
			prev_time = getMS();
 8000530:	f001 fdde 	bl	80020f0 <xTaskGetTickCount>
			msg.val1++;
 8000534:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000538:	3301      	adds	r3, #1
 800053a:	f88d 3004 	strb.w	r3, [sp, #4]
			msg.val2++;
 800053e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000542:	3301      	adds	r3, #1
 8000544:	f88d 3005 	strb.w	r3, [sp, #5]
			msg.val3++;
 8000548:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800054c:	3301      	adds	r3, #1
 800054e:	f88d 3006 	strb.w	r3, [sp, #6]
			prev_time = getMS();
 8000552:	4605      	mov	r5, r0
			if(xQueueSend(q_task1_to_task2, &msg, pdMS_TO_TICKS(20)) != pdPASS)
 8000554:	2300      	movs	r3, #0
 8000556:	f8d8 0000 	ldr.w	r0, [r8]
 800055a:	2214      	movs	r2, #20
 800055c:	a901      	add	r1, sp, #4
 800055e:	f001 f9b1 	bl	80018c4 <xQueueGenericSend>
 8000562:	2801      	cmp	r0, #1
				task1_send_err++;
 8000564:	bf1e      	ittt	ne
 8000566:	7833      	ldrbne	r3, [r6, #0]
 8000568:	3301      	addne	r3, #1
 800056a:	7033      	strbne	r3, [r6, #0]
		if(xQueueReceive(q_task2_to_task1, &msg_task1, portMAX_DELAY) != pdPASS){
 800056c:	490b      	ldr	r1, [pc, #44]	@ (800059c <Task1+0x90>)
 800056e:	6838      	ldr	r0, [r7, #0]
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	f001 fab5 	bl	8001ae2 <xQueueReceive>
 8000578:	2801      	cmp	r0, #1
 800057a:	d007      	beq.n	800058c <Task1+0x80>
			task1_receive_time = getMS() - prev_time2;
 800057c:	f001 fdb8 	bl	80020f0 <xTaskGetTickCount>
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <Task1+0x94>)
 8000582:	1b00      	subs	r0, r0, r4
 8000584:	6018      	str	r0, [r3, #0]
			prev_time2 = getMS();
 8000586:	f001 fdb3 	bl	80020f0 <xTaskGetTickCount>
 800058a:	4604      	mov	r4, r0
		}

		vTaskDelay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f001 febf 	bl	8002310 <vTaskDelay>
		if((getMS() - prev_time) >= 500){
 8000592:	e7c7      	b.n	8000524 <Task1+0x18>
 8000594:	20000088 	.word	0x20000088
 8000598:	2000008c 	.word	0x2000008c
 800059c:	20000089 	.word	0x20000089
 80005a0:	20000084 	.word	0x20000084
 80005a4:	20000090 	.word	0x20000090

080005a8 <Task2>:

msg_t msg_task2 = {.val1 = 0, .val2 = 0, .val3 = '\0'};
uint8_t task2_send_err = 0;
uint32_t task2_receive_time = 0;
void Task2(void* param)
{
 80005a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t prev_time=0, prev_time2=0;
	msg_t msg = {.val1 = 0, .val2 = 0, .val3 = '\0'};
 80005ac:	2400      	movs	r4, #0

			msg.val1++;
			msg.val2++;
			msg.val3++;

			if(xQueueSend(q_task2_to_task1, &msg, pdMS_TO_TICKS(20)) != pdPASS)
 80005ae:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8000640 <Task2+0x98>
				task2_send_err++;
 80005b2:	4e1f      	ldr	r6, [pc, #124]	@ (8000630 <Task2+0x88>)

		}

		if(xQueueReceive(q_task1_to_task2, &msg_task2, pdMS_TO_TICKS(5)) != pdPASS){
 80005b4:	4f1f      	ldr	r7, [pc, #124]	@ (8000634 <Task2+0x8c>)
	msg_t msg = {.val1 = 0, .val2 = 0, .val3 = '\0'};
 80005b6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80005ba:	f88d 4006 	strb.w	r4, [sp, #6]
	uint32_t prev_time=0, prev_time2=0;
 80005be:	4625      	mov	r5, r4
		if((getMS() - prev_time) >= 500){
 80005c0:	f001 fd96 	bl	80020f0 <xTaskGetTickCount>
 80005c4:	1b40      	subs	r0, r0, r5
 80005c6:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80005ca:	d31d      	bcc.n	8000608 <Task2+0x60>
			prev_time = getMS();
 80005cc:	f001 fd90 	bl	80020f0 <xTaskGetTickCount>
			msg.val1++;
 80005d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	f88d 3004 	strb.w	r3, [sp, #4]
			msg.val2++;
 80005da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80005de:	3301      	adds	r3, #1
 80005e0:	f88d 3005 	strb.w	r3, [sp, #5]
			msg.val3++;
 80005e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80005e8:	3301      	adds	r3, #1
 80005ea:	f88d 3006 	strb.w	r3, [sp, #6]
			prev_time = getMS();
 80005ee:	4605      	mov	r5, r0
			if(xQueueSend(q_task2_to_task1, &msg, pdMS_TO_TICKS(20)) != pdPASS)
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8d8 0000 	ldr.w	r0, [r8]
 80005f6:	2214      	movs	r2, #20
 80005f8:	a901      	add	r1, sp, #4
 80005fa:	f001 f963 	bl	80018c4 <xQueueGenericSend>
 80005fe:	2801      	cmp	r0, #1
				task2_send_err++;
 8000600:	bf1e      	ittt	ne
 8000602:	7833      	ldrbne	r3, [r6, #0]
 8000604:	3301      	addne	r3, #1
 8000606:	7033      	strbne	r3, [r6, #0]
		if(xQueueReceive(q_task1_to_task2, &msg_task2, pdMS_TO_TICKS(5)) != pdPASS){
 8000608:	490b      	ldr	r1, [pc, #44]	@ (8000638 <Task2+0x90>)
 800060a:	6838      	ldr	r0, [r7, #0]
 800060c:	2205      	movs	r2, #5
 800060e:	f001 fa68 	bl	8001ae2 <xQueueReceive>
 8000612:	2801      	cmp	r0, #1
 8000614:	d007      	beq.n	8000626 <Task2+0x7e>
			task2_receive_time = getMS() - prev_time2;
 8000616:	f001 fd6b 	bl	80020f0 <xTaskGetTickCount>
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <Task2+0x94>)
 800061c:	1b00      	subs	r0, r0, r4
 800061e:	6018      	str	r0, [r3, #0]
			prev_time2 = getMS();
 8000620:	f001 fd66 	bl	80020f0 <xTaskGetTickCount>
 8000624:	4604      	mov	r4, r0
		}
		vTaskDelay(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f001 fe72 	bl	8002310 <vTaskDelay>
		if((getMS() - prev_time) >= 500){
 800062c:	e7c8      	b.n	80005c0 <Task2+0x18>
 800062e:	bf00      	nop
 8000630:	20000080 	.word	0x20000080
 8000634:	20000090 	.word	0x20000090
 8000638:	20000081 	.word	0x20000081
 800063c:	2000007c 	.word	0x2000007c
 8000640:	2000008c 	.word	0x2000008c

08000644 <SystemClock_Config>:
{
 8000644:	b510      	push	{r4, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000648:	2214      	movs	r2, #20
 800064a:	2100      	movs	r1, #0
 800064c:	a809      	add	r0, sp, #36	@ 0x24
 800064e:	f002 fc65 	bl	8002f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	2214      	movs	r2, #20
 8000654:	2100      	movs	r1, #0
 8000656:	a803      	add	r0, sp, #12
 8000658:	f002 fc60 	bl	8002f1c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	4a1e      	ldr	r2, [pc, #120]	@ (80006d8 <SystemClock_Config+0x94>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000664:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000668:	6411      	str	r1, [r2, #64]	@ 0x40
 800066a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800066c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemClock_Config+0x98>)
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	6811      	ldr	r1, [r2, #0]
 800067a:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800067e:	6011      	str	r1, [r2, #0]
 8000680:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000682:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000688:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2101      	movs	r1, #1
 800069c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069e:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	9412      	str	r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f000 fadb 	bl	8000c64 <HAL_RCC_OscConfig>
 80006ae:	b108      	cbz	r0, 80006b4 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c4:	2103      	movs	r1, #3
 80006c6:	a803      	add	r0, sp, #12
 80006c8:	f000 fca8 	bl	800101c <HAL_RCC_ClockConfig>
 80006cc:	b108      	cbz	r0, 80006d2 <SystemClock_Config+0x8e>
 80006ce:	b672      	cpsid	i
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <SystemClock_Config+0x8c>
}
 80006d2:	b014      	add	sp, #80	@ 0x50
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <main>:
{
 80006e0:	b500      	push	{lr}
 80006e2:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 80006e4:	f000 f974 	bl	80009d0 <HAL_Init>
  SystemClock_Config();
 80006e8:	f7ff ffac 	bl	8000644 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	2214      	movs	r2, #20
 80006ee:	2100      	movs	r1, #0
 80006f0:	eb0d 0002 	add.w	r0, sp, r2
 80006f4:	f002 fc12 	bl	8002f1c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	2400      	movs	r4, #0
 80006fa:	4b34      	ldr	r3, [pc, #208]	@ (80007cc <main+0xec>)
 80006fc:	9403      	str	r4, [sp, #12]
 80006fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000700:	4833      	ldr	r0, [pc, #204]	@ (80007d0 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	f042 0204 	orr.w	r2, r2, #4
 8000706:	631a      	str	r2, [r3, #48]	@ 0x30
 8000708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800070a:	f002 0204 	and.w	r2, r2, #4
 800070e:	9203      	str	r2, [sp, #12]
 8000710:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	9404      	str	r4, [sp, #16]
 8000714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000716:	f042 0201 	orr.w	r2, r2, #1
 800071a:	631a      	str	r2, [r3, #48]	@ 0x30
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000722:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000726:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800072a:	f000 fa95 	bl	8000c58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BTN_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000732:	4828      	ldr	r0, [pc, #160]	@ (80007d4 <main+0xf4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000736:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2501      	movs	r5, #1
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800073e:	f000 f9c5 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2320      	movs	r3, #32
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000744:	4822      	ldr	r0, [pc, #136]	@ (80007d0 <main+0xf0>)
 8000746:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000750:	f000 f9bc 	bl	8000acc <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000754:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <main+0xf8>)
  huart2.Init.BaudRate = 115200;
 8000756:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <main+0xfc>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000758:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 800075a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800075e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000762:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000768:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	f000 fec5 	bl	80014fc <HAL_UART_Init>
 8000772:	4604      	mov	r4, r0
 8000774:	b108      	cbz	r0, 800077a <main+0x9a>
 8000776:	b672      	cpsid	i
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x98>
  osKernelInitialize();
 800077a:	f000 fefb 	bl	8001574 <osKernelInitialize>
  xTaskCreate(Task1, "Task1", 1024, NULL, 1, &task1_handle);
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <main+0x100>)
 8000780:	4918      	ldr	r1, [pc, #96]	@ (80007e4 <main+0x104>)
 8000782:	4819      	ldr	r0, [pc, #100]	@ (80007e8 <main+0x108>)
 8000784:	e9cd 5300 	strd	r5, r3, [sp]
 8000788:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800078c:	4623      	mov	r3, r4
 800078e:	f001 fc29 	bl	8001fe4 <xTaskCreate>
  xTaskCreate(Task2, "Task2", 1024, NULL, 2, &task2_handle);
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <main+0x10c>)
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
 8000798:	4915      	ldr	r1, [pc, #84]	@ (80007f0 <main+0x110>)
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007a0:	4623      	mov	r3, r4
 80007a2:	4814      	ldr	r0, [pc, #80]	@ (80007f4 <main+0x114>)
 80007a4:	f001 fc1e 	bl	8001fe4 <xTaskCreate>
  q_task1_to_task2 = xQueueCreate(5, sizeof(msg_t));
 80007a8:	4622      	mov	r2, r4
 80007aa:	2103      	movs	r1, #3
 80007ac:	2005      	movs	r0, #5
 80007ae:	f001 f862 	bl	8001876 <xQueueGenericCreate>
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <main+0x118>)
  q_task2_to_task1 = xQueueCreate(5, sizeof(msg_t));
 80007b4:	4622      	mov	r2, r4
  q_task1_to_task2 = xQueueCreate(5, sizeof(msg_t));
 80007b6:	6018      	str	r0, [r3, #0]
  q_task2_to_task1 = xQueueCreate(5, sizeof(msg_t));
 80007b8:	2103      	movs	r1, #3
 80007ba:	2005      	movs	r0, #5
 80007bc:	f001 f85b 	bl	8001876 <xQueueGenericCreate>
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <main+0x11c>)
 80007c2:	6018      	str	r0, [r3, #0]
  vTaskStartScheduler();
 80007c4:	f001 fc3c 	bl	8002040 <vTaskStartScheduler>
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0xe8>
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	40020800 	.word	0x40020800
 80007d8:	2000009c 	.word	0x2000009c
 80007dc:	40004400 	.word	0x40004400
 80007e0:	20000098 	.word	0x20000098
 80007e4:	08003114 	.word	0x08003114
 80007e8:	0800050d 	.word	0x0800050d
 80007ec:	20000094 	.word	0x20000094
 80007f0:	0800311a 	.word	0x0800311a
 80007f4:	080005a9 	.word	0x080005a9
 80007f8:	20000090 	.word	0x20000090
 80007fc:	2000008c 	.word	0x2000008c

08000800 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1)
 8000800:	6802      	ldr	r2, [r0, #0]
 8000802:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000804:	429a      	cmp	r2, r3
 8000806:	d101      	bne.n	800080c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000808:	f000 b8fc 	b.w	8000a04 <HAL_IncTick>
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40010000 	.word	0x40010000

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_MspInit+0x3c>)
 8000818:	2200      	movs	r2, #0
 800081a:	9200      	str	r2, [sp, #0]
 800081c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800081e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000822:	6459      	str	r1, [r3, #68]	@ 0x44
 8000824:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000826:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000832:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000836:	6419      	str	r1, [r3, #64]	@ 0x40
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	210f      	movs	r1, #15
 8000844:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	f000 b8ff 	b.w	8000a4c <HAL_NVIC_SetPriority>
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b510      	push	{r4, lr}
 8000856:	4604      	mov	r4, r0
 8000858:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	2214      	movs	r2, #20
 800085c:	2100      	movs	r1, #0
 800085e:	a803      	add	r0, sp, #12
 8000860:	f002 fb5c 	bl	8002f1c <memset>
  if(huart->Instance==USART2)
 8000864:	6822      	ldr	r2, [r4, #0]
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_UART_MspInit+0x64>)
 8000868:	429a      	cmp	r2, r3
 800086a:	d122      	bne.n	80008b2 <HAL_UART_MspInit+0x5e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086c:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000870:	2100      	movs	r1, #0
 8000872:	9101      	str	r1, [sp, #4]
 8000874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	4811      	ldr	r0, [pc, #68]	@ (80008bc <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000878:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
 800087e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000880:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	9102      	str	r1, [sp, #8]
 800088a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800088c:	f042 0201 	orr.w	r2, r2, #1
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	220c      	movs	r2, #12
 800089e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a0:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	a903      	add	r1, sp, #12
 80008ae:	f000 f90d 	bl	8000acc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008b2:	b008      	add	sp, #32
 80008b4:	bd10      	pop	{r4, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40020000 	.word	0x40020000

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	b088      	sub	sp, #32
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008c4:	2400      	movs	r4, #0
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <HAL_InitTick+0x7c>)
 80008c8:	9402      	str	r4, [sp, #8]
 80008ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008cc:	4d1c      	ldr	r5, [pc, #112]	@ (8000940 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ce:	f042 0201 	orr.w	r2, r2, #1
 80008d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008da:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008dc:	9302      	str	r3, [sp, #8]
{
 80008de:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e4:	f000 fc54 	bl	8001190 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008e8:	f000 fc42 	bl	8001170 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_InitTick+0x84>)
 80008ee:	602b      	str	r3, [r5, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008f0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80008f4:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_InitTick+0x88>)
 80008f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80008fc:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80008fe:	6068      	str	r0, [r5, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8000900:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8000902:	612c      	str	r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	61ac      	str	r4, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8000908:	f000 fd6c 	bl	80013e4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800090c:	4604      	mov	r4, r0
 800090e:	b980      	cbnz	r0, 8000932 <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000910:	4628      	mov	r0, r5
 8000912:	f000 fc5d 	bl	80011d0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000916:	4604      	mov	r4, r0
 8000918:	b958      	cbnz	r0, 8000932 <HAL_InitTick+0x72>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800091a:	2019      	movs	r0, #25
 800091c:	f000 f8c8 	bl	8000ab0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000920:	2e0f      	cmp	r6, #15
 8000922:	d809      	bhi.n	8000938 <HAL_InitTick+0x78>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000924:	4622      	mov	r2, r4
 8000926:	4631      	mov	r1, r6
 8000928:	2019      	movs	r0, #25
 800092a:	f000 f88f 	bl	8000a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092e:	4b07      	ldr	r3, [pc, #28]	@ (800094c <HAL_InitTick+0x8c>)
 8000930:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8000932:	4620      	mov	r0, r4
 8000934:	b008      	add	sp, #32
 8000936:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8000938:	2401      	movs	r4, #1
 800093a:	e7fa      	b.n	8000932 <HAL_InitTick+0x72>
 800093c:	40023800 	.word	0x40023800
 8000940:	200000e4 	.word	0x200000e4
 8000944:	40010000 	.word	0x40010000
 8000948:	000f4240 	.word	0x000f4240
 800094c:	20000008 	.word	0x20000008

08000950 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler>

08000952 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler>

08000954 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler>

08000956 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler>

08000958 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler>

0800095a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	4770      	bx	lr

0800095c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800095c:	4801      	ldr	r0, [pc, #4]	@ (8000964 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800095e:	f000 bc6d 	b.w	800123c <HAL_TIM_IRQHandler>
 8000962:	bf00      	nop
 8000964:	200000e4 	.word	0x200000e4

08000968 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4a03      	ldr	r2, [pc, #12]	@ (8000978 <SystemInit+0x10>)
 800096a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800096e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000972:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000980:	f7ff fff2 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f002 fb1d 	bl	8002fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fe97 	bl	80006e0 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009c0:	0800315c 	.word	0x0800315c
  ldr r2, =_sbss
 80009c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009c8:	20004c54 	.word	0x20004c54

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <HAL_Init+0x30>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f81b 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	200f      	movs	r0, #15
 80009f4:	f7ff ff64 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff ff0c 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80009fc:	2000      	movs	r0, #0
 80009fe:	bd08      	pop	{r3, pc}
 8000a00:	40023c00 	.word	0x40023c00

08000a04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a04:	4a03      	ldr	r2, [pc, #12]	@ (8000a14 <HAL_IncTick+0x10>)
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <HAL_IncTick+0x14>)
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	440b      	add	r3, r1
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a1c:	4b01      	ldr	r3, [pc, #4]	@ (8000a24 <HAL_GetTick+0x8>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2000012c 	.word	0x2000012c

08000a28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4907      	ldr	r1, [pc, #28]	@ (8000a48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a2a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a38:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a44:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4e:	b530      	push	{r4, r5, lr}
 8000a50:	68dc      	ldr	r4, [r3, #12]
 8000a52:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a56:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	bf28      	it	cs
 8000a60:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a68:	bf8c      	ite	hi
 8000a6a:	3c03      	subhi	r4, #3
 8000a6c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6e:	fa05 f303 	lsl.w	r3, r5, r3
 8000a72:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a76:	40a5      	lsls	r5, r4
 8000a78:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	bfac      	ite	ge
 8000a86:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	4a08      	ldrlt	r2, [pc, #32]	@ (8000aac <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	bfb8      	it	lt
 8000a92:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	bfaa      	itet	ge
 8000a9a:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000aa4:	bd30      	pop	{r4, r5, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	e000ed14 	.word	0xe000ed14

08000ab0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	db07      	blt.n	8000ac4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_NVIC_EnableIRQ+0x18>)
 8000ab6:	0941      	lsrs	r1, r0, #5
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f000 001f 	and.w	r0, r0, #31
 8000abe:	4083      	lsls	r3, r0
 8000ac0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8000c54 <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8000c4c <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000ada:	2401      	movs	r4, #1
 8000adc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ade:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000ae2:	43ac      	bics	r4, r5
 8000ae4:	f040 80a3 	bne.w	8000c2e <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae8:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aea:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aec:	f005 0403 	and.w	r4, r5, #3
 8000af0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af4:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af8:	1e67      	subs	r7, r4, #1
 8000afa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000afc:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b00:	d834      	bhi.n	8000b6c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000b02:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b04:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b08:	68cf      	ldr	r7, [r1, #12]
 8000b0a:	fa07 f708 	lsl.w	r7, r7, r8
 8000b0e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000b12:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b14:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b16:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000b1e:	409f      	lsls	r7, r3
 8000b20:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b24:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b26:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b28:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2c:	688f      	ldr	r7, [r1, #8]
 8000b2e:	fa07 f708 	lsl.w	r7, r7, r8
 8000b32:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b36:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000b38:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	d119      	bne.n	8000b70 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000b3c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b40:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b44:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b48:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b4c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b50:	f04f 0e0f 	mov.w	lr, #15
 8000b54:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000b58:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b5c:	690f      	ldr	r7, [r1, #16]
 8000b5e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b62:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b66:	f8ca 7020 	str.w	r7, [sl, #32]
 8000b6a:	e001      	b.n	8000b70 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6c:	2c03      	cmp	r4, #3
 8000b6e:	d1da      	bne.n	8000b26 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000b70:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b72:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b76:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b7a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b7c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000b80:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b82:	d054      	beq.n	8000c2e <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	2400      	movs	r4, #0
 8000b86:	9401      	str	r4, [sp, #4]
 8000b88:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000b8c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000b90:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000b94:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000b98:	f023 0703 	bic.w	r7, r3, #3
 8000b9c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000ba0:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000ba4:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000ba8:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000baa:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bb0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bb4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bb8:	240f      	movs	r4, #15
 8000bba:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bbe:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bc2:	4c23      	ldr	r4, [pc, #140]	@ (8000c50 <HAL_GPIO_Init+0x184>)
 8000bc4:	42a0      	cmp	r0, r4
 8000bc6:	d039      	beq.n	8000c3c <HAL_GPIO_Init+0x170>
 8000bc8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d037      	beq.n	8000c40 <HAL_GPIO_Init+0x174>
 8000bd0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000bd4:	42a0      	cmp	r0, r4
 8000bd6:	d035      	beq.n	8000c44 <HAL_GPIO_Init+0x178>
 8000bd8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	d033      	beq.n	8000c48 <HAL_GPIO_Init+0x17c>
 8000be0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	bf14      	ite	ne
 8000be8:	2407      	movne	r4, #7
 8000bea:	2404      	moveq	r4, #4
 8000bec:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bf0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bf4:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8000bf6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bf8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bfa:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bfe:	bf0c      	ite	eq
 8000c00:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000c02:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8000c04:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000c06:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c08:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000c0c:	bf0c      	ite	eq
 8000c0e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000c10:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8000c12:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000c14:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c16:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c1a:	bf0c      	ite	eq
 8000c1c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000c1e:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8000c20:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c22:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c24:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000c26:	bf54      	ite	pl
 8000c28:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000c2a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000c2c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	3301      	adds	r3, #1
 8000c30:	2b10      	cmp	r3, #16
 8000c32:	f47f af51 	bne.w	8000ad8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000c36:	b003      	add	sp, #12
 8000c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	e7d5      	b.n	8000bec <HAL_GPIO_Init+0x120>
 8000c40:	2401      	movs	r4, #1
 8000c42:	e7d3      	b.n	8000bec <HAL_GPIO_Init+0x120>
 8000c44:	2402      	movs	r4, #2
 8000c46:	e7d1      	b.n	8000bec <HAL_GPIO_Init+0x120>
 8000c48:	2403      	movs	r4, #3
 8000c4a:	e7cf      	b.n	8000bec <HAL_GPIO_Init+0x120>
 8000c4c:	40013c00 	.word	0x40013c00
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c58:	b10a      	cbz	r2, 8000c5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c5a:	6181      	str	r1, [r0, #24]
  }
}
 8000c5c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c5e:	0409      	lsls	r1, r1, #16
 8000c60:	e7fb      	b.n	8000c5a <HAL_GPIO_WritePin+0x2>
	...

08000c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c68:	4604      	mov	r4, r0
 8000c6a:	b340      	cbz	r0, 8000cbe <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6c:	6803      	ldr	r3, [r0, #0]
 8000c6e:	07de      	lsls	r6, r3, #31
 8000c70:	d410      	bmi.n	8000c94 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	079d      	lsls	r5, r3, #30
 8000c76:	d45b      	bmi.n	8000d30 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	0719      	lsls	r1, r3, #28
 8000c7c:	f100 809d 	bmi.w	8000dba <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	075a      	lsls	r2, r3, #29
 8000c84:	f100 80bd 	bmi.w	8000e02 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c88:	69a3      	ldr	r3, [r4, #24]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 8124 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000c90:	2000      	movs	r0, #0
 8000c92:	e02c      	b.n	8000cee <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c94:	4b8d      	ldr	r3, [pc, #564]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	f002 020c 	and.w	r2, r2, #12
 8000c9c:	2a04      	cmp	r2, #4
 8000c9e:	d007      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ca6:	2a08      	cmp	r2, #8
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	0259      	lsls	r1, r3, #9
 8000cae:	d508      	bpl.n	8000cc2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb0:	4b86      	ldr	r3, [pc, #536]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	039a      	lsls	r2, r3, #14
 8000cb6:	d5dc      	bpl.n	8000c72 <HAL_RCC_OscConfig+0xe>
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1d9      	bne.n	8000c72 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	4d81      	ldr	r5, [pc, #516]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cca:	d113      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x90>
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fea2 	bl	8000a1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	4e7c      	ldr	r6, [pc, #496]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8000cda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	6833      	ldr	r3, [r6, #0]
 8000cde:	039b      	lsls	r3, r3, #14
 8000ce0:	d4c7      	bmi.n	8000c72 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fe9b 	bl	8000a1c <HAL_GetTick>
 8000ce6:	1b40      	subs	r0, r0, r5
 8000ce8:	2864      	cmp	r0, #100	@ 0x64
 8000cea:	d9f7      	bls.n	8000cdc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cf8:	d104      	bne.n	8000d04 <HAL_RCC_OscConfig+0xa0>
 8000cfa:	682b      	ldr	r3, [r5, #0]
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	e7e3      	b.n	8000ccc <HAL_RCC_OscConfig+0x68>
 8000d04:	682a      	ldr	r2, [r5, #0]
 8000d06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d0a:	602a      	str	r2, [r5, #0]
 8000d0c:	682a      	ldr	r2, [r5, #0]
 8000d0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d12:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1dd      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8000d18:	f7ff fe80 	bl	8000a1c <HAL_GetTick>
 8000d1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	682b      	ldr	r3, [r5, #0]
 8000d20:	039f      	lsls	r7, r3, #14
 8000d22:	d5a6      	bpl.n	8000c72 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fe7a 	bl	8000a1c <HAL_GetTick>
 8000d28:	1b80      	subs	r0, r0, r6
 8000d2a:	2864      	cmp	r0, #100	@ 0x64
 8000d2c:	d9f7      	bls.n	8000d1e <HAL_RCC_OscConfig+0xba>
 8000d2e:	e7dd      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d30:	4b66      	ldr	r3, [pc, #408]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	f012 0f0c 	tst.w	r2, #12
 8000d38:	d007      	beq.n	8000d4a <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d40:	2a08      	cmp	r2, #8
 8000d42:	d111      	bne.n	8000d68 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	025d      	lsls	r5, r3, #9
 8000d48:	d40e      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	4a60      	ldr	r2, [pc, #384]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000d4c:	6813      	ldr	r3, [r2, #0]
 8000d4e:	0799      	lsls	r1, r3, #30
 8000d50:	d502      	bpl.n	8000d58 <HAL_RCC_OscConfig+0xf4>
 8000d52:	68e3      	ldr	r3, [r4, #12]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d1b2      	bne.n	8000cbe <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	6921      	ldr	r1, [r4, #16]
 8000d5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000d60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d64:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	e787      	b.n	8000c78 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d68:	68e2      	ldr	r2, [r4, #12]
 8000d6a:	4b59      	ldr	r3, [pc, #356]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	b1b2      	cbz	r2, 8000d9c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d72:	f7ff fe53 	bl	8000a1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d76:	4d55      	ldr	r5, [pc, #340]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8000d78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	079b      	lsls	r3, r3, #30
 8000d7e:	d507      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	6922      	ldr	r2, [r4, #16]
 8000d84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000d88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d8c:	602b      	str	r3, [r5, #0]
 8000d8e:	e773      	b.n	8000c78 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fe44 	bl	8000a1c <HAL_GetTick>
 8000d94:	1b80      	subs	r0, r0, r6
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d9ef      	bls.n	8000d7a <HAL_RCC_OscConfig+0x116>
 8000d9a:	e7a7      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000d9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fe3d 	bl	8000a1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4e4a      	ldr	r6, [pc, #296]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8000da4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da6:	6833      	ldr	r3, [r6, #0]
 8000da8:	079f      	lsls	r7, r3, #30
 8000daa:	f57f af65 	bpl.w	8000c78 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dae:	f7ff fe35 	bl	8000a1c <HAL_GetTick>
 8000db2:	1b40      	subs	r0, r0, r5
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d9f6      	bls.n	8000da6 <HAL_RCC_OscConfig+0x142>
 8000db8:	e798      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000dba:	6962      	ldr	r2, [r4, #20]
 8000dbc:	4b44      	ldr	r3, [pc, #272]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	b182      	cbz	r2, 8000de2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fe29 	bl	8000a1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4e40      	ldr	r6, [pc, #256]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8000dcc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000dd0:	079b      	lsls	r3, r3, #30
 8000dd2:	f53f af55 	bmi.w	8000c80 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fe21 	bl	8000a1c <HAL_GetTick>
 8000dda:	1b40      	subs	r0, r0, r5
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f6      	bls.n	8000dce <HAL_RCC_OscConfig+0x16a>
 8000de0:	e784      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000de2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000de6:	f7ff fe19 	bl	8000a1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dea:	4e38      	ldr	r6, [pc, #224]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8000dec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dee:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000df0:	079f      	lsls	r7, r3, #30
 8000df2:	f57f af45 	bpl.w	8000c80 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df6:	f7ff fe11 	bl	8000a1c <HAL_GetTick>
 8000dfa:	1b40      	subs	r0, r0, r5
 8000dfc:	2802      	cmp	r0, #2
 8000dfe:	d9f6      	bls.n	8000dee <HAL_RCC_OscConfig+0x18a>
 8000e00:	e774      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e02:	4b32      	ldr	r3, [pc, #200]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e06:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8000e0a:	d128      	bne.n	8000e5e <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	9201      	str	r2, [sp, #4]
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e10:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e20:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e22:	4d2c      	ldr	r5, [pc, #176]	@ (8000ed4 <HAL_RCC_OscConfig+0x270>)
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	05d8      	lsls	r0, r3, #23
 8000e28:	d51b      	bpl.n	8000e62 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2a:	68a3      	ldr	r3, [r4, #8]
 8000e2c:	4d27      	ldr	r5, [pc, #156]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d127      	bne.n	8000e82 <HAL_RCC_OscConfig+0x21e>
 8000e32:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fdef 	bl	8000a1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3e:	4e23      	ldr	r6, [pc, #140]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8000e40:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e42:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e46:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000e48:	079a      	lsls	r2, r3, #30
 8000e4a:	d539      	bpl.n	8000ec0 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 8000e4c:	2f00      	cmp	r7, #0
 8000e4e:	f43f af1b 	beq.w	8000c88 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <HAL_RCC_OscConfig+0x268>)
 8000e54:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	e714      	b.n	8000c88 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000e5e:	2700      	movs	r7, #0
 8000e60:	e7df      	b.n	8000e22 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e68:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fdd7 	bl	8000a1c <HAL_GetTick>
 8000e6e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	05d9      	lsls	r1, r3, #23
 8000e74:	d4d9      	bmi.n	8000e2a <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e76:	f7ff fdd1 	bl	8000a1c <HAL_GetTick>
 8000e7a:	1b80      	subs	r0, r0, r6
 8000e7c:	2802      	cmp	r0, #2
 8000e7e:	d9f7      	bls.n	8000e70 <HAL_RCC_OscConfig+0x20c>
 8000e80:	e734      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d104      	bne.n	8000e90 <HAL_RCC_OscConfig+0x22c>
 8000e86:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	672b      	str	r3, [r5, #112]	@ 0x70
 8000e8e:	e7d0      	b.n	8000e32 <HAL_RCC_OscConfig+0x1ce>
 8000e90:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	672a      	str	r2, [r5, #112]	@ 0x70
 8000e98:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8000e9a:	f022 0204 	bic.w	r2, r2, #4
 8000e9e:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1ca      	bne.n	8000e3a <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fdba 	bl	8000a1c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000eac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eae:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000eb0:	079b      	lsls	r3, r3, #30
 8000eb2:	d5cb      	bpl.n	8000e4c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fdb2 	bl	8000a1c <HAL_GetTick>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	4540      	cmp	r0, r8
 8000ebc:	d9f7      	bls.n	8000eae <HAL_RCC_OscConfig+0x24a>
 8000ebe:	e715      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fdac 	bl	8000a1c <HAL_GetTick>
 8000ec4:	1b40      	subs	r0, r0, r5
 8000ec6:	4540      	cmp	r0, r8
 8000ec8:	d9bd      	bls.n	8000e46 <HAL_RCC_OscConfig+0x1e2>
 8000eca:	e70f      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	42470000 	.word	0x42470000
 8000ed4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ed8:	4d37      	ldr	r5, [pc, #220]	@ (8000fb8 <HAL_RCC_OscConfig+0x354>)
 8000eda:	68aa      	ldr	r2, [r5, #8]
 8000edc:	f002 020c 	and.w	r2, r2, #12
 8000ee0:	2a08      	cmp	r2, #8
 8000ee2:	d03e      	beq.n	8000f62 <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <HAL_RCC_OscConfig+0x358>)
 8000ee8:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8000eec:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eee:	d12b      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fd94 	bl	8000a1c <HAL_GetTick>
 8000ef4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	0199      	lsls	r1, r3, #6
 8000efa:	d41f      	bmi.n	8000f3c <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000efc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000f04:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f08:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000f0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f0e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f10:	0852      	lsrs	r2, r2, #1
 8000f12:	3a01      	subs	r2, #1
 8000f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f18:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f1a:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1c:	4d26      	ldr	r5, [pc, #152]	@ (8000fb8 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8000f1e:	2201      	movs	r2, #1
 8000f20:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000f22:	f7ff fd7b 	bl	8000a1c <HAL_GetTick>
 8000f26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	019a      	lsls	r2, r3, #6
 8000f2c:	f53f aeb0 	bmi.w	8000c90 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff fd74 	bl	8000a1c <HAL_GetTick>
 8000f34:	1b00      	subs	r0, r0, r4
 8000f36:	2802      	cmp	r0, #2
 8000f38:	d9f6      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2c4>
 8000f3a:	e6d7      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff fd6e 	bl	8000a1c <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d9d7      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x292>
 8000f46:	e6d1      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000f48:	f7ff fd68 	bl	8000a1c <HAL_GetTick>
 8000f4c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	f57f ae9d 	bpl.w	8000c90 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fd61 	bl	8000a1c <HAL_GetTick>
 8000f5a:	1b00      	subs	r0, r0, r4
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d9f6      	bls.n	8000f4e <HAL_RCC_OscConfig+0x2ea>
 8000f60:	e6c4      	b.n	8000cec <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	f43f aeab 	beq.w	8000cbe <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8000f68:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f6a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f70:	4291      	cmp	r1, r2
 8000f72:	f47f aea4 	bne.w	8000cbe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f76:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f78:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	f47f ae9e 	bne.w	8000cbe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f84:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000f88:	401a      	ands	r2, r3
 8000f8a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000f8e:	f47f ae96 	bne.w	8000cbe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f92:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f94:	0852      	lsrs	r2, r2, #1
 8000f96:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f9a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f9c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000fa0:	f47f ae8d 	bne.w	8000cbe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fa4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000fa6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000faa:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000fae:	bf14      	ite	ne
 8000fb0:	2001      	movne	r0, #1
 8000fb2:	2000      	moveq	r0, #0
 8000fb4:	e69b      	b.n	8000cee <HAL_RCC_OscConfig+0x8a>
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	42470000 	.word	0x42470000

08000fc0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fc0:	4913      	ldr	r1, [pc, #76]	@ (8001010 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000fc2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fc4:	688b      	ldr	r3, [r1, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d01c      	beq.n	8001008 <HAL_RCC_GetSysClockFreq+0x48>
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d11c      	bne.n	800100c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fd2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fd6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fdc:	bf14      	ite	ne
 8000fde:	480d      	ldrne	r0, [pc, #52]	@ (8001014 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe0:	480d      	ldreq	r0, [pc, #52]	@ (8001018 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fe6:	bf18      	it	ne
 8000fe8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fee:	fba1 0100 	umull	r0, r1, r1, r0
 8000ff2:	f7ff f8f5 	bl	80001e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ffe:	3301      	adds	r3, #1
 8001000:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001002:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001006:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <HAL_RCC_GetSysClockFreq+0x54>)
 800100a:	e7fc      	b.n	8001006 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800100e:	e7fa      	b.n	8001006 <HAL_RCC_GetSysClockFreq+0x46>
 8001010:	40023800 	.word	0x40023800
 8001014:	017d7840 	.word	0x017d7840
 8001018:	00f42400 	.word	0x00f42400

0800101c <HAL_RCC_ClockConfig>:
{
 800101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001022:	4604      	mov	r4, r0
 8001024:	b910      	cbnz	r0, 800102c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
}
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800102c:	4b43      	ldr	r3, [pc, #268]	@ (800113c <HAL_RCC_ClockConfig+0x120>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f002 0207 	and.w	r2, r2, #7
 8001034:	428a      	cmp	r2, r1
 8001036:	d328      	bcc.n	800108a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001038:	6821      	ldr	r1, [r4, #0]
 800103a:	078f      	lsls	r7, r1, #30
 800103c:	d42d      	bmi.n	800109a <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103e:	07c8      	lsls	r0, r1, #31
 8001040:	d440      	bmi.n	80010c4 <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001042:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <HAL_RCC_ClockConfig+0x120>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f002 0207 	and.w	r2, r2, #7
 800104a:	42aa      	cmp	r2, r5
 800104c:	d865      	bhi.n	800111a <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	0751      	lsls	r1, r2, #29
 8001052:	d46b      	bmi.n	800112c <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	0713      	lsls	r3, r2, #28
 8001056:	d507      	bpl.n	8001068 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001058:	4a39      	ldr	r2, [pc, #228]	@ (8001140 <HAL_RCC_ClockConfig+0x124>)
 800105a:	6921      	ldr	r1, [r4, #16]
 800105c:	6893      	ldr	r3, [r2, #8]
 800105e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001062:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001066:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001068:	f7ff ffaa 	bl	8000fc0 <HAL_RCC_GetSysClockFreq>
 800106c:	4b34      	ldr	r3, [pc, #208]	@ (8001140 <HAL_RCC_ClockConfig+0x124>)
 800106e:	4a35      	ldr	r2, [pc, #212]	@ (8001144 <HAL_RCC_ClockConfig+0x128>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	40d8      	lsrs	r0, r3
 800107a:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <HAL_RCC_ClockConfig+0x12c>)
 800107c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800107e:	4b33      	ldr	r3, [pc, #204]	@ (800114c <HAL_RCC_ClockConfig+0x130>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f7ff fc1d 	bl	80008c0 <HAL_InitTick>
  return HAL_OK;
 8001086:	2000      	movs	r0, #0
 8001088:	e7ce      	b.n	8001028 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	428b      	cmp	r3, r1
 8001096:	d1c6      	bne.n	8001026 <HAL_RCC_ClockConfig+0xa>
 8001098:	e7ce      	b.n	8001038 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_RCC_ClockConfig+0x124>)
 800109c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a0:	bf1e      	ittt	ne
 80010a2:	689a      	ldrne	r2, [r3, #8]
 80010a4:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 80010a8:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ac:	bf42      	ittt	mi
 80010ae:	689a      	ldrmi	r2, [r3, #8]
 80010b0:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 80010b4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	68a0      	ldr	r0, [r4, #8]
 80010ba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80010be:	4302      	orrs	r2, r0
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	e7bc      	b.n	800103e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c4:	6862      	ldr	r2, [r4, #4]
 80010c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_RCC_ClockConfig+0x124>)
 80010c8:	2a01      	cmp	r2, #1
 80010ca:	d11c      	bne.n	8001106 <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	d0a8      	beq.n	8001026 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d4:	4e1a      	ldr	r6, [pc, #104]	@ (8001140 <HAL_RCC_ClockConfig+0x124>)
 80010d6:	68b3      	ldr	r3, [r6, #8]
 80010d8:	f023 0303 	bic.w	r3, r3, #3
 80010dc:	4313      	orrs	r3, r2
 80010de:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010e0:	f7ff fc9c 	bl	8000a1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e4:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80010e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ea:	68b3      	ldr	r3, [r6, #8]
 80010ec:	6862      	ldr	r2, [r4, #4]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010f6:	d0a4      	beq.n	8001042 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff fc90 	bl	8000a1c <HAL_GetTick>
 80010fc:	1bc0      	subs	r0, r0, r7
 80010fe:	4540      	cmp	r0, r8
 8001100:	d9f3      	bls.n	80010ea <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001102:	2003      	movs	r0, #3
 8001104:	e790      	b.n	8001028 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001106:	1e91      	subs	r1, r2, #2
 8001108:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110a:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110c:	d802      	bhi.n	8001114 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001112:	e7de      	b.n	80010d2 <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	f013 0f02 	tst.w	r3, #2
 8001118:	e7db      	b.n	80010d2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	b2ea      	uxtb	r2, r5
 800111c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	42ab      	cmp	r3, r5
 8001126:	f47f af7e 	bne.w	8001026 <HAL_RCC_ClockConfig+0xa>
 800112a:	e790      	b.n	800104e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800112c:	4904      	ldr	r1, [pc, #16]	@ (8001140 <HAL_RCC_ClockConfig+0x124>)
 800112e:	68e0      	ldr	r0, [r4, #12]
 8001130:	688b      	ldr	r3, [r1, #8]
 8001132:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001136:	4303      	orrs	r3, r0
 8001138:	608b      	str	r3, [r1, #8]
 800113a:	e78b      	b.n	8001054 <HAL_RCC_ClockConfig+0x38>
 800113c:	40023c00 	.word	0x40023c00
 8001140:	40023800 	.word	0x40023800
 8001144:	0800313a 	.word	0x0800313a
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800115e:	6810      	ldr	r0, [r2, #0]
}
 8001160:	40d8      	lsrs	r0, r3
 8001162:	4770      	bx	lr
 8001164:	40023800 	.word	0x40023800
 8001168:	08003132 	.word	0x08003132
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800117e:	6810      	ldr	r0, [r2, #0]
}
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4770      	bx	lr
 8001184:	40023800 	.word	0x40023800
 8001188:	08003132 	.word	0x08003132
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001190:	230f      	movs	r3, #15
 8001192:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_RCC_GetClockConfig+0x34>)
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80011a4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80011ac:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80011b6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_RCC_GetClockConfig+0x38>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	600b      	str	r3, [r1, #0]
}
 80011c2:	4770      	bx	lr
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d128      	bne.n	800122a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011d8:	2302      	movs	r3, #2
 80011da:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011de:	6803      	ldr	r3, [r0, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011e8:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <HAL_TIM_Base_Start_IT+0x60>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d012      	beq.n	8001214 <HAL_TIM_Base_Start_IT+0x44>
 80011ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011f2:	d00f      	beq.n	8001214 <HAL_TIM_Base_Start_IT+0x44>
 80011f4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00b      	beq.n	8001214 <HAL_TIM_Base_Start_IT+0x44>
 80011fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_TIM_Base_Start_IT+0x44>
 8001204:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001208:	4293      	cmp	r3, r2
 800120a:	d003      	beq.n	8001214 <HAL_TIM_Base_Start_IT+0x44>
 800120c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001210:	4293      	cmp	r3, r2
 8001212:	d104      	bne.n	800121e <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800121a:	2a06      	cmp	r2, #6
 800121c:	d003      	beq.n	8001226 <HAL_TIM_Base_Start_IT+0x56>
    {
      __HAL_TIM_ENABLE(htim);
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2000      	movs	r0, #0
 8001228:	4770      	bx	lr
    return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8001234:	4770      	bx	lr

08001236 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8001236:	4770      	bx	lr

08001238 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001238:	4770      	bx	lr

0800123a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800123a:	4770      	bx	lr

0800123c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800123c:	6803      	ldr	r3, [r0, #0]
{
 800123e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001240:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001242:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001244:	07b1      	lsls	r1, r6, #30
{
 8001246:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001248:	d50d      	bpl.n	8001266 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800124a:	07aa      	lsls	r2, r5, #30
 800124c:	d50b      	bpl.n	8001266 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800124e:	f06f 0202 	mvn.w	r2, #2
 8001252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001254:	2201      	movs	r2, #1
 8001256:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	079b      	lsls	r3, r3, #30
 800125c:	d069      	beq.n	8001332 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 800125e:	f7ff ffea 	bl	8001236 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001262:	2300      	movs	r3, #0
 8001264:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001266:	0771      	lsls	r1, r6, #29
 8001268:	d510      	bpl.n	800128c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800126a:	076a      	lsls	r2, r5, #29
 800126c:	d50e      	bpl.n	800128c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	f06f 0204 	mvn.w	r2, #4
 8001274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001276:	2202      	movs	r2, #2
 8001278:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001280:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001282:	d05c      	beq.n	800133e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001284:	f7ff ffd7 	bl	8001236 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001288:	2300      	movs	r3, #0
 800128a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800128c:	0733      	lsls	r3, r6, #28
 800128e:	d50f      	bpl.n	80012b0 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001290:	0728      	lsls	r0, r5, #28
 8001292:	d50d      	bpl.n	80012b0 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	f06f 0208 	mvn.w	r2, #8
 800129a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800129c:	2204      	movs	r2, #4
 800129e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80012a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012a6:	d050      	beq.n	800134a <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80012a8:	f7ff ffc5 	bl	8001236 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ac:	2300      	movs	r3, #0
 80012ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80012b0:	06f2      	lsls	r2, r6, #27
 80012b2:	d510      	bpl.n	80012d6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80012b4:	06eb      	lsls	r3, r5, #27
 80012b6:	d50e      	bpl.n	80012d6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	f06f 0210 	mvn.w	r2, #16
 80012be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012c0:	2208      	movs	r2, #8
 80012c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80012ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012cc:	d043      	beq.n	8001356 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012ce:	f7ff ffb2 	bl	8001236 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012d2:	2300      	movs	r3, #0
 80012d4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80012d6:	07f0      	lsls	r0, r6, #31
 80012d8:	d508      	bpl.n	80012ec <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80012da:	07e9      	lsls	r1, r5, #31
 80012dc:	d506      	bpl.n	80012ec <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	f06f 0201 	mvn.w	r2, #1
 80012e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fa8a 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80012ec:	0632      	lsls	r2, r6, #24
 80012ee:	d508      	bpl.n	8001302 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80012f0:	062b      	lsls	r3, r5, #24
 80012f2:	d506      	bpl.n	8001302 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80012fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012fc:	4620      	mov	r0, r4
 80012fe:	f000 f89e 	bl	800143e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001302:	0670      	lsls	r0, r6, #25
 8001304:	d508      	bpl.n	8001318 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001306:	0669      	lsls	r1, r5, #25
 8001308:	d506      	bpl.n	8001318 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001310:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff ff91 	bl	800123a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001318:	06b2      	lsls	r2, r6, #26
 800131a:	d522      	bpl.n	8001362 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800131c:	06ab      	lsls	r3, r5, #26
 800131e:	d520      	bpl.n	8001362 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001326:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001328:	611a      	str	r2, [r3, #16]
}
 800132a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800132e:	f000 b885 	b.w	800143c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001332:	f7ff ff7f 	bl	8001234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff ff7e 	bl	8001238 <HAL_TIM_PWM_PulseFinishedCallback>
 800133c:	e791      	b.n	8001262 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800133e:	f7ff ff79 	bl	8001234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff ff78 	bl	8001238 <HAL_TIM_PWM_PulseFinishedCallback>
 8001348:	e79e      	b.n	8001288 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800134a:	f7ff ff73 	bl	8001234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff ff72 	bl	8001238 <HAL_TIM_PWM_PulseFinishedCallback>
 8001354:	e7aa      	b.n	80012ac <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001356:	f7ff ff6d 	bl	8001234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff ff6c 	bl	8001238 <HAL_TIM_PWM_PulseFinishedCallback>
 8001360:	e7b7      	b.n	80012d2 <HAL_TIM_IRQHandler+0x96>
}
 8001362:	bd70      	pop	{r4, r5, r6, pc}

08001364 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001364:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8001366:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001368:	4290      	cmp	r0, r2
 800136a:	d00e      	beq.n	800138a <TIM_Base_SetConfig+0x26>
 800136c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001370:	d00b      	beq.n	800138a <TIM_Base_SetConfig+0x26>
 8001372:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001376:	4290      	cmp	r0, r2
 8001378:	d007      	beq.n	800138a <TIM_Base_SetConfig+0x26>
 800137a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800137e:	4290      	cmp	r0, r2
 8001380:	d003      	beq.n	800138a <TIM_Base_SetConfig+0x26>
 8001382:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001386:	4290      	cmp	r0, r2
 8001388:	d108      	bne.n	800139c <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800138a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800138c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001390:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001392:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001398:	4313      	orrs	r3, r2
 800139a:	e00a      	b.n	80013b2 <TIM_Base_SetConfig+0x4e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800139c:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <TIM_Base_SetConfig+0x7c>)
 800139e:	4290      	cmp	r0, r2
 80013a0:	d0f7      	beq.n	8001392 <TIM_Base_SetConfig+0x2e>
 80013a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d0f3      	beq.n	8001392 <TIM_Base_SetConfig+0x2e>
 80013aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013ae:	4290      	cmp	r0, r2
 80013b0:	d0ef      	beq.n	8001392 <TIM_Base_SetConfig+0x2e>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013b2:	694a      	ldr	r2, [r1, #20]
 80013b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013b8:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013ba:	688a      	ldr	r2, [r1, #8]
 80013bc:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013be:	680a      	ldr	r2, [r1, #0]
 80013c0:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013c2:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <TIM_Base_SetConfig+0x78>)
 80013c4:	4290      	cmp	r0, r2
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013c6:	bf04      	itt	eq
 80013c8:	690a      	ldreq	r2, [r1, #16]
 80013ca:	6302      	streq	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80013cc:	6802      	ldr	r2, [r0, #0]
 80013ce:	f042 0204 	orr.w	r2, r2, #4
 80013d2:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013d4:	2201      	movs	r2, #1
 80013d6:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 80013d8:	6003      	str	r3, [r0, #0]
}
 80013da:	4770      	bx	lr
 80013dc:	40010000 	.word	0x40010000
 80013e0:	40014000 	.word	0x40014000

080013e4 <HAL_TIM_Base_Init>:
{
 80013e4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80013e6:	4604      	mov	r4, r0
 80013e8:	b330      	cbz	r0, 8001438 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80013ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80013f2:	b91b      	cbnz	r3, 80013fc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80013f4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80013f8:	f7ff fee8 	bl	80011cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80013fc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013fe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001400:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001404:	1d21      	adds	r1, r4, #4
 8001406:	f7ff ffad 	bl	8001364 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800140a:	2301      	movs	r3, #1
 800140c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8001410:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001412:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001416:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800141a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800141e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001422:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800142a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800142e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001432:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8001436:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001438:	2001      	movs	r0, #1
 800143a:	e7fc      	b.n	8001436 <HAL_TIM_Base_Init+0x52>

0800143c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800143c:	4770      	bx	lr

0800143e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800143e:	4770      	bx	lr

08001440 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	68c1      	ldr	r1, [r0, #12]
{
 8001444:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001446:	6913      	ldr	r3, [r2, #16]
 8001448:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800144c:	430b      	orrs	r3, r1
 800144e:	6113      	str	r3, [r2, #16]
{
 8001450:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001452:	6883      	ldr	r3, [r0, #8]
 8001454:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001456:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001458:	4303      	orrs	r3, r0
 800145a:	6968      	ldr	r0, [r5, #20]
 800145c:	4303      	orrs	r3, r0
 800145e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001460:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8001464:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001468:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800146a:	430b      	orrs	r3, r1
 800146c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800146e:	6953      	ldr	r3, [r2, #20]
 8001470:	69a9      	ldr	r1, [r5, #24]
 8001472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001476:	430b      	orrs	r3, r1
 8001478:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <UART_SetConfig+0xb8>)
 800147c:	429a      	cmp	r2, r3
 800147e:	d003      	beq.n	8001488 <UART_SetConfig+0x48>
 8001480:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001484:	429a      	cmp	r2, r3
 8001486:	d124      	bne.n	80014d2 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001488:	f7ff fe72 	bl	8001170 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800148c:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800148e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001490:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001494:	e9d5 4300 	ldrd	r4, r3, [r5]
 8001498:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800149c:	d11c      	bne.n	80014d8 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800149e:	18da      	adds	r2, r3, r3
 80014a0:	f04f 0500 	mov.w	r5, #0
 80014a4:	eb45 0305 	adc.w	r3, r5, r5
 80014a8:	f7fe fe9a 	bl	80001e0 <__aeabi_uldivmod>
 80014ac:	2264      	movs	r2, #100	@ 0x64
 80014ae:	fbb0 f1f2 	udiv	r1, r0, r2
 80014b2:	fb02 0311 	mls	r3, r2, r1, r0
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	3332      	adds	r3, #50	@ 0x32
 80014ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80014be:	f003 0207 	and.w	r2, r3, #7
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80014cc:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014ce:	60a3      	str	r3, [r4, #8]
  }
}
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80014d2:	f7ff fe3d 	bl	8001150 <HAL_RCC_GetPCLK1Freq>
 80014d6:	e7d9      	b.n	800148c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014d8:	009a      	lsls	r2, r3, #2
 80014da:	0f9b      	lsrs	r3, r3, #30
 80014dc:	f7fe fe80 	bl	80001e0 <__aeabi_uldivmod>
 80014e0:	2264      	movs	r2, #100	@ 0x64
 80014e2:	fbb0 f1f2 	udiv	r1, r0, r2
 80014e6:	fb02 0311 	mls	r3, r2, r1, r0
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	3332      	adds	r3, #50	@ 0x32
 80014ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80014f6:	e7ea      	b.n	80014ce <UART_SetConfig+0x8e>
 80014f8:	40011000 	.word	0x40011000

080014fc <HAL_UART_Init>:
{
 80014fc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80014fe:	4604      	mov	r4, r0
 8001500:	b348      	cbz	r0, 8001556 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001502:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001506:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800150a:	b91b      	cbnz	r3, 8001514 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800150c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001510:	f7ff f9a0 	bl	8000854 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001514:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001516:	2324      	movs	r3, #36	@ 0x24
 8001518:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800151c:	68d3      	ldr	r3, [r2, #12]
 800151e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001522:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff ff8b 	bl	8001440 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001532:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800153a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001542:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001544:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001546:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001548:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800154a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800154e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001552:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001554:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e7fc      	b.n	8001554 <HAL_UART_Init+0x58>

0800155a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800155a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800155c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001560:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001562:	f000 ffff 	bl	8002564 <xTaskGetSchedulerState>
 8001566:	2801      	cmp	r0, #1
 8001568:	d003      	beq.n	8001572 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800156a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800156e:	f001 bb01 	b.w	8002b74 <xPortSysTickHandler>
}
 8001572:	bd08      	pop	{r3, pc}

08001574 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001574:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001578:	b92b      	cbnz	r3, 8001586 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <osKernelInitialize+0x20>)
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	b928      	cbnz	r0, 800158c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001584:	4770      	bx	lr
    stat = osErrorISR;
 8001586:	f06f 0005 	mvn.w	r0, #5
 800158a:	4770      	bx	lr
    } else {
      stat = osError;
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000880 	.word	0x20000880

08001598 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <vApplicationGetIdleTaskMemory+0x10>)
 800159a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <vApplicationGetIdleTaskMemory+0x14>)
 800159e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200007d8 	.word	0x200007d8
 80015ac:	200005d8 	.word	0x200005d8

080015b0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <vApplicationGetTimerTaskMemory+0x10>)
 80015b2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <vApplicationGetTimerTaskMemory+0x14>)
 80015b6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80015b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	4770      	bx	lr
 80015c0:	20000530 	.word	0x20000530
 80015c4:	20000130 	.word	0x20000130

080015c8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015c8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015d4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015d6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80015dc:	4770      	bx	lr

080015de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80015e2:	4770      	bx	lr

080015e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80015e4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015e6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015ec:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015ee:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80015f0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80015f2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80015f4:	3301      	adds	r3, #1
 80015f6:	6003      	str	r3, [r0, #0]
}
 80015f8:	4770      	bx	lr

080015fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015fa:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015fc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015fe:	1c63      	adds	r3, r4, #1
 8001600:	d10a      	bne.n	8001618 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001602:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001608:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800160a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800160c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800160e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8001610:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001612:	3301      	adds	r3, #1
 8001614:	6003      	str	r3, [r0, #0]
}
 8001616:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001618:	f100 0208 	add.w	r2, r0, #8
 800161c:	4613      	mov	r3, r2
 800161e:	6852      	ldr	r2, [r2, #4]
 8001620:	6815      	ldr	r5, [r2, #0]
 8001622:	42a5      	cmp	r5, r4
 8001624:	d9fa      	bls.n	800161c <vListInsert+0x22>
 8001626:	e7ed      	b.n	8001604 <vListInsert+0xa>

08001628 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001628:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800162c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800162e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001630:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001636:	bf08      	it	eq
 8001638:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800163a:	2200      	movs	r2, #0
 800163c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	3a01      	subs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001644:	6818      	ldr	r0, [r3, #0]
}
 8001646:	4770      	bx	lr

08001648 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001648:	b510      	push	{r4, lr}
 800164a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800164c:	f001 fa2a 	bl	8002aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001650:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001652:	f001 fa47 	bl	8002ae4 <vPortExitCritical>

	return xReturn;
}
 8001656:	fab4 f084 	clz	r0, r4
 800165a:	0940      	lsrs	r0, r0, #5
 800165c:	bd10      	pop	{r4, pc}

0800165e <prvCopyDataToQueue>:
{
 800165e:	b570      	push	{r4, r5, r6, lr}
 8001660:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001662:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001664:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8001666:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001668:	b942      	cbnz	r2, 800167c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800166a:	6806      	ldr	r6, [r0, #0]
 800166c:	b99e      	cbnz	r6, 8001696 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800166e:	6880      	ldr	r0, [r0, #8]
 8001670:	f000 ff88 	bl	8002584 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001674:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001676:	3501      	adds	r5, #1
 8001678:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800167a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800167c:	b96e      	cbnz	r6, 800169a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800167e:	6840      	ldr	r0, [r0, #4]
 8001680:	f001 fcd8 	bl	8003034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001684:	6863      	ldr	r3, [r4, #4]
 8001686:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001688:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800168a:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800168c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800168e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001690:	bf24      	itt	cs
 8001692:	6823      	ldrcs	r3, [r4, #0]
 8001694:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001696:	2000      	movs	r0, #0
 8001698:	e7ed      	b.n	8001676 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800169a:	68c0      	ldr	r0, [r0, #12]
 800169c:	f001 fcca 	bl	8003034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80016a0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80016a2:	68e3      	ldr	r3, [r4, #12]
 80016a4:	4251      	negs	r1, r2
 80016a6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016a8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80016aa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016ac:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80016ae:	bf3e      	ittt	cc
 80016b0:	68a3      	ldrcc	r3, [r4, #8]
 80016b2:	185b      	addcc	r3, r3, r1
 80016b4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80016b6:	2e02      	cmp	r6, #2
 80016b8:	d1ed      	bne.n	8001696 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016ba:	b10d      	cbz	r5, 80016c0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80016bc:	3d01      	subs	r5, #1
 80016be:	e7ea      	b.n	8001696 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80016c0:	4628      	mov	r0, r5
 80016c2:	e7d8      	b.n	8001676 <prvCopyDataToQueue+0x18>

080016c4 <prvCopyDataFromQueue>:
{
 80016c4:	4603      	mov	r3, r0
 80016c6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80016ca:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016cc:	b16a      	cbz	r2, 80016ea <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016ce:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016d0:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016d2:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016d4:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80016d6:	bf28      	it	cs
 80016d8:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016da:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80016dc:	bf28      	it	cs
 80016de:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016e0:	68d9      	ldr	r1, [r3, #12]
}
 80016e2:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016e6:	f001 bca5 	b.w	8003034 <memcpy>
}
 80016ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <prvUnlockQueue>:
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80016f4:	f001 f9d6 	bl	8002aa4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80016f8:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016fc:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001700:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001702:	2d00      	cmp	r5, #0
 8001704:	dd01      	ble.n	800170a <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001706:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001708:	b9b3      	cbnz	r3, 8001738 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800170a:	23ff      	movs	r3, #255	@ 0xff
 800170c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001710:	f001 f9e8 	bl	8002ae4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001714:	f001 f9c6 	bl	8002aa4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001718:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800171c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001720:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001722:	2d00      	cmp	r5, #0
 8001724:	dd01      	ble.n	800172a <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	b97b      	cbnz	r3, 800174a <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800172a:	23ff      	movs	r3, #255	@ 0xff
 800172c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8001730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001734:	f001 b9d6 	b.w	8002ae4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001738:	4630      	mov	r0, r6
 800173a:	f000 fe85 	bl	8002448 <xTaskRemoveFromEventList>
 800173e:	b108      	cbz	r0, 8001744 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8001740:	f000 ff0a 	bl	8002558 <vTaskMissedYield>
			--cTxLock;
 8001744:	3d01      	subs	r5, #1
 8001746:	b26d      	sxtb	r5, r5
 8001748:	e7db      	b.n	8001702 <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800174a:	4630      	mov	r0, r6
 800174c:	f000 fe7c 	bl	8002448 <xTaskRemoveFromEventList>
 8001750:	b108      	cbz	r0, 8001756 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8001752:	f000 ff01 	bl	8002558 <vTaskMissedYield>
				--cRxLock;
 8001756:	3d01      	subs	r5, #1
 8001758:	b26d      	sxtb	r5, r5
 800175a:	e7e2      	b.n	8001722 <prvUnlockQueue+0x32>

0800175c <xQueueGenericReset>:
{
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001760:	4604      	mov	r4, r0
 8001762:	b940      	cbnz	r0, 8001776 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	e7fe      	b.n	8001774 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001776:	f001 f995 	bl	8002aa4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800177a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800177e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001780:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001782:	434b      	muls	r3, r1
 8001784:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001786:	1a5b      	subs	r3, r3, r1
 8001788:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800178a:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800178c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800178e:	2000      	movs	r0, #0
 8001790:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001792:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001794:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001798:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800179c:	b9a5      	cbnz	r5, 80017c8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800179e:	6923      	ldr	r3, [r4, #16]
 80017a0:	b173      	cbz	r3, 80017c0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017a2:	f104 0010 	add.w	r0, r4, #16
 80017a6:	f000 fe4f 	bl	8002448 <xTaskRemoveFromEventList>
 80017aa:	b148      	cbz	r0, 80017c0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80017ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80017b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80017c0:	f001 f990 	bl	8002ae4 <vPortExitCritical>
}
 80017c4:	2001      	movs	r0, #1
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017c8:	f104 0010 	add.w	r0, r4, #16
 80017cc:	f7ff fefc 	bl	80015c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017d0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80017d4:	f7ff fef8 	bl	80015c8 <vListInitialise>
 80017d8:	e7f2      	b.n	80017c0 <xQueueGenericReset+0x64>

080017da <xQueueGenericCreateStatic>:
	{
 80017da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017dc:	460d      	mov	r5, r1
 80017de:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80017e0:	b940      	cbnz	r0, 80017f4 <xQueueGenericCreateStatic+0x1a>
 80017e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	e7fe      	b.n	80017f2 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80017f4:	b943      	cbnz	r3, 8001808 <xQueueGenericCreateStatic+0x2e>
 80017f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	e7fe      	b.n	8001806 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001808:	b14a      	cbz	r2, 800181e <xQueueGenericCreateStatic+0x44>
 800180a:	b991      	cbnz	r1, 8001832 <xQueueGenericCreateStatic+0x58>
 800180c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	e7fe      	b.n	800181c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800181e:	b141      	cbz	r1, 8001832 <xQueueGenericCreateStatic+0x58>
 8001820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
 8001830:	e7fe      	b.n	8001830 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001832:	2350      	movs	r3, #80	@ 0x50
 8001834:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	2b50      	cmp	r3, #80	@ 0x50
 800183a:	d008      	beq.n	800184e <xQueueGenericCreateStatic+0x74>
 800183c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001840:	f383 8811 	msr	BASEPRI, r3
 8001844:	f3bf 8f6f 	isb	sy
 8001848:	f3bf 8f4f 	dsb	sy
 800184c:	e7fe      	b.n	800184c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800184e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001850:	2d00      	cmp	r5, #0
 8001852:	bf08      	it	eq
 8001854:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8001856:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800185a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 800185e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001860:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001862:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001864:	f7ff ff7a 	bl	800175c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001868:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800186c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8001870:	4620      	mov	r0, r4
 8001872:	b003      	add	sp, #12
 8001874:	bd30      	pop	{r4, r5, pc}

08001876 <xQueueGenericCreate>:
	{
 8001876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001878:	460d      	mov	r5, r1
 800187a:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800187c:	4606      	mov	r6, r0
 800187e:	b940      	cbnz	r0, 8001892 <xQueueGenericCreate+0x1c>
 8001880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001884:	f383 8811 	msr	BASEPRI, r3
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	e7fe      	b.n	8001890 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001892:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001894:	3050      	adds	r0, #80	@ 0x50
 8001896:	f001 fa6b 	bl	8002d70 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800189a:	4604      	mov	r4, r0
 800189c:	b170      	cbz	r0, 80018bc <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800189e:	2300      	movs	r3, #0
 80018a0:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80018a4:	b165      	cbz	r5, 80018c0 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018a6:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80018aa:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80018ae:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80018b0:	2101      	movs	r1, #1
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff ff52 	bl	800175c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80018b8:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80018bc:	4620      	mov	r0, r4
 80018be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80018c0:	4603      	mov	r3, r0
 80018c2:	e7f2      	b.n	80018aa <xQueueGenericCreate+0x34>

080018c4 <xQueueGenericSend>:
{
 80018c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80018c8:	460f      	mov	r7, r1
 80018ca:	9201      	str	r2, [sp, #4]
 80018cc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80018ce:	4604      	mov	r4, r0
 80018d0:	b940      	cbnz	r0, 80018e4 <xQueueGenericSend+0x20>
 80018d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	e7fe      	b.n	80018e2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018e4:	b951      	cbnz	r1, 80018fc <xQueueGenericSend+0x38>
 80018e6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018e8:	b143      	cbz	r3, 80018fc <xQueueGenericSend+0x38>
 80018ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ee:	f383 8811 	msr	BASEPRI, r3
 80018f2:	f3bf 8f6f 	isb	sy
 80018f6:	f3bf 8f4f 	dsb	sy
 80018fa:	e7fe      	b.n	80018fa <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018fc:	2e02      	cmp	r6, #2
 80018fe:	d10b      	bne.n	8001918 <xQueueGenericSend+0x54>
 8001900:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001902:	2b01      	cmp	r3, #1
 8001904:	d008      	beq.n	8001918 <xQueueGenericSend+0x54>
 8001906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	e7fe      	b.n	8001916 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001918:	f000 fe24 	bl	8002564 <xTaskGetSchedulerState>
 800191c:	4605      	mov	r5, r0
 800191e:	b320      	cbz	r0, 800196a <xQueueGenericSend+0xa6>
 8001920:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8001922:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8001926:	f001 f8bd 	bl	8002aa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800192a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800192c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800192e:	429a      	cmp	r2, r3
 8001930:	d227      	bcs.n	8001982 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001932:	4632      	mov	r2, r6
 8001934:	4639      	mov	r1, r7
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fe91 	bl	800165e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800193c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800193e:	b11b      	cbz	r3, 8001948 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001940:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001944:	f000 fd80 	bl	8002448 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001948:	b148      	cbz	r0, 800195e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800194a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800194e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001952:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800195e:	f001 f8c1 	bl	8002ae4 <vPortExitCritical>
				return pdPASS;
 8001962:	2001      	movs	r0, #1
}
 8001964:	b004      	add	sp, #16
 8001966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0d8      	beq.n	8001922 <xQueueGenericSend+0x5e>
 8001970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001974:	f383 8811 	msr	BASEPRI, r3
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	e7fe      	b.n	8001980 <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001982:	2e02      	cmp	r6, #2
 8001984:	d0d5      	beq.n	8001932 <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001986:	9b01      	ldr	r3, [sp, #4]
 8001988:	b91b      	cbnz	r3, 8001992 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800198a:	f001 f8ab 	bl	8002ae4 <vPortExitCritical>
					return errQUEUE_FULL;
 800198e:	2000      	movs	r0, #0
 8001990:	e7e8      	b.n	8001964 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8001992:	b915      	cbnz	r5, 800199a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001994:	a802      	add	r0, sp, #8
 8001996:	f000 fd97 	bl	80024c8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800199a:	f001 f8a3 	bl	8002ae4 <vPortExitCritical>
		vTaskSuspendAll();
 800199e:	f000 fb9f 	bl	80020e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019a2:	f001 f87f 	bl	8002aa4 <vPortEnterCritical>
 80019a6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80019aa:	2bff      	cmp	r3, #255	@ 0xff
 80019ac:	bf08      	it	eq
 80019ae:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80019b2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019b6:	2bff      	cmp	r3, #255	@ 0xff
 80019b8:	bf08      	it	eq
 80019ba:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80019be:	f001 f891 	bl	8002ae4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019c2:	a901      	add	r1, sp, #4
 80019c4:	a802      	add	r0, sp, #8
 80019c6:	f000 fd8b 	bl	80024e0 <xTaskCheckForTimeOut>
 80019ca:	bb38      	cbnz	r0, 8001a1c <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80019cc:	f001 f86a 	bl	8002aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80019d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80019d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10e      	bne.n	80019f6 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80019d8:	f001 f884 	bl	8002ae4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019dc:	9901      	ldr	r1, [sp, #4]
 80019de:	f104 0010 	add.w	r0, r4, #16
 80019e2:	f000 fcf9 	bl	80023d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff fe82 	bl	80016f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80019ec:	f000 fc1c 	bl	8002228 <xTaskResumeAll>
 80019f0:	b148      	cbz	r0, 8001a06 <xQueueGenericSend+0x142>
 80019f2:	2501      	movs	r5, #1
 80019f4:	e797      	b.n	8001926 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80019f6:	f001 f875 	bl	8002ae4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff fe78 	bl	80016f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a00:	f000 fc12 	bl	8002228 <xTaskResumeAll>
 8001a04:	e7f5      	b.n	80019f2 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8001a06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	e7ea      	b.n	80019f2 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff fe67 	bl	80016f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a22:	f000 fc01 	bl	8002228 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001a26:	e7b2      	b.n	800198e <xQueueGenericSend+0xca>

08001a28 <xQueueGenericSendFromISR>:
{
 8001a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a2c:	4689      	mov	r9, r1
 8001a2e:	4617      	mov	r7, r2
 8001a30:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8001a32:	4604      	mov	r4, r0
 8001a34:	b940      	cbnz	r0, 8001a48 <xQueueGenericSendFromISR+0x20>
 8001a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a3a:	f383 8811 	msr	BASEPRI, r3
 8001a3e:	f3bf 8f6f 	isb	sy
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	e7fe      	b.n	8001a46 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a48:	b951      	cbnz	r1, 8001a60 <xQueueGenericSendFromISR+0x38>
 8001a4a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a4c:	b143      	cbz	r3, 8001a60 <xQueueGenericSendFromISR+0x38>
 8001a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a52:	f383 8811 	msr	BASEPRI, r3
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	f3bf 8f4f 	dsb	sy
 8001a5e:	e7fe      	b.n	8001a5e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a60:	2e02      	cmp	r6, #2
 8001a62:	d10b      	bne.n	8001a7c <xQueueGenericSendFromISR+0x54>
 8001a64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d008      	beq.n	8001a7c <xQueueGenericSendFromISR+0x54>
 8001a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a6e:	f383 8811 	msr	BASEPRI, r3
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	e7fe      	b.n	8001a7a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a7c:	f001 f924 	bl	8002cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a80:	f3ef 8811 	mrs	r8, BASEPRI
 8001a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001a96:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d301      	bcc.n	8001aa0 <xQueueGenericSendFromISR+0x78>
 8001a9c:	2e02      	cmp	r6, #2
 8001a9e:	d11e      	bne.n	8001ade <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001aa0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001aa4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001aa6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	4649      	mov	r1, r9
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff fdd6 	bl	800165e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001ab2:	1c6b      	adds	r3, r5, #1
 8001ab4:	d10e      	bne.n	8001ad4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ab6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ab8:	b13b      	cbz	r3, 8001aca <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001aba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001abe:	f000 fcc3 	bl	8002448 <xTaskRemoveFromEventList>
 8001ac2:	b110      	cbz	r0, 8001aca <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8001ac4:	b10f      	cbz	r7, 8001aca <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8001aca:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001acc:	f388 8811 	msr	BASEPRI, r8
}
 8001ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ad4:	3501      	adds	r5, #1
 8001ad6:	b26d      	sxtb	r5, r5
 8001ad8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8001adc:	e7f5      	b.n	8001aca <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e7f4      	b.n	8001acc <xQueueGenericSendFromISR+0xa4>

08001ae2 <xQueueReceive>:
{
 8001ae2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001ae6:	460e      	mov	r6, r1
 8001ae8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001aea:	4604      	mov	r4, r0
 8001aec:	b940      	cbnz	r0, 8001b00 <xQueueReceive+0x1e>
	__asm volatile
 8001aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	f3bf 8f6f 	isb	sy
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	e7fe      	b.n	8001afe <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b00:	b951      	cbnz	r1, 8001b18 <xQueueReceive+0x36>
 8001b02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b04:	b143      	cbz	r3, 8001b18 <xQueueReceive+0x36>
 8001b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	e7fe      	b.n	8001b16 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b18:	f000 fd24 	bl	8002564 <xTaskGetSchedulerState>
 8001b1c:	4605      	mov	r5, r0
 8001b1e:	b318      	cbz	r0, 8001b68 <xQueueReceive+0x86>
 8001b20:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8001b22:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8001b26:	f000 ffbd 	bl	8002aa4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b2a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b2c:	b347      	cbz	r7, 8001b80 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b2e:	4631      	mov	r1, r6
 8001b30:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b32:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b34:	f7ff fdc6 	bl	80016c4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b38:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b3a:	6923      	ldr	r3, [r4, #16]
 8001b3c:	b173      	cbz	r3, 8001b5c <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b3e:	f104 0010 	add.w	r0, r4, #16
 8001b42:	f000 fc81 	bl	8002448 <xTaskRemoveFromEventList>
 8001b46:	b148      	cbz	r0, 8001b5c <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8001b48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001b5c:	f000 ffc2 	bl	8002ae4 <vPortExitCritical>
				return pdPASS;
 8001b60:	2001      	movs	r0, #1
}
 8001b62:	b004      	add	sp, #16
 8001b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b68:	9b01      	ldr	r3, [sp, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0d9      	beq.n	8001b22 <xQueueReceive+0x40>
 8001b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	e7fe      	b.n	8001b7e <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	b91b      	cbnz	r3, 8001b8c <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8001b84:	f000 ffae 	bl	8002ae4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e7ea      	b.n	8001b62 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8001b8c:	b915      	cbnz	r5, 8001b94 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b8e:	a802      	add	r0, sp, #8
 8001b90:	f000 fc9a 	bl	80024c8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001b94:	f000 ffa6 	bl	8002ae4 <vPortExitCritical>
		vTaskSuspendAll();
 8001b98:	f000 faa2 	bl	80020e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b9c:	f000 ff82 	bl	8002aa4 <vPortEnterCritical>
 8001ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001ba4:	2bff      	cmp	r3, #255	@ 0xff
 8001ba6:	bf08      	it	eq
 8001ba8:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8001bac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001bb0:	2bff      	cmp	r3, #255	@ 0xff
 8001bb2:	bf08      	it	eq
 8001bb4:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8001bb8:	f000 ff94 	bl	8002ae4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bbc:	a901      	add	r1, sp, #4
 8001bbe:	a802      	add	r0, sp, #8
 8001bc0:	f000 fc8e 	bl	80024e0 <xTaskCheckForTimeOut>
 8001bc4:	bb00      	cbnz	r0, 8001c08 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff fd3e 	bl	8001648 <prvIsQueueEmpty>
 8001bcc:	b1b0      	cbz	r0, 8001bfc <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001bce:	9901      	ldr	r1, [sp, #4]
 8001bd0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001bd4:	f000 fc00 	bl	80023d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7ff fd89 	bl	80016f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001bde:	f000 fb23 	bl	8002228 <xTaskResumeAll>
 8001be2:	b948      	cbnz	r0, 8001bf8 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8001be4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	2501      	movs	r5, #1
 8001bfa:	e794      	b.n	8001b26 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff fd77 	bl	80016f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c02:	f000 fb11 	bl	8002228 <xTaskResumeAll>
 8001c06:	e7f7      	b.n	8001bf8 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff fd71 	bl	80016f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c0e:	f000 fb0b 	bl	8002228 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff fd18 	bl	8001648 <prvIsQueueEmpty>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d0ed      	beq.n	8001bf8 <xQueueReceive+0x116>
 8001c1c:	e7b4      	b.n	8001b88 <xQueueReceive+0xa6>
	...

08001c20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c20:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c22:	4a07      	ldr	r2, [pc, #28]	@ (8001c40 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c24:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c26:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8001c2a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8001c2e:	b91d      	cbnz	r5, 8001c38 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001c34:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001c36:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c38:	3301      	adds	r3, #1
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d1f3      	bne.n	8001c26 <vQueueAddToRegistry+0x6>
 8001c3e:	e7fa      	b.n	8001c36 <vQueueAddToRegistry+0x16>
 8001c40:	20000884 	.word	0x20000884

08001c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4604      	mov	r4, r0
 8001c48:	460d      	mov	r5, r1
 8001c4a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001c4c:	f000 ff2a 	bl	8002aa4 <vPortEnterCritical>
 8001c50:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001c54:	2bff      	cmp	r3, #255	@ 0xff
 8001c56:	bf04      	itt	eq
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8001c5e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001c62:	2bff      	cmp	r3, #255	@ 0xff
 8001c64:	bf04      	itt	eq
 8001c66:	2300      	moveq	r3, #0
 8001c68:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8001c6c:	f000 ff3a 	bl	8002ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c72:	b92b      	cbnz	r3, 8001c80 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c74:	4632      	mov	r2, r6
 8001c76:	4629      	mov	r1, r5
 8001c78:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001c7c:	f000 fbc6 	bl	800240c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001c80:	4620      	mov	r0, r4
	}
 8001c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8001c86:	f7ff bd33 	b.w	80016f0 <prvUnlockQueue>
	...

08001c8c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c90:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c92:	f000 ff07 	bl	8002aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c96:	4b30      	ldr	r3, [pc, #192]	@ (8001d58 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8001c98:	4e30      	ldr	r6, [pc, #192]	@ (8001d5c <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4f30      	ldr	r7, [pc, #192]	@ (8001d60 <prvAddNewTaskToReadyList+0xd4>)
 8001c9e:	3201      	adds	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001ca2:	6835      	ldr	r5, [r6, #0]
 8001ca4:	2d00      	cmp	r5, #0
 8001ca6:	d14b      	bne.n	8001d40 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ca8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11f      	bne.n	8001cf0 <prvAddNewTaskToReadyList+0x64>
 8001cb0:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cb2:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cb4:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cb6:	f7ff fc87 	bl	80015c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cba:	2d38      	cmp	r5, #56	@ 0x38
 8001cbc:	f108 0814 	add.w	r8, r8, #20
 8001cc0:	d1f7      	bne.n	8001cb2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001cc2:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8001d88 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8001cc6:	4d27      	ldr	r5, [pc, #156]	@ (8001d64 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8001cc8:	4640      	mov	r0, r8
 8001cca:	f7ff fc7d 	bl	80015c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f7ff fc7a 	bl	80015c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001cd4:	4824      	ldr	r0, [pc, #144]	@ (8001d68 <prvAddNewTaskToReadyList+0xdc>)
 8001cd6:	f7ff fc77 	bl	80015c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001cda:	4824      	ldr	r0, [pc, #144]	@ (8001d6c <prvAddNewTaskToReadyList+0xe0>)
 8001cdc:	f7ff fc74 	bl	80015c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ce0:	4823      	ldr	r0, [pc, #140]	@ (8001d70 <prvAddNewTaskToReadyList+0xe4>)
 8001ce2:	f7ff fc71 	bl	80015c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <prvAddNewTaskToReadyList+0xe8>)
 8001ce8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <prvAddNewTaskToReadyList+0xec>)
 8001cee:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <prvAddNewTaskToReadyList+0xf0>)
 8001cf2:	6813      	ldr	r3, [r2, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001cf8:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001cfa:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d00:	2014      	movs	r0, #20
 8001d02:	428b      	cmp	r3, r1
 8001d04:	fb00 7003 	mla	r0, r0, r3, r7
 8001d08:	f104 0104 	add.w	r1, r4, #4
 8001d0c:	bf88      	it	hi
 8001d0e:	6013      	strhi	r3, [r2, #0]
 8001d10:	f7ff fc68 	bl	80015e4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d14:	f000 fee6 	bl	8002ae4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <prvAddNewTaskToReadyList+0xf8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b173      	cbz	r3, 8001d3c <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d1e:	6833      	ldr	r3, [r6, #0]
 8001d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d209      	bcs.n	8001d3c <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8001d28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	f3bf 8f6f 	isb	sy
}
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <prvAddNewTaskToReadyList+0xf8>)
 8001d42:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d1d2      	bne.n	8001cf0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d4a:	6832      	ldr	r2, [r6, #0]
 8001d4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d4e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001d50:	bf98      	it	ls
 8001d52:	6034      	strls	r4, [r6, #0]
 8001d54:	e7cc      	b.n	8001cf0 <prvAddNewTaskToReadyList+0x64>
 8001d56:	bf00      	nop
 8001d58:	200008e8 	.word	0x200008e8
 8001d5c:	20000dbc 	.word	0x20000dbc
 8001d60:	2000095c 	.word	0x2000095c
 8001d64:	20000934 	.word	0x20000934
 8001d68:	20000918 	.word	0x20000918
 8001d6c:	20000904 	.word	0x20000904
 8001d70:	200008ec 	.word	0x200008ec
 8001d74:	20000930 	.word	0x20000930
 8001d78:	2000092c 	.word	0x2000092c
 8001d7c:	200008cc 	.word	0x200008cc
 8001d80:	200008e0 	.word	0x200008e0
 8001d84:	200008dc 	.word	0x200008dc
 8001d88:	20000948 	.word	0x20000948

08001d8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d90:	4d15      	ldr	r5, [pc, #84]	@ (8001de8 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8001d92:	681c      	ldr	r4, [r3, #0]
{
 8001d94:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d96:	6828      	ldr	r0, [r5, #0]
 8001d98:	3004      	adds	r0, #4
{
 8001d9a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d9c:	f7ff fc44 	bl	8001628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001da0:	1c73      	adds	r3, r6, #1
 8001da2:	d107      	bne.n	8001db4 <prvAddCurrentTaskToDelayedList+0x28>
 8001da4:	b137      	cbz	r7, 8001db4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001da6:	6829      	ldr	r1, [r5, #0]
 8001da8:	4810      	ldr	r0, [pc, #64]	@ (8001dec <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dae:	3104      	adds	r1, #4
 8001db0:	f7ff bc18 	b.w	80015e4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	19a4      	adds	r4, r4, r6
 8001db8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001dba:	d307      	bcc.n	8001dcc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <prvAddCurrentTaskToDelayedList+0x64>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	6829      	ldr	r1, [r5, #0]
}
 8001dc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc6:	3104      	adds	r1, #4
 8001dc8:	f7ff bc17 	b.w	80015fa <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <prvAddCurrentTaskToDelayedList+0x68>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	6829      	ldr	r1, [r5, #0]
 8001dd2:	3104      	adds	r1, #4
 8001dd4:	f7ff fc11 	bl	80015fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001dd8:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8001dde:	bf88      	it	hi
 8001de0:	601c      	strhi	r4, [r3, #0]
}
 8001de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de4:	200008e4 	.word	0x200008e4
 8001de8:	20000dbc 	.word	0x20000dbc
 8001dec:	200008ec 	.word	0x200008ec
 8001df0:	2000092c 	.word	0x2000092c
 8001df4:	20000930 	.word	0x20000930
 8001df8:	200008c8 	.word	0x200008c8

08001dfc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dfc:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <prvResetNextTaskUnblockTime+0x1c>)
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <prvResetNextTaskUnblockTime+0x20>)
 8001e04:	b919      	cbnz	r1, 8001e0e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e06:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e12:	68d2      	ldr	r2, [r2, #12]
 8001e14:	6852      	ldr	r2, [r2, #4]
 8001e16:	e7f8      	b.n	8001e0a <prvResetNextTaskUnblockTime+0xe>
 8001e18:	20000930 	.word	0x20000930
 8001e1c:	200008c8 	.word	0x200008c8

08001e20 <prvDeleteTCB>:
	{
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001e24:	3054      	adds	r0, #84	@ 0x54
 8001e26:	f001 f881 	bl	8002f2c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e2a:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8001e2e:	b93b      	cbnz	r3, 8001e40 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8001e30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001e32:	f001 f835 	bl	8002ea0 <vPortFree>
				vPortFree( pxTCB );
 8001e36:	4620      	mov	r0, r4
	}
 8001e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001e3c:	f001 b830 	b.w	8002ea0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d0f8      	beq.n	8001e36 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d008      	beq.n	8001e5a <prvDeleteTCB+0x3a>
 8001e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	e7fe      	b.n	8001e58 <prvDeleteTCB+0x38>
	}
 8001e5a:	bd10      	pop	{r4, pc}

08001e5c <prvIdleTask>:
{
 8001e5c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e5e:	4c13      	ldr	r4, [pc, #76]	@ (8001eac <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e60:	4f13      	ldr	r7, [pc, #76]	@ (8001eb0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001e62:	4d14      	ldr	r5, [pc, #80]	@ (8001eb4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	b973      	cbnz	r3, 8001e86 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <prvIdleTask+0x5c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d9f8      	bls.n	8001e62 <prvIdleTask+0x6>
				taskYIELD();
 8001e70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	f3bf 8f6f 	isb	sy
 8001e84:	e7ed      	b.n	8001e62 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8001e86:	f000 fe0d 	bl	8002aa4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e8e:	1d30      	adds	r0, r6, #4
 8001e90:	f7ff fbca 	bl	8001628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001ea0:	f000 fe20 	bl	8002ae4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f7ff ffbb 	bl	8001e20 <prvDeleteTCB>
 8001eaa:	e7db      	b.n	8001e64 <prvIdleTask+0x8>
 8001eac:	20000900 	.word	0x20000900
 8001eb0:	20000904 	.word	0x20000904
 8001eb4:	200008e8 	.word	0x200008e8
 8001eb8:	2000095c 	.word	0x2000095c

08001ebc <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec0:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ec4:	0096      	lsls	r6, r2, #2
 8001ec6:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001ec8:	4607      	mov	r7, r0
 8001eca:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ecc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001ece:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001ed0:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ed2:	f001 f823 	bl	8002f1c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ed6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001ed8:	3e04      	subs	r6, #4
 8001eda:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001edc:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8001ee0:	2d00      	cmp	r5, #0
 8001ee2:	d041      	beq.n	8001f68 <prvInitialiseNewTask.constprop.0+0xac>
 8001ee4:	1e6b      	subs	r3, r5, #1
 8001ee6:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8001eea:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001eec:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001ef0:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8001ef4:	b109      	cbz	r1, 8001efa <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ef6:	42ab      	cmp	r3, r5
 8001ef8:	d1f8      	bne.n	8001eec <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001efa:	2300      	movs	r3, #0
 8001efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f00:	9d08      	ldr	r5, [sp, #32]
 8001f02:	2d37      	cmp	r5, #55	@ 0x37
 8001f04:	bf28      	it	cs
 8001f06:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8001f08:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8001f0c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001f0e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f10:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8001f12:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f16:	f7ff fb62 	bl	80015de <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f1a:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f1e:	f104 0018 	add.w	r0, r4, #24
 8001f22:	f7ff fb5c 	bl	80015de <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001f26:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001f2a:	224c      	movs	r2, #76	@ 0x4c
 8001f2c:	4651      	mov	r1, sl
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f2e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f30:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f32:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f34:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001f38:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8001f3c:	f000 ffee 	bl	8002f1c <memset>
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <prvInitialiseNewTask.constprop.0+0xb4>)
 8001f42:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001f44:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f48:	33d0      	adds	r3, #208	@ 0xd0
 8001f4a:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8001f4c:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f4e:	4642      	mov	r2, r8
 8001f50:	4639      	mov	r1, r7
 8001f52:	4630      	mov	r0, r6
 8001f54:	f000 fd7e 	bl	8002a54 <pxPortInitialiseStack>
 8001f58:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001f5a:	f1b9 0f00 	cmp.w	r9, #0
 8001f5e:	d001      	beq.n	8001f64 <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f60:	f8c9 4000 	str.w	r4, [r9]
}
 8001f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f68:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8001f6c:	e7c8      	b.n	8001f00 <prvInitialiseNewTask.constprop.0+0x44>
 8001f6e:	bf00      	nop
 8001f70:	20004b14 	.word	0x20004b14

08001f74 <xTaskCreateStatic>:
	{
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001f7c:	b945      	cbnz	r5, 8001f90 <xTaskCreateStatic+0x1c>
 8001f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	f3bf 8f6f 	isb	sy
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	e7fe      	b.n	8001f8e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001f90:	b944      	cbnz	r4, 8001fa4 <xTaskCreateStatic+0x30>
 8001f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f96:	f383 8811 	msr	BASEPRI, r3
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	e7fe      	b.n	8001fa2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fa4:	26a8      	movs	r6, #168	@ 0xa8
 8001fa6:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fa8:	9e05      	ldr	r6, [sp, #20]
 8001faa:	2ea8      	cmp	r6, #168	@ 0xa8
 8001fac:	d008      	beq.n	8001fc0 <xTaskCreateStatic+0x4c>
 8001fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 8001fb6:	f3bf 8f6f 	isb	sy
 8001fba:	f3bf 8f4f 	dsb	sy
 8001fbe:	e7fe      	b.n	8001fbe <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001fc0:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001fc2:	2502      	movs	r5, #2
 8001fc4:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001fc8:	ad04      	add	r5, sp, #16
 8001fca:	9501      	str	r5, [sp, #4]
 8001fcc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8001fce:	9402      	str	r4, [sp, #8]
 8001fd0:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001fd2:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001fd4:	f7ff ff72 	bl	8001ebc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fe57 	bl	8001c8c <prvAddNewTaskToReadyList>
	}
 8001fde:	9804      	ldr	r0, [sp, #16]
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}

08001fe4 <xTaskCreate>:
	{
 8001fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe8:	4607      	mov	r7, r0
 8001fea:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001fec:	0090      	lsls	r0, r2, #2
	{
 8001fee:	4688      	mov	r8, r1
 8001ff0:	4616      	mov	r6, r2
 8001ff2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ff4:	f000 febc 	bl	8002d70 <pvPortMalloc>
			if( pxStack != NULL )
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	b920      	cbnz	r0, 8002006 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8002000:	b005      	add	sp, #20
 8002002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002006:	20a8      	movs	r0, #168	@ 0xa8
 8002008:	f000 feb2 	bl	8002d70 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800200c:	4604      	mov	r4, r0
 800200e:	b198      	cbz	r0, 8002038 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002010:	2300      	movs	r3, #0
 8002012:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8002018:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800201e:	9002      	str	r0, [sp, #8]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4632      	mov	r2, r6
 8002024:	464b      	mov	r3, r9
 8002026:	4641      	mov	r1, r8
 8002028:	4638      	mov	r0, r7
 800202a:	f7ff ff47 	bl	8001ebc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fe2c 	bl	8001c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002034:	2001      	movs	r0, #1
 8002036:	e7e3      	b.n	8002000 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8002038:	4628      	mov	r0, r5
 800203a:	f000 ff31 	bl	8002ea0 <vPortFree>
		if( pxNewTCB != NULL )
 800203e:	e7dd      	b.n	8001ffc <xTaskCreate+0x18>

08002040 <vTaskStartScheduler>:
{
 8002040:	b510      	push	{r4, lr}
 8002042:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002044:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002046:	aa07      	add	r2, sp, #28
 8002048:	a906      	add	r1, sp, #24
 800204a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800204c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002050:	f7ff faa2 	bl	8001598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002054:	9b05      	ldr	r3, [sp, #20]
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	9b06      	ldr	r3, [sp, #24]
 800205a:	9a07      	ldr	r2, [sp, #28]
 800205c:	4919      	ldr	r1, [pc, #100]	@ (80020c4 <vTaskStartScheduler+0x84>)
 800205e:	481a      	ldr	r0, [pc, #104]	@ (80020c8 <vTaskStartScheduler+0x88>)
 8002060:	e9cd 4300 	strd	r4, r3, [sp]
 8002064:	4623      	mov	r3, r4
 8002066:	f7ff ff85 	bl	8001f74 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800206a:	b340      	cbz	r0, 80020be <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800206c:	f000 fb1e 	bl	80026ac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002070:	2801      	cmp	r0, #1
 8002072:	d119      	bne.n	80020a8 <vTaskStartScheduler+0x68>
 8002074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <vTaskStartScheduler+0x8c>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <vTaskStartScheduler+0x90>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3354      	adds	r3, #84	@ 0x54
 800208c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <vTaskStartScheduler+0x94>)
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <vTaskStartScheduler+0x98>)
 8002098:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <vTaskStartScheduler+0x9c>)
 800209c:	601c      	str	r4, [r3, #0]
}
 800209e:	b008      	add	sp, #32
 80020a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80020a4:	f000 bd8e 	b.w	8002bc4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80020a8:	3001      	adds	r0, #1
 80020aa:	d108      	bne.n	80020be <vTaskStartScheduler+0x7e>
 80020ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	e7fe      	b.n	80020bc <vTaskStartScheduler+0x7c>
}
 80020be:	b008      	add	sp, #32
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	bf00      	nop
 80020c4:	08003120 	.word	0x08003120
 80020c8:	08001e5d 	.word	0x08001e5d
 80020cc:	20000dbc 	.word	0x20000dbc
 80020d0:	20000010 	.word	0x20000010
 80020d4:	200008c8 	.word	0x200008c8
 80020d8:	200008dc 	.word	0x200008dc
 80020dc:	200008e4 	.word	0x200008e4

080020e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80020e0:	4a02      	ldr	r2, [pc, #8]	@ (80020ec <vTaskSuspendAll+0xc>)
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200008c4 	.word	0x200008c4

080020f0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80020f0:	4b01      	ldr	r3, [pc, #4]	@ (80020f8 <xTaskGetTickCount+0x8>)
 80020f2:	6818      	ldr	r0, [r3, #0]
}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	200008e4 	.word	0x200008e4

080020fc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020fc:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <xTaskIncrementTick+0x100>)
 80020fe:	681b      	ldr	r3, [r3, #0]
{
 8002100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002104:	2b00      	cmp	r3, #0
 8002106:	d172      	bne.n	80021ee <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002108:	4b3d      	ldr	r3, [pc, #244]	@ (8002200 <xTaskIncrementTick+0x104>)
 800210a:	681c      	ldr	r4, [r3, #0]
 800210c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800210e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002110:	b9bc      	cbnz	r4, 8002142 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002112:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <xTaskIncrementTick+0x108>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	b142      	cbz	r2, 800212c <xTaskIncrementTick+0x30>
 800211a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	e7fe      	b.n	800212a <xTaskIncrementTick+0x2e>
 800212c:	4a36      	ldr	r2, [pc, #216]	@ (8002208 <xTaskIncrementTick+0x10c>)
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	6810      	ldr	r0, [r2, #0]
 8002132:	6018      	str	r0, [r3, #0]
 8002134:	6011      	str	r1, [r2, #0]
 8002136:	4a35      	ldr	r2, [pc, #212]	@ (800220c <xTaskIncrementTick+0x110>)
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	f7ff fe5d 	bl	8001dfc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002142:	4d33      	ldr	r5, [pc, #204]	@ (8002210 <xTaskIncrementTick+0x114>)
 8002144:	4e33      	ldr	r6, [pc, #204]	@ (8002214 <xTaskIncrementTick+0x118>)
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	4f33      	ldr	r7, [pc, #204]	@ (8002218 <xTaskIncrementTick+0x11c>)
 800214a:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 800214c:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002150:	d212      	bcs.n	8002178 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002156:	2114      	movs	r1, #20
 8002158:	434a      	muls	r2, r1
 800215a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800215c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800215e:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <xTaskIncrementTick+0x120>)
 8002160:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8002162:	bf28      	it	cs
 8002164:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8002168:	2a00      	cmp	r2, #0
 800216a:	bf18      	it	ne
 800216c:	f04f 0b01 	movne.w	fp, #1
}
 8002170:	4658      	mov	r0, fp
 8002172:	b003      	add	sp, #12
 8002174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002178:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8002204 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800217c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8002224 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002180:	f8d9 2000 	ldr.w	r2, [r9]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	b91a      	cbnz	r2, 8002190 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	602a      	str	r2, [r5, #0]
					break;
 800218e:	e7e0      	b.n	8002152 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002190:	f8d9 2000 	ldr.w	r2, [r9]
 8002194:	68d2      	ldr	r2, [r2, #12]
 8002196:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800219a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800219e:	428c      	cmp	r4, r1
 80021a0:	d201      	bcs.n	80021a6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80021a2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80021a4:	e7d5      	b.n	8002152 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021a6:	f108 0304 	add.w	r3, r8, #4
 80021aa:	4618      	mov	r0, r3
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	f7ff fa3b 	bl	8001628 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021b2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80021b6:	b119      	cbz	r1, 80021c0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021b8:	f108 0018 	add.w	r0, r8, #24
 80021bc:	f7ff fa34 	bl	8001628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021c0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80021c4:	f8da 1000 	ldr.w	r1, [sl]
 80021c8:	2314      	movs	r3, #20
 80021ca:	4288      	cmp	r0, r1
 80021cc:	bf88      	it	hi
 80021ce:	f8ca 0000 	strhi.w	r0, [sl]
 80021d2:	9901      	ldr	r1, [sp, #4]
 80021d4:	fb03 6000 	mla	r0, r3, r0, r6
 80021d8:	f7ff fa04 	bl	80015e4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80021e2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80021e4:	4291      	cmp	r1, r2
 80021e6:	bf28      	it	cs
 80021e8:	f04f 0b01 	movcs.w	fp, #1
 80021ec:	e7c8      	b.n	8002180 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 80021ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002220 <xTaskIncrementTick+0x124>)
 80021f0:	6813      	ldr	r3, [r2, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80021f6:	f04f 0b00 	mov.w	fp, #0
 80021fa:	e7b9      	b.n	8002170 <xTaskIncrementTick+0x74>
 80021fc:	200008c4 	.word	0x200008c4
 8002200:	200008e4 	.word	0x200008e4
 8002204:	20000930 	.word	0x20000930
 8002208:	2000092c 	.word	0x2000092c
 800220c:	200008d0 	.word	0x200008d0
 8002210:	200008c8 	.word	0x200008c8
 8002214:	2000095c 	.word	0x2000095c
 8002218:	20000dbc 	.word	0x20000dbc
 800221c:	200008d4 	.word	0x200008d4
 8002220:	200008d8 	.word	0x200008d8
 8002224:	200008e0 	.word	0x200008e0

08002228 <xTaskResumeAll>:
{
 8002228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800222c:	4c30      	ldr	r4, [pc, #192]	@ (80022f0 <xTaskResumeAll+0xc8>)
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	b943      	cbnz	r3, 8002244 <xTaskResumeAll+0x1c>
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	e7fe      	b.n	8002242 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002244:	f000 fc2e 	bl	8002aa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800224e:	6824      	ldr	r4, [r4, #0]
 8002250:	b12c      	cbz	r4, 800225e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002252:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002254:	f000 fc46 	bl	8002ae4 <vPortExitCritical>
}
 8002258:	4620      	mov	r0, r4
 800225a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800225e:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <xTaskResumeAll+0xcc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f5      	beq.n	8002252 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002266:	4d24      	ldr	r5, [pc, #144]	@ (80022f8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002268:	4e24      	ldr	r6, [pc, #144]	@ (80022fc <xTaskResumeAll+0xd4>)
 800226a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800230c <xTaskResumeAll+0xe4>
 800226e:	e01d      	b.n	80022ac <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002270:	68eb      	ldr	r3, [r5, #12]
 8002272:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002274:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002276:	f104 0018 	add.w	r0, r4, #24
 800227a:	f7ff f9d5 	bl	8001628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800227e:	4638      	mov	r0, r7
 8002280:	f7ff f9d2 	bl	8001628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002284:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002286:	6832      	ldr	r2, [r6, #0]
 8002288:	2014      	movs	r0, #20
 800228a:	4293      	cmp	r3, r2
 800228c:	fb00 8003 	mla	r0, r0, r3, r8
 8002290:	4639      	mov	r1, r7
 8002292:	bf88      	it	hi
 8002294:	6033      	strhi	r3, [r6, #0]
 8002296:	f7ff f9a5 	bl	80015e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800229a:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <xTaskResumeAll+0xd8>)
 800229c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d302      	bcc.n	80022ac <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <xTaskResumeAll+0xdc>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1de      	bne.n	8002270 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80022b2:	b10c      	cbz	r4, 80022b8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80022b4:	f7ff fda2 	bl	8001dfc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80022b8:	4d13      	ldr	r5, [pc, #76]	@ (8002308 <xTaskResumeAll+0xe0>)
 80022ba:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80022bc:	b144      	cbz	r4, 80022d0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80022be:	4e11      	ldr	r6, [pc, #68]	@ (8002304 <xTaskResumeAll+0xdc>)
 80022c0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80022c2:	f7ff ff1b 	bl	80020fc <xTaskIncrementTick>
 80022c6:	b100      	cbz	r0, 80022ca <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80022c8:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80022ca:	3c01      	subs	r4, #1
 80022cc:	d1f9      	bne.n	80022c2 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 80022ce:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <xTaskResumeAll+0xdc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0bc      	beq.n	8002252 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80022d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80022dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80022ec:	2401      	movs	r4, #1
 80022ee:	e7b1      	b.n	8002254 <xTaskResumeAll+0x2c>
 80022f0:	200008c4 	.word	0x200008c4
 80022f4:	200008e8 	.word	0x200008e8
 80022f8:	20000918 	.word	0x20000918
 80022fc:	200008e0 	.word	0x200008e0
 8002300:	20000dbc 	.word	0x20000dbc
 8002304:	200008d4 	.word	0x200008d4
 8002308:	200008d8 	.word	0x200008d8
 800230c:	2000095c 	.word	0x2000095c

08002310 <vTaskDelay>:
	{
 8002310:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002312:	b950      	cbnz	r0, 800232a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002314:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800231c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	f3bf 8f6f 	isb	sy
	}
 8002328:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <vTaskDelay+0x44>)
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	b141      	cbz	r1, 8002342 <vTaskDelay+0x32>
 8002330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	e7fe      	b.n	8002340 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8002342:	f7ff fecd 	bl	80020e0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002346:	f7ff fd21 	bl	8001d8c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800234a:	f7ff ff6d 	bl	8002228 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800234e:	2800      	cmp	r0, #0
 8002350:	d0e0      	beq.n	8002314 <vTaskDelay+0x4>
 8002352:	e7e9      	b.n	8002328 <vTaskDelay+0x18>
 8002354:	200008c4 	.word	0x200008c4

08002358 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <vTaskSwitchContext+0x68>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <vTaskSwitchContext+0x6c>)
{
 800235e:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002360:	b112      	cbz	r2, 8002368 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002368:	4d17      	ldr	r5, [pc, #92]	@ (80023c8 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 800236a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800236c:	682a      	ldr	r2, [r5, #0]
 800236e:	4917      	ldr	r1, [pc, #92]	@ (80023cc <vTaskSwitchContext+0x74>)
 8002370:	2614      	movs	r6, #20
 8002372:	fb06 f302 	mul.w	r3, r6, r2
 8002376:	18c8      	adds	r0, r1, r3
 8002378:	58cc      	ldr	r4, [r1, r3]
 800237a:	b1ac      	cbz	r4, 80023a8 <vTaskSwitchContext+0x50>
 800237c:	6844      	ldr	r4, [r0, #4]
 800237e:	3308      	adds	r3, #8
 8002380:	6864      	ldr	r4, [r4, #4]
 8002382:	6044      	str	r4, [r0, #4]
 8002384:	440b      	add	r3, r1
 8002386:	429c      	cmp	r4, r3
 8002388:	bf04      	itt	eq
 800238a:	6863      	ldreq	r3, [r4, #4]
 800238c:	6043      	streq	r3, [r0, #4]
 800238e:	2314      	movs	r3, #20
 8002390:	fb03 1102 	mla	r1, r3, r2, r1
 8002394:	684b      	ldr	r3, [r1, #4]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <vTaskSwitchContext+0x78>)
 800239a:	6019      	str	r1, [r3, #0]
 800239c:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0c      	ldr	r2, [pc, #48]	@ (80023d4 <vTaskSwitchContext+0x7c>)
 80023a2:	3354      	adds	r3, #84	@ 0x54
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	e7de      	b.n	8002366 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023a8:	b942      	cbnz	r2, 80023bc <vTaskSwitchContext+0x64>
 80023aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	e7fe      	b.n	80023ba <vTaskSwitchContext+0x62>
 80023bc:	3a01      	subs	r2, #1
 80023be:	e7d8      	b.n	8002372 <vTaskSwitchContext+0x1a>
 80023c0:	200008c4 	.word	0x200008c4
 80023c4:	200008d4 	.word	0x200008d4
 80023c8:	200008e0 	.word	0x200008e0
 80023cc:	2000095c 	.word	0x2000095c
 80023d0:	20000dbc 	.word	0x20000dbc
 80023d4:	20000010 	.word	0x20000010

080023d8 <vTaskPlaceOnEventList>:
{
 80023d8:	b510      	push	{r4, lr}
 80023da:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80023dc:	b940      	cbnz	r0, 80023f0 <vTaskPlaceOnEventList+0x18>
 80023de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	e7fe      	b.n	80023ee <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <vTaskPlaceOnEventList+0x30>)
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	3118      	adds	r1, #24
 80023f6:	f7ff f900 	bl	80015fa <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023fa:	4620      	mov	r0, r4
 80023fc:	2101      	movs	r1, #1
}
 80023fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002402:	f7ff bcc3 	b.w	8001d8c <prvAddCurrentTaskToDelayedList>
 8002406:	bf00      	nop
 8002408:	20000dbc 	.word	0x20000dbc

0800240c <vTaskPlaceOnEventListRestricted>:
	{
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	460d      	mov	r5, r1
 8002410:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002412:	b940      	cbnz	r0, 8002426 <vTaskPlaceOnEventListRestricted+0x1a>
 8002414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	e7fe      	b.n	8002424 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <vTaskPlaceOnEventListRestricted+0x38>)
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	3118      	adds	r1, #24
 800242c:	f7ff f8da 	bl	80015e4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002430:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002432:	4621      	mov	r1, r4
 8002434:	bf0c      	ite	eq
 8002436:	4628      	moveq	r0, r5
 8002438:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800243c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002440:	f7ff bca4 	b.w	8001d8c <prvAddCurrentTaskToDelayedList>
 8002444:	20000dbc 	.word	0x20000dbc

08002448 <xTaskRemoveFromEventList>:
{
 8002448:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800244a:	68c3      	ldr	r3, [r0, #12]
 800244c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800244e:	b944      	cbnz	r4, 8002462 <xTaskRemoveFromEventList+0x1a>
 8002450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	e7fe      	b.n	8002460 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002462:	f104 0518 	add.w	r5, r4, #24
 8002466:	4628      	mov	r0, r5
 8002468:	f7ff f8de 	bl	8001628 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246c:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <xTaskRemoveFromEventList+0x68>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b9db      	cbnz	r3, 80024aa <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002472:	1d25      	adds	r5, r4, #4
 8002474:	4628      	mov	r0, r5
 8002476:	f7ff f8d7 	bl	8001628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800247a:	4a0e      	ldr	r2, [pc, #56]	@ (80024b4 <xTaskRemoveFromEventList+0x6c>)
 800247c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800247e:	6811      	ldr	r1, [r2, #0]
 8002480:	428b      	cmp	r3, r1
 8002482:	bf88      	it	hi
 8002484:	6013      	strhi	r3, [r2, #0]
 8002486:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <xTaskRemoveFromEventList+0x70>)
 8002488:	2014      	movs	r0, #20
 800248a:	4629      	mov	r1, r5
 800248c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002490:	f7ff f8a8 	bl	80015e4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <xTaskRemoveFromEventList+0x74>)
 8002496:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800249e:	bf83      	ittte	hi
 80024a0:	4b07      	ldrhi	r3, [pc, #28]	@ (80024c0 <xTaskRemoveFromEventList+0x78>)
 80024a2:	2001      	movhi	r0, #1
 80024a4:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80024a6:	2000      	movls	r0, #0
}
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <xTaskRemoveFromEventList+0x7c>)
 80024ac:	4629      	mov	r1, r5
 80024ae:	e7ef      	b.n	8002490 <xTaskRemoveFromEventList+0x48>
 80024b0:	200008c4 	.word	0x200008c4
 80024b4:	200008e0 	.word	0x200008e0
 80024b8:	2000095c 	.word	0x2000095c
 80024bc:	20000dbc 	.word	0x20000dbc
 80024c0:	200008d4 	.word	0x200008d4
 80024c4:	20000918 	.word	0x20000918

080024c8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <vTaskInternalSetTimeOutState+0x10>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024ce:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <vTaskInternalSetTimeOutState+0x14>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6043      	str	r3, [r0, #4]
}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200008d0 	.word	0x200008d0
 80024dc:	200008e4 	.word	0x200008e4

080024e0 <xTaskCheckForTimeOut>:
{
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80024e4:	4605      	mov	r5, r0
 80024e6:	b940      	cbnz	r0, 80024fa <xTaskCheckForTimeOut+0x1a>
 80024e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	e7fe      	b.n	80024f8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80024fa:	b941      	cbnz	r1, 800250e <xTaskCheckForTimeOut+0x2e>
 80024fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	e7fe      	b.n	800250c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800250e:	f000 fac9 	bl	8002aa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <xTaskCheckForTimeOut+0x70>)
 8002514:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	d010      	beq.n	800253e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800251c:	480d      	ldr	r0, [pc, #52]	@ (8002554 <xTaskCheckForTimeOut+0x74>)
 800251e:	682e      	ldr	r6, [r5, #0]
 8002520:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002522:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002524:	4286      	cmp	r6, r0
 8002526:	d001      	beq.n	800252c <xTaskCheckForTimeOut+0x4c>
 8002528:	428a      	cmp	r2, r1
 800252a:	d90f      	bls.n	800254c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800252c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800252e:	4283      	cmp	r3, r0
 8002530:	d90a      	bls.n	8002548 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8002532:	1a5b      	subs	r3, r3, r1
 8002534:	4413      	add	r3, r2
 8002536:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002538:	4628      	mov	r0, r5
 800253a:	f7ff ffc5 	bl	80024c8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800253e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002540:	f000 fad0 	bl	8002ae4 <vPortExitCritical>
}
 8002544:	4620      	mov	r0, r4
 8002546:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800254c:	2401      	movs	r4, #1
 800254e:	e7f7      	b.n	8002540 <xTaskCheckForTimeOut+0x60>
 8002550:	200008e4 	.word	0x200008e4
 8002554:	200008d0 	.word	0x200008d0

08002558 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002558:	4b01      	ldr	r3, [pc, #4]	@ (8002560 <vTaskMissedYield+0x8>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	4770      	bx	lr
 8002560:	200008d4 	.word	0x200008d4

08002564 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <xTaskGetSchedulerState+0x18>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b133      	cbz	r3, 8002578 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <xTaskGetSchedulerState+0x1c>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	fab0 f080 	clz	r0, r0
 8002572:	0940      	lsrs	r0, r0, #5
 8002574:	0040      	lsls	r0, r0, #1
 8002576:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002578:	2001      	movs	r0, #1
	}
 800257a:	4770      	bx	lr
 800257c:	200008dc 	.word	0x200008dc
 8002580:	200008c4 	.word	0x200008c4

08002584 <xTaskPriorityDisinherit>:
	{
 8002584:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8002586:	b908      	cbnz	r0, 800258c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8002588:	2000      	movs	r0, #0
	}
 800258a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <xTaskPriorityDisinherit+0x78>)
 800258e:	681c      	ldr	r4, [r3, #0]
 8002590:	4284      	cmp	r4, r0
 8002592:	d008      	beq.n	80025a6 <xTaskPriorityDisinherit+0x22>
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	e7fe      	b.n	80025a4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80025a6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80025a8:	b943      	cbnz	r3, 80025bc <xTaskPriorityDisinherit+0x38>
 80025aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	e7fe      	b.n	80025ba <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80025be:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80025c0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025c2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80025c4:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025c6:	d0df      	beq.n	8002588 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1dd      	bne.n	8002588 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025cc:	1d25      	adds	r5, r4, #4
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7ff f82a 	bl	8001628 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80025d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80025dc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80025de:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <xTaskPriorityDisinherit+0x7c>)
 80025e0:	6811      	ldr	r1, [r2, #0]
 80025e2:	428b      	cmp	r3, r1
 80025e4:	bf88      	it	hi
 80025e6:	6013      	strhi	r3, [r2, #0]
 80025e8:	4a06      	ldr	r2, [pc, #24]	@ (8002604 <xTaskPriorityDisinherit+0x80>)
 80025ea:	2014      	movs	r0, #20
 80025ec:	fb00 2003 	mla	r0, r0, r3, r2
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fe fff7 	bl	80015e4 <vListInsertEnd>
					xReturn = pdTRUE;
 80025f6:	2001      	movs	r0, #1
		return xReturn;
 80025f8:	e7c7      	b.n	800258a <xTaskPriorityDisinherit+0x6>
 80025fa:	bf00      	nop
 80025fc:	20000dbc 	.word	0x20000dbc
 8002600:	200008e0 	.word	0x200008e0
 8002604:	2000095c 	.word	0x2000095c

08002608 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002608:	4291      	cmp	r1, r2
{
 800260a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800260c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800260e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002610:	d80a      	bhi.n	8002628 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002612:	1ad2      	subs	r2, r2, r3
 8002614:	6983      	ldr	r3, [r0, #24]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20d      	bcs.n	8002636 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <prvInsertTimerInActiveList+0x34>)
 800261c:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f7fe ffeb 	bl	80015fa <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002624:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8002626:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002628:	429a      	cmp	r2, r3
 800262a:	d201      	bcs.n	8002630 <prvInsertTimerInActiveList+0x28>
 800262c:	4299      	cmp	r1, r3
 800262e:	d202      	bcs.n	8002636 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <prvInsertTimerInActiveList+0x38>)
 8002632:	1d01      	adds	r1, r0, #4
 8002634:	e7f3      	b.n	800261e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002636:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002638:	e7f5      	b.n	8002626 <prvInsertTimerInActiveList+0x1e>
 800263a:	bf00      	nop
 800263c:	20000ebc 	.word	0x20000ebc
 8002640:	20000ec0 	.word	0x20000ec0

08002644 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002646:	4c11      	ldr	r4, [pc, #68]	@ (800268c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8002648:	f000 fa2c 	bl	8002aa4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800264c:	6825      	ldr	r5, [r4, #0]
 800264e:	b9bd      	cbnz	r5, 8002680 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002650:	4f0f      	ldr	r7, [pc, #60]	@ (8002690 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8002652:	4e10      	ldr	r6, [pc, #64]	@ (8002694 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8002654:	4638      	mov	r0, r7
 8002656:	f7fe ffb7 	bl	80015c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800265a:	4630      	mov	r0, r6
 800265c:	f7fe ffb4 	bl	80015c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002662:	4a0e      	ldr	r2, [pc, #56]	@ (800269c <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8002664:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002668:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 800266a:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800266c:	200a      	movs	r0, #10
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <prvCheckForValidListAndQueue+0x60>)
 8002670:	9500      	str	r5, [sp, #0]
 8002672:	f7ff f8b2 	bl	80017da <xQueueGenericCreateStatic>
 8002676:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002678:	b110      	cbz	r0, 8002680 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800267a:	490b      	ldr	r1, [pc, #44]	@ (80026a8 <prvCheckForValidListAndQueue+0x64>)
 800267c:	f7ff fad0 	bl	8001c20 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002680:	b003      	add	sp, #12
 8002682:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002686:	f000 ba2d 	b.w	8002ae4 <vPortExitCritical>
 800268a:	bf00      	nop
 800268c:	20000eb8 	.word	0x20000eb8
 8002690:	20000ed8 	.word	0x20000ed8
 8002694:	20000ec4 	.word	0x20000ec4
 8002698:	20000ec0 	.word	0x20000ec0
 800269c:	20000e10 	.word	0x20000e10
 80026a0:	20000ebc 	.word	0x20000ebc
 80026a4:	20000dc0 	.word	0x20000dc0
 80026a8:	08003125 	.word	0x08003125

080026ac <xTimerCreateTimerTask>:
{
 80026ac:	b510      	push	{r4, lr}
 80026ae:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80026b0:	f7ff ffc8 	bl	8002644 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <xTimerCreateTimerTask+0x54>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b1b3      	cbz	r3, 80026e8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80026ba:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80026bc:	aa07      	add	r2, sp, #28
 80026be:	a906      	add	r1, sp, #24
 80026c0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80026c2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80026c6:	f7fe ff73 	bl	80015b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80026ca:	9b05      	ldr	r3, [sp, #20]
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	9b06      	ldr	r3, [sp, #24]
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2302      	movs	r3, #2
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	9a07      	ldr	r2, [sp, #28]
 80026d8:	490a      	ldr	r1, [pc, #40]	@ (8002704 <xTimerCreateTimerTask+0x58>)
 80026da:	480b      	ldr	r0, [pc, #44]	@ (8002708 <xTimerCreateTimerTask+0x5c>)
 80026dc:	4623      	mov	r3, r4
 80026de:	f7ff fc49 	bl	8001f74 <xTaskCreateStatic>
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <xTimerCreateTimerTask+0x60>)
 80026e4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80026e6:	b940      	cbnz	r0, 80026fa <xTimerCreateTimerTask+0x4e>
 80026e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80026f8:	e7fe      	b.n	80026f8 <xTimerCreateTimerTask+0x4c>
}
 80026fa:	2001      	movs	r0, #1
 80026fc:	b008      	add	sp, #32
 80026fe:	bd10      	pop	{r4, pc}
 8002700:	20000eb8 	.word	0x20000eb8
 8002704:	0800312a 	.word	0x0800312a
 8002708:	0800280d 	.word	0x0800280d
 800270c:	20000eb4 	.word	0x20000eb4

08002710 <xTimerGenericCommand>:
{
 8002710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002712:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8002714:	4604      	mov	r4, r0
{
 8002716:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002718:	b940      	cbnz	r0, 800272c <xTimerGenericCommand+0x1c>
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	e7fe      	b.n	800272a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800272c:	4d0d      	ldr	r5, [pc, #52]	@ (8002764 <xTimerGenericCommand+0x54>)
 800272e:	6828      	ldr	r0, [r5, #0]
 8002730:	b180      	cbz	r0, 8002754 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002732:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002734:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002738:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800273a:	dc0d      	bgt.n	8002758 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800273c:	f7ff ff12 	bl	8002564 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002740:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002742:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002744:	bf08      	it	eq
 8002746:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002748:	6828      	ldr	r0, [r5, #0]
 800274a:	bf18      	it	ne
 800274c:	461a      	movne	r2, r3
 800274e:	4669      	mov	r1, sp
 8002750:	f7ff f8b8 	bl	80018c4 <xQueueGenericSend>
}
 8002754:	b004      	add	sp, #16
 8002756:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002758:	2300      	movs	r3, #0
 800275a:	4669      	mov	r1, sp
 800275c:	f7ff f964 	bl	8001a28 <xQueueGenericSendFromISR>
 8002760:	e7f8      	b.n	8002754 <xTimerGenericCommand+0x44>
 8002762:	bf00      	nop
 8002764:	20000eb8 	.word	0x20000eb8

08002768 <prvSampleTimeNow>:
{
 8002768:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800276c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002808 <prvSampleTimeNow+0xa0>
{
 8002770:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8002772:	f7ff fcbd 	bl	80020f0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002776:	f8d8 3000 	ldr.w	r3, [r8]
 800277a:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800277c:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800277e:	d909      	bls.n	8002794 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002780:	4f1f      	ldr	r7, [pc, #124]	@ (8002800 <prvSampleTimeNow+0x98>)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	b96a      	cbnz	r2, 80027a4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8002788:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <prvSampleTimeNow+0x9c>)
 800278a:	6811      	ldr	r1, [r2, #0]
 800278c:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800278e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <prvSampleTimeNow+0x2e>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8002798:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800279a:	f8c8 5000 	str.w	r5, [r8]
}
 800279e:	b002      	add	sp, #8
 80027a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027a4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027a6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027a8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027ac:	f104 0a04 	add.w	sl, r4, #4
 80027b0:	4650      	mov	r0, sl
 80027b2:	f7fe ff39 	bl	8001628 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027b6:	6a23      	ldr	r3, [r4, #32]
 80027b8:	4620      	mov	r0, r4
 80027ba:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027bc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80027c0:	075b      	lsls	r3, r3, #29
 80027c2:	d5de      	bpl.n	8002782 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80027c4:	69a3      	ldr	r3, [r4, #24]
 80027c6:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80027c8:	4599      	cmp	r9, r3
 80027ca:	d206      	bcs.n	80027da <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027cc:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80027ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027d2:	4651      	mov	r1, sl
 80027d4:	f7fe ff11 	bl	80015fa <vListInsert>
 80027d8:	e7d3      	b.n	8002782 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	464a      	mov	r2, r9
 80027e0:	4619      	mov	r1, r3
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff94 	bl	8002710 <xTimerGenericCommand>
				configASSERT( xResult );
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d1ca      	bne.n	8002782 <prvSampleTimeNow+0x1a>
 80027ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	e7fe      	b.n	80027fc <prvSampleTimeNow+0x94>
 80027fe:	bf00      	nop
 8002800:	20000ec0 	.word	0x20000ec0
 8002804:	20000ebc 	.word	0x20000ebc
 8002808:	20000eb0 	.word	0x20000eb0

0800280c <prvTimerTask>:
{
 800280c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002810:	4d6e      	ldr	r5, [pc, #440]	@ (80029cc <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002812:	4e6f      	ldr	r6, [pc, #444]	@ (80029d0 <prvTimerTask+0x1c4>)
{
 8002814:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	f8d3 8000 	ldr.w	r8, [r3]
 800281c:	f1b8 0f00 	cmp.w	r8, #0
 8002820:	d035      	beq.n	800288e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002828:	2400      	movs	r4, #0
	vTaskSuspendAll();
 800282a:	f7ff fc59 	bl	80020e0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800282e:	a804      	add	r0, sp, #16
 8002830:	f7ff ff9a 	bl	8002768 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8002834:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002836:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8002838:	2b00      	cmp	r3, #0
 800283a:	d169      	bne.n	8002910 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800283c:	2c00      	cmp	r4, #0
 800283e:	d14c      	bne.n	80028da <prvTimerTask+0xce>
 8002840:	4540      	cmp	r0, r8
 8002842:	d350      	bcc.n	80028e6 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8002844:	f7ff fcf0 	bl	8002228 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800284e:	1d38      	adds	r0, r7, #4
 8002850:	f7fe feea 	bl	8001628 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002854:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002858:	0758      	lsls	r0, r3, #29
 800285a:	d51a      	bpl.n	8002892 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	4643      	mov	r3, r8
 8002860:	464a      	mov	r2, r9
 8002862:	4441      	add	r1, r8
 8002864:	4638      	mov	r0, r7
 8002866:	f7ff fecf 	bl	8002608 <prvInsertTimerInActiveList>
 800286a:	b1b0      	cbz	r0, 800289a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800286c:	9400      	str	r4, [sp, #0]
 800286e:	4623      	mov	r3, r4
 8002870:	4642      	mov	r2, r8
 8002872:	4621      	mov	r1, r4
 8002874:	4638      	mov	r0, r7
 8002876:	f7ff ff4b 	bl	8002710 <xTimerGenericCommand>
			configASSERT( xResult );
 800287a:	b970      	cbnz	r0, 800289a <prvTimerTask+0x8e>
 800287c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	e7fe      	b.n	800288c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800288e:	2401      	movs	r4, #1
 8002890:	e7cb      	b.n	800282a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	4638      	mov	r0, r7
 800289e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028a0:	6830      	ldr	r0, [r6, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	a904      	add	r1, sp, #16
 80028a6:	f7ff f91c 	bl	8001ae2 <xQueueReceive>
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d0b3      	beq.n	8002816 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80028ae:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80028b0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db2f      	blt.n	8002916 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80028b6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80028b8:	6963      	ldr	r3, [r4, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d132      	bne.n	8002924 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028be:	a803      	add	r0, sp, #12
 80028c0:	f7ff ff52 	bl	8002768 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80028c4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028c6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	d8e9      	bhi.n	80028a0 <prvTimerTask+0x94>
 80028cc:	e8df f003 	tbb	[pc, r3]
 80028d0:	572e2e2e 	.word	0x572e2e2e
 80028d4:	2e2e765e 	.word	0x2e2e765e
 80028d8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80028da:	4b3e      	ldr	r3, [pc, #248]	@ (80029d4 <prvTimerTask+0x1c8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681c      	ldr	r4, [r3, #0]
 80028e0:	fab4 f484 	clz	r4, r4
 80028e4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80028e6:	6830      	ldr	r0, [r6, #0]
 80028e8:	4622      	mov	r2, r4
 80028ea:	eba8 0109 	sub.w	r1, r8, r9
 80028ee:	f7ff f9a9 	bl	8001c44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80028f2:	f7ff fc99 	bl	8002228 <xTaskResumeAll>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d1d2      	bne.n	80028a0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80028fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80028fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002902:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	e7c7      	b.n	80028a0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8002910:	f7ff fc8a 	bl	8002228 <xTaskResumeAll>
}
 8002914:	e7c4      	b.n	80028a0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002916:	9b05      	ldr	r3, [sp, #20]
 8002918:	9907      	ldr	r1, [sp, #28]
 800291a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800291c:	9b04      	ldr	r3, [sp, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	dbbe      	blt.n	80028a0 <prvTimerTask+0x94>
 8002922:	e7c8      	b.n	80028b6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002924:	1d20      	adds	r0, r4, #4
 8002926:	f7fe fe7f 	bl	8001628 <uxListRemove>
 800292a:	e7c8      	b.n	80028be <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800292c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002930:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800293a:	9b05      	ldr	r3, [sp, #20]
 800293c:	4620      	mov	r0, r4
 800293e:	4419      	add	r1, r3
 8002940:	f7ff fe62 	bl	8002608 <prvInsertTimerInActiveList>
 8002944:	2800      	cmp	r0, #0
 8002946:	d0ab      	beq.n	80028a0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002948:	6a23      	ldr	r3, [r4, #32]
 800294a:	4620      	mov	r0, r4
 800294c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800294e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002952:	0759      	lsls	r1, r3, #29
 8002954:	d5a4      	bpl.n	80028a0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002956:	69a2      	ldr	r2, [r4, #24]
 8002958:	9905      	ldr	r1, [sp, #20]
 800295a:	2300      	movs	r3, #0
 800295c:	440a      	add	r2, r1
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	4620      	mov	r0, r4
 8002964:	f7ff fed4 	bl	8002710 <xTimerGenericCommand>
							configASSERT( xResult );
 8002968:	2800      	cmp	r0, #0
 800296a:	d199      	bne.n	80028a0 <prvTimerTask+0x94>
 800296c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	e7fe      	b.n	800297c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800297e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800298a:	e789      	b.n	80028a0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800298c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002998:	9905      	ldr	r1, [sp, #20]
 800299a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800299c:	b941      	cbnz	r1, 80029b0 <prvTimerTask+0x1a4>
 800299e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	e7fe      	b.n	80029ae <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80029b0:	4603      	mov	r3, r0
 80029b2:	4401      	add	r1, r0
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff fe27 	bl	8002608 <prvInsertTimerInActiveList>
					break;
 80029ba:	e771      	b.n	80028a0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80029bc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80029c0:	079a      	lsls	r2, r3, #30
 80029c2:	d4de      	bmi.n	8002982 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80029c4:	4620      	mov	r0, r4
 80029c6:	f000 fa6b 	bl	8002ea0 <vPortFree>
 80029ca:	e769      	b.n	80028a0 <prvTimerTask+0x94>
 80029cc:	20000ec0 	.word	0x20000ec0
 80029d0:	20000eb8 	.word	0x20000eb8
 80029d4:	20000ebc 	.word	0x20000ebc

080029d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80029d8:	4808      	ldr	r0, [pc, #32]	@ (80029fc <prvPortStartFirstTask+0x24>)
 80029da:	6800      	ldr	r0, [r0, #0]
 80029dc:	6800      	ldr	r0, [r0, #0]
 80029de:	f380 8808 	msr	MSP, r0
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f380 8814 	msr	CONTROL, r0
 80029ea:	b662      	cpsie	i
 80029ec:	b661      	cpsie	f
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	df00      	svc	0
 80029f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029fa:	0000      	.short	0x0000
 80029fc:	e000ed08 	.word	0xe000ed08

08002a00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a00:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002a10 <vPortEnableVFP+0x10>
 8002a04:	6801      	ldr	r1, [r0, #0]
 8002a06:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002a0a:	6001      	str	r1, [r0, #0]
 8002a0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002a0e:	0000      	.short	0x0000
 8002a10:	e000ed88 	.word	0xe000ed88

08002a14 <prvTaskExitError>:
{
 8002a14:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <prvTaskExitError+0x3c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	d008      	beq.n	8002a34 <prvTaskExitError+0x20>
 8002a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	e7fe      	b.n	8002a32 <prvTaskExitError+0x1e>
 8002a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0fc      	beq.n	8002a44 <prvTaskExitError+0x30>
}
 8002a4a:	b002      	add	sp, #8
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c

08002a54 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a58:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <pxPortInitialiseStack+0x28>)
 8002a5e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a62:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a66:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a6a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a6e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a72:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002a76:	3844      	subs	r0, #68	@ 0x44
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	08002a15 	.word	0x08002a15

08002a80 <SVC_Handler>:
	__asm volatile (
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <pxCurrentTCBConst2>)
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	6808      	ldr	r0, [r1, #0]
 8002a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8a:	f380 8809 	msr	PSP, r0
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f380 8811 	msr	BASEPRI, r0
 8002a9a:	4770      	bx	lr
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst2>:
 8002aa0:	20000dbc 	.word	0x20000dbc

08002aa4 <vPortEnterCritical>:
 8002aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <vPortEnterCritical+0x3c>)
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002aba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002abc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002abe:	d10e      	bne.n	8002ade <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ac0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002ac4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	b143      	cbz	r3, 8002ade <vPortEnterCritical+0x3a>
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	e7fe      	b.n	8002adc <vPortEnterCritical+0x38>
}
 8002ade:	4770      	bx	lr
 8002ae0:	2000000c 	.word	0x2000000c

08002ae4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002ae4:	4a08      	ldr	r2, [pc, #32]	@ (8002b08 <vPortExitCritical+0x24>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	b943      	cbnz	r3, 8002afc <vPortExitCritical+0x18>
 8002aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	e7fe      	b.n	8002afa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002afc:	3b01      	subs	r3, #1
 8002afe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b00:	b90b      	cbnz	r3, 8002b06 <vPortExitCritical+0x22>
	__asm volatile
 8002b02:	f383 8811 	msr	BASEPRI, r3
}
 8002b06:	4770      	bx	lr
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	00000000 	.word	0x00000000

08002b10 <PendSV_Handler>:
	__asm volatile
 8002b10:	f3ef 8009 	mrs	r0, PSP
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <pxCurrentTCBConst>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f01e 0f10 	tst.w	lr, #16
 8002b20:	bf08      	it	eq
 8002b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	6010      	str	r0, [r2, #0]
 8002b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b34:	f380 8811 	msr	BASEPRI, r0
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f7ff fc0a 	bl	8002358 <vTaskSwitchContext>
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f380 8811 	msr	BASEPRI, r0
 8002b4c:	bc09      	pop	{r0, r3}
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	6808      	ldr	r0, [r1, #0]
 8002b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b56:	f01e 0f10 	tst.w	lr, #16
 8002b5a:	bf08      	it	eq
 8002b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b60:	f380 8809 	msr	PSP, r0
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	f3af 8000 	nop.w

08002b70 <pxCurrentTCBConst>:
 8002b70:	20000dbc 	.word	0x20000dbc

08002b74 <xPortSysTickHandler>:
{
 8002b74:	b508      	push	{r3, lr}
	__asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002b86:	f7ff fab9 	bl	80020fc <xTaskIncrementTick>
 8002b8a:	b128      	cbz	r0, 8002b98 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f383 8811 	msr	BASEPRI, r3
}
 8002b9e:	bd08      	pop	{r3, pc}

08002ba0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ba0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ba8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <vPortSetupTimerInterrupt+0x20>)
 8002bac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bba:	2307      	movs	r3, #7
 8002bbc:	6113      	str	r3, [r2, #16]
}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8002bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bca:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8002bce:	4a38      	ldr	r2, [pc, #224]	@ (8002cb0 <xPortStartScheduler+0xec>)
 8002bd0:	4291      	cmp	r1, r2
 8002bd2:	d108      	bne.n	8002be6 <xPortStartScheduler+0x22>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	e7fe      	b.n	8002be4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002be6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002bea:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <xPortStartScheduler+0xf0>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d108      	bne.n	8002c02 <xPortStartScheduler+0x3e>
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	e7fe      	b.n	8002c00 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c02:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb8 <xPortStartScheduler+0xf4>)
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c0a:	22ff      	movs	r2, #255	@ 0xff
 8002c0c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c0e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c10:	4a2a      	ldr	r2, [pc, #168]	@ (8002cbc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002c1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c20:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c22:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <xPortStartScheduler+0xfc>)
 8002c24:	2307      	movs	r3, #7
 8002c26:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c28:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8002c2c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c2e:	0609      	lsls	r1, r1, #24
 8002c30:	d40a      	bmi.n	8002c48 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d011      	beq.n	8002c5a <xPortStartScheduler+0x96>
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	e7fe      	b.n	8002c46 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f88d 3003 	strb.w	r3, [sp, #3]
 8002c58:	e7e6      	b.n	8002c28 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c5e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c60:	9b01      	ldr	r3, [sp, #4]
 8002c62:	4a15      	ldr	r2, [pc, #84]	@ (8002cb8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c64:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c6c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c74:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c78:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002c7c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002c80:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8002c84:	f7ff ff8c 	bl	8002ba0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <xPortStartScheduler+0x100>)
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002c8e:	f7ff feb7 	bl	8002a00 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c92:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8002c96:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002c9a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8002c9e:	f7ff fe9b 	bl	80029d8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002ca2:	f7ff fb59 	bl	8002358 <vTaskSwitchContext>
	prvTaskExitError();
 8002ca6:	f7ff feb5 	bl	8002a14 <prvTaskExitError>
}
 8002caa:	4628      	mov	r0, r5
 8002cac:	b003      	add	sp, #12
 8002cae:	bd30      	pop	{r4, r5, pc}
 8002cb0:	410fc271 	.word	0x410fc271
 8002cb4:	410fc270 	.word	0x410fc270
 8002cb8:	e000e400 	.word	0xe000e400
 8002cbc:	20000ef0 	.word	0x20000ef0
 8002cc0:	20000eec 	.word	0x20000eec
 8002cc4:	2000000c 	.word	0x2000000c

08002cc8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002cc8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d90e      	bls.n	8002cee <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cd0:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <vPortValidateInterruptPriority+0x50>)
 8002cd2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cd4:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <vPortValidateInterruptPriority+0x54>)
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <vPortValidateInterruptPriority+0x26>
 8002cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	e7fe      	b.n	8002cec <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002cee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8002d20 <vPortValidateInterruptPriority+0x58>)
 8002cf4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d908      	bls.n	8002d14 <vPortValidateInterruptPriority+0x4c>
 8002d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	e7fe      	b.n	8002d12 <vPortValidateInterruptPriority+0x4a>
	}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e3f0 	.word	0xe000e3f0
 8002d1c:	20000ef0 	.word	0x20000ef0
 8002d20:	20000eec 	.word	0x20000eec

08002d24 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d24:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <prvInsertBlockIntoFreeList+0x44>)
 8002d28:	461a      	mov	r2, r3
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4283      	cmp	r3, r0
 8002d2e:	d3fb      	bcc.n	8002d28 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d30:	6854      	ldr	r4, [r2, #4]
 8002d32:	1911      	adds	r1, r2, r4
 8002d34:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d36:	bf01      	itttt	eq
 8002d38:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8002d3a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d3c:	1909      	addeq	r1, r1, r4
 8002d3e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d40:	6844      	ldr	r4, [r0, #4]
 8002d42:	1901      	adds	r1, r0, r4
 8002d44:	428b      	cmp	r3, r1
 8002d46:	d10c      	bne.n	8002d62 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d48:	4908      	ldr	r1, [pc, #32]	@ (8002d6c <prvInsertBlockIntoFreeList+0x48>)
 8002d4a:	6809      	ldr	r1, [r1, #0]
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	d003      	beq.n	8002d58 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	4421      	add	r1, r4
 8002d54:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d56:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d58:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d5a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d5c:	bf18      	it	ne
 8002d5e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	4619      	mov	r1, r3
 8002d64:	e7f8      	b.n	8002d58 <prvInsertBlockIntoFreeList+0x34>
 8002d66:	bf00      	nop
 8002d68:	20000f0c 	.word	0x20000f0c
 8002d6c:	20000f08 	.word	0x20000f08

08002d70 <pvPortMalloc>:
{
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d74:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002d76:	f7ff f9b3 	bl	80020e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002d7a:	4942      	ldr	r1, [pc, #264]	@ (8002e84 <pvPortMalloc+0x114>)
 8002d7c:	4d42      	ldr	r5, [pc, #264]	@ (8002e88 <pvPortMalloc+0x118>)
 8002d7e:	680b      	ldr	r3, [r1, #0]
 8002d80:	bb0b      	cbnz	r3, 8002dc6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002d82:	4a42      	ldr	r2, [pc, #264]	@ (8002e8c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d84:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d86:	bf1f      	itttt	ne
 8002d88:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d8a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d8e:	f502 5270 	addne.w	r2, r2, #15360	@ 0x3c00
 8002d92:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d94:	bf0c      	ite	eq
 8002d96:	f44f 5370 	moveq.w	r3, #15360	@ 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d9a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d9c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d9e:	4e3c      	ldr	r6, [pc, #240]	@ (8002e90 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8002da0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002da2:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002da6:	2000      	movs	r0, #0
 8002da8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002daa:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8002dac:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002db0:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002db2:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8002db6:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002db8:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <pvPortMalloc+0x124>)
 8002dba:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <pvPortMalloc+0x128>)
 8002dbe:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002dc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002dc4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dc6:	682e      	ldr	r6, [r5, #0]
 8002dc8:	4226      	tst	r6, r4
 8002dca:	d155      	bne.n	8002e78 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	d046      	beq.n	8002e5e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8002dd0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dd4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002dd6:	bf1c      	itt	ne
 8002dd8:	f023 0307 	bicne.w	r3, r3, #7
 8002ddc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d04a      	beq.n	8002e78 <pvPortMalloc+0x108>
 8002de2:	4f2d      	ldr	r7, [pc, #180]	@ (8002e98 <pvPortMalloc+0x128>)
 8002de4:	683c      	ldr	r4, [r7, #0]
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d346      	bcc.n	8002e78 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8002dea:	4a29      	ldr	r2, [pc, #164]	@ (8002e90 <pvPortMalloc+0x120>)
 8002dec:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dee:	6868      	ldr	r0, [r5, #4]
 8002df0:	4298      	cmp	r0, r3
 8002df2:	d204      	bcs.n	8002dfe <pvPortMalloc+0x8e>
 8002df4:	f8d5 c000 	ldr.w	ip, [r5]
 8002df8:	f1bc 0f00 	cmp.w	ip, #0
 8002dfc:	d115      	bne.n	8002e2a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8002dfe:	6809      	ldr	r1, [r1, #0]
 8002e00:	42a9      	cmp	r1, r5
 8002e02:	d039      	beq.n	8002e78 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e04:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e06:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e0a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e0c:	1ac2      	subs	r2, r0, r3
 8002e0e:	2a10      	cmp	r2, #16
 8002e10:	d912      	bls.n	8002e38 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e12:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e14:	0741      	lsls	r1, r0, #29
 8002e16:	d00b      	beq.n	8002e30 <pvPortMalloc+0xc0>
 8002e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	e7fe      	b.n	8002e28 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 8002e2a:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e2c:	4665      	mov	r5, ip
 8002e2e:	e7de      	b.n	8002dee <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e30:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e32:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e34:	f7ff ff76 	bl	8002d24 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e38:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e3a:	4916      	ldr	r1, [pc, #88]	@ (8002e94 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e3c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e3e:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8002e40:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e42:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e44:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8002e4a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e4c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e4e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8002e50:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e54:	bf38      	it	cc
 8002e56:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8002e58:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e5a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8002e5e:	f7ff f9e3 	bl	8002228 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e62:	0763      	lsls	r3, r4, #29
 8002e64:	d00a      	beq.n	8002e7c <pvPortMalloc+0x10c>
 8002e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	e7fe      	b.n	8002e76 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8002e78:	2400      	movs	r4, #0
 8002e7a:	e7f0      	b.n	8002e5e <pvPortMalloc+0xee>
}
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e82:	bf00      	nop
 8002e84:	20000f08 	.word	0x20000f08
 8002e88:	20000ef4 	.word	0x20000ef4
 8002e8c:	20000f14 	.word	0x20000f14
 8002e90:	20000f0c 	.word	0x20000f0c
 8002e94:	20000f00 	.word	0x20000f00
 8002e98:	20000f04 	.word	0x20000f04
 8002e9c:	20000efc 	.word	0x20000efc

08002ea0 <vPortFree>:
{
 8002ea0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	b390      	cbz	r0, 8002f0c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f10 <vPortFree+0x70>)
 8002ea8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	4213      	tst	r3, r2
 8002eb0:	d108      	bne.n	8002ec4 <vPortFree+0x24>
 8002eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ec4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002ec8:	b141      	cbz	r1, 8002edc <vPortFree+0x3c>
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	e7fe      	b.n	8002eda <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002edc:	ea23 0302 	bic.w	r3, r3, r2
 8002ee0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002ee4:	f7ff f8fc 	bl	80020e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <vPortFree+0x74>)
 8002eea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002eee:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ef0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ef4:	440b      	add	r3, r1
 8002ef6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ef8:	f7ff ff14 	bl	8002d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002efc:	4a06      	ldr	r2, [pc, #24]	@ (8002f18 <vPortFree+0x78>)
 8002efe:	6813      	ldr	r3, [r2, #0]
}
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8002f04:	3301      	adds	r3, #1
 8002f06:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8002f08:	f7ff b98e 	b.w	8002228 <xTaskResumeAll>
}
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000ef4 	.word	0x20000ef4
 8002f14:	20000f04 	.word	0x20000f04
 8002f18:	20000ef8 	.word	0x20000ef8

08002f1c <memset>:
 8002f1c:	4402      	add	r2, r0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d100      	bne.n	8002f26 <memset+0xa>
 8002f24:	4770      	bx	lr
 8002f26:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2a:	e7f9      	b.n	8002f20 <memset+0x4>

08002f2c <_reclaim_reent>:
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <_reclaim_reent+0xb8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4283      	cmp	r3, r0
 8002f32:	b570      	push	{r4, r5, r6, lr}
 8002f34:	4604      	mov	r4, r0
 8002f36:	d053      	beq.n	8002fe0 <_reclaim_reent+0xb4>
 8002f38:	69c3      	ldr	r3, [r0, #28]
 8002f3a:	b31b      	cbz	r3, 8002f84 <_reclaim_reent+0x58>
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	b163      	cbz	r3, 8002f5a <_reclaim_reent+0x2e>
 8002f40:	2500      	movs	r5, #0
 8002f42:	69e3      	ldr	r3, [r4, #28]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	5959      	ldr	r1, [r3, r5]
 8002f48:	b9b1      	cbnz	r1, 8002f78 <_reclaim_reent+0x4c>
 8002f4a:	3504      	adds	r5, #4
 8002f4c:	2d80      	cmp	r5, #128	@ 0x80
 8002f4e:	d1f8      	bne.n	8002f42 <_reclaim_reent+0x16>
 8002f50:	69e3      	ldr	r3, [r4, #28]
 8002f52:	4620      	mov	r0, r4
 8002f54:	68d9      	ldr	r1, [r3, #12]
 8002f56:	f000 f87b 	bl	8003050 <_free_r>
 8002f5a:	69e3      	ldr	r3, [r4, #28]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	b111      	cbz	r1, 8002f66 <_reclaim_reent+0x3a>
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 f875 	bl	8003050 <_free_r>
 8002f66:	69e3      	ldr	r3, [r4, #28]
 8002f68:	689d      	ldr	r5, [r3, #8]
 8002f6a:	b15d      	cbz	r5, 8002f84 <_reclaim_reent+0x58>
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4620      	mov	r0, r4
 8002f70:	682d      	ldr	r5, [r5, #0]
 8002f72:	f000 f86d 	bl	8003050 <_free_r>
 8002f76:	e7f8      	b.n	8002f6a <_reclaim_reent+0x3e>
 8002f78:	680e      	ldr	r6, [r1, #0]
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f000 f868 	bl	8003050 <_free_r>
 8002f80:	4631      	mov	r1, r6
 8002f82:	e7e1      	b.n	8002f48 <_reclaim_reent+0x1c>
 8002f84:	6961      	ldr	r1, [r4, #20]
 8002f86:	b111      	cbz	r1, 8002f8e <_reclaim_reent+0x62>
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f000 f861 	bl	8003050 <_free_r>
 8002f8e:	69e1      	ldr	r1, [r4, #28]
 8002f90:	b111      	cbz	r1, 8002f98 <_reclaim_reent+0x6c>
 8002f92:	4620      	mov	r0, r4
 8002f94:	f000 f85c 	bl	8003050 <_free_r>
 8002f98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002f9a:	b111      	cbz	r1, 8002fa2 <_reclaim_reent+0x76>
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 f857 	bl	8003050 <_free_r>
 8002fa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fa4:	b111      	cbz	r1, 8002fac <_reclaim_reent+0x80>
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f000 f852 	bl	8003050 <_free_r>
 8002fac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002fae:	b111      	cbz	r1, 8002fb6 <_reclaim_reent+0x8a>
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f000 f84d 	bl	8003050 <_free_r>
 8002fb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002fb8:	b111      	cbz	r1, 8002fc0 <_reclaim_reent+0x94>
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f000 f848 	bl	8003050 <_free_r>
 8002fc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002fc2:	b111      	cbz	r1, 8002fca <_reclaim_reent+0x9e>
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 f843 	bl	8003050 <_free_r>
 8002fca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002fcc:	b111      	cbz	r1, 8002fd4 <_reclaim_reent+0xa8>
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f000 f83e 	bl	8003050 <_free_r>
 8002fd4:	6a23      	ldr	r3, [r4, #32]
 8002fd6:	b11b      	cbz	r3, 8002fe0 <_reclaim_reent+0xb4>
 8002fd8:	4620      	mov	r0, r4
 8002fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002fde:	4718      	bx	r3
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <__libc_init_array>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	4d0d      	ldr	r5, [pc, #52]	@ (8003020 <__libc_init_array+0x38>)
 8002fec:	4c0d      	ldr	r4, [pc, #52]	@ (8003024 <__libc_init_array+0x3c>)
 8002fee:	1b64      	subs	r4, r4, r5
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	42a6      	cmp	r6, r4
 8002ff6:	d109      	bne.n	800300c <__libc_init_array+0x24>
 8002ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8003028 <__libc_init_array+0x40>)
 8002ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800302c <__libc_init_array+0x44>)
 8002ffc:	f000 f87e 	bl	80030fc <_init>
 8003000:	1b64      	subs	r4, r4, r5
 8003002:	10a4      	asrs	r4, r4, #2
 8003004:	2600      	movs	r6, #0
 8003006:	42a6      	cmp	r6, r4
 8003008:	d105      	bne.n	8003016 <__libc_init_array+0x2e>
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003010:	4798      	blx	r3
 8003012:	3601      	adds	r6, #1
 8003014:	e7ee      	b.n	8002ff4 <__libc_init_array+0xc>
 8003016:	f855 3b04 	ldr.w	r3, [r5], #4
 800301a:	4798      	blx	r3
 800301c:	3601      	adds	r6, #1
 800301e:	e7f2      	b.n	8003006 <__libc_init_array+0x1e>
 8003020:	08003154 	.word	0x08003154
 8003024:	08003154 	.word	0x08003154
 8003028:	08003154 	.word	0x08003154
 800302c:	08003158 	.word	0x08003158

08003030 <__retarget_lock_acquire_recursive>:
 8003030:	4770      	bx	lr

08003032 <__retarget_lock_release_recursive>:
 8003032:	4770      	bx	lr

08003034 <memcpy>:
 8003034:	440a      	add	r2, r1
 8003036:	4291      	cmp	r1, r2
 8003038:	f100 33ff 	add.w	r3, r0, #4294967295
 800303c:	d100      	bne.n	8003040 <memcpy+0xc>
 800303e:	4770      	bx	lr
 8003040:	b510      	push	{r4, lr}
 8003042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800304a:	4291      	cmp	r1, r2
 800304c:	d1f9      	bne.n	8003042 <memcpy+0xe>
 800304e:	bd10      	pop	{r4, pc}

08003050 <_free_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	2900      	cmp	r1, #0
 8003056:	d041      	beq.n	80030dc <_free_r+0x8c>
 8003058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305c:	1f0c      	subs	r4, r1, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfb8      	it	lt
 8003062:	18e4      	addlt	r4, r4, r3
 8003064:	f000 f83e 	bl	80030e4 <__malloc_lock>
 8003068:	4a1d      	ldr	r2, [pc, #116]	@ (80030e0 <_free_r+0x90>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	b933      	cbnz	r3, 800307c <_free_r+0x2c>
 800306e:	6063      	str	r3, [r4, #4]
 8003070:	6014      	str	r4, [r2, #0]
 8003072:	4628      	mov	r0, r5
 8003074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003078:	f000 b83a 	b.w	80030f0 <__malloc_unlock>
 800307c:	42a3      	cmp	r3, r4
 800307e:	d908      	bls.n	8003092 <_free_r+0x42>
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	1821      	adds	r1, r4, r0
 8003084:	428b      	cmp	r3, r1
 8003086:	bf01      	itttt	eq
 8003088:	6819      	ldreq	r1, [r3, #0]
 800308a:	685b      	ldreq	r3, [r3, #4]
 800308c:	1809      	addeq	r1, r1, r0
 800308e:	6021      	streq	r1, [r4, #0]
 8003090:	e7ed      	b.n	800306e <_free_r+0x1e>
 8003092:	461a      	mov	r2, r3
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b10b      	cbz	r3, 800309c <_free_r+0x4c>
 8003098:	42a3      	cmp	r3, r4
 800309a:	d9fa      	bls.n	8003092 <_free_r+0x42>
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	1850      	adds	r0, r2, r1
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d10b      	bne.n	80030bc <_free_r+0x6c>
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	4401      	add	r1, r0
 80030a8:	1850      	adds	r0, r2, r1
 80030aa:	4283      	cmp	r3, r0
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	d1e0      	bne.n	8003072 <_free_r+0x22>
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	6053      	str	r3, [r2, #4]
 80030b6:	4408      	add	r0, r1
 80030b8:	6010      	str	r0, [r2, #0]
 80030ba:	e7da      	b.n	8003072 <_free_r+0x22>
 80030bc:	d902      	bls.n	80030c4 <_free_r+0x74>
 80030be:	230c      	movs	r3, #12
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	e7d6      	b.n	8003072 <_free_r+0x22>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf04      	itt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	6063      	str	r3, [r4, #4]
 80030d2:	bf04      	itt	eq
 80030d4:	1809      	addeq	r1, r1, r0
 80030d6:	6021      	streq	r1, [r4, #0]
 80030d8:	6054      	str	r4, [r2, #4]
 80030da:	e7ca      	b.n	8003072 <_free_r+0x22>
 80030dc:	bd38      	pop	{r3, r4, r5, pc}
 80030de:	bf00      	nop
 80030e0:	20004c50 	.word	0x20004c50

080030e4 <__malloc_lock>:
 80030e4:	4801      	ldr	r0, [pc, #4]	@ (80030ec <__malloc_lock+0x8>)
 80030e6:	f7ff bfa3 	b.w	8003030 <__retarget_lock_acquire_recursive>
 80030ea:	bf00      	nop
 80030ec:	20004c4c 	.word	0x20004c4c

080030f0 <__malloc_unlock>:
 80030f0:	4801      	ldr	r0, [pc, #4]	@ (80030f8 <__malloc_unlock+0x8>)
 80030f2:	f7ff bf9e 	b.w	8003032 <__retarget_lock_release_recursive>
 80030f6:	bf00      	nop
 80030f8:	20004c4c 	.word	0x20004c4c

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
