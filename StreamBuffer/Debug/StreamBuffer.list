
StreamBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003df0  08003df0  00004df0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e70  08003e70  00004e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e78  08003e78  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e78  08003e78  00004e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003e80  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bcc  20000060  08003ee0  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c2c  08003ee0  00005c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfa1  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0b  00000000  00000000  00021031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b71e  00000000  00000000  00024d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00030460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001260  00000000  00000000  00031590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034d5  00000000  00000000  000327f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ad7  00000000  00000000  00035cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009754f  00000000  00000000  0004e79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e5ceb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003430  00000000  00000000  000e5d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000e9160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dd8 	.word	0x08003dd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003dd8 	.word	0x08003dd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Task1>:

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Task1(void *param){
 80005bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	sb_handle_task1_to_task2 = xStreamBufferCreate(15, 1);
 80005c0:	2200      	movs	r2, #0
void Task1(void *param){
 80005c2:	b085      	sub	sp, #20
	sb_handle_task1_to_task2 = xStreamBufferCreate(15, 1);
 80005c4:	2101      	movs	r1, #1
 80005c6:	200f      	movs	r0, #15
 80005c8:	f001 fb73 	bl	8001cb2 <xStreamBufferGenericCreate>
	char txbuff[10] = {"\0"};
 80005cc:	2500      	movs	r5, #0
	sb_handle_task1_to_task2 = xStreamBufferCreate(15, 1);
 80005ce:	4e1a      	ldr	r6, [pc, #104]	@ (8000638 <Task1+0x7c>)
	uint32_t prev_time = 0;
	while(1)
	{
		if(((xTaskGetTickCount() * (1000/configTICK_RATE_HZ)) - prev_time) > 500){
			cnt++;
			sprintf(txbuff,"task1:%3d", cnt);
 80005d0:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8000648 <Task1+0x8c>
			task1_sended_byte = xStreamBufferSend(sb_handle_task1_to_task2, txbuff, strlen(txbuff), pdMS_TO_TICKS(1000));
 80005d4:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 800064c <Task1+0x90>
			prev_time = (xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
		}
		task1_received_byte =  xStreamBufferReceive(sb_handle_task2_to_task1, task1_buffer, 9, pdMS_TO_TICKS(50));
 80005d8:	4f18      	ldr	r7, [pc, #96]	@ (800063c <Task1+0x80>)
	sb_handle_task1_to_task2 = xStreamBufferCreate(15, 1);
 80005da:	6030      	str	r0, [r6, #0]
	char txbuff[10] = {"\0"};
 80005dc:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80005e0:	f8ad 500c 	strh.w	r5, [sp, #12]
	uint8_t cnt = 0;
 80005e4:	462c      	mov	r4, r5
		if(((xTaskGetTickCount() * (1000/configTICK_RATE_HZ)) - prev_time) > 500){
 80005e6:	f001 fee7 	bl	80023b8 <xTaskGetTickCount>
 80005ea:	1b40      	subs	r0, r0, r5
 80005ec:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80005f0:	d915      	bls.n	800061e <Task1+0x62>
			cnt++;
 80005f2:	3401      	adds	r4, #1
 80005f4:	b2e4      	uxtb	r4, r4
			sprintf(txbuff,"task1:%3d", cnt);
 80005f6:	4622      	mov	r2, r4
 80005f8:	4641      	mov	r1, r8
 80005fa:	a801      	add	r0, sp, #4
 80005fc:	f002 feee 	bl	80033dc <siprintf>
			task1_sended_byte = xStreamBufferSend(sb_handle_task1_to_task2, txbuff, strlen(txbuff), pdMS_TO_TICKS(1000));
 8000600:	a801      	add	r0, sp, #4
 8000602:	f7ff fded 	bl	80001e0 <strlen>
 8000606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060a:	4602      	mov	r2, r0
 800060c:	a901      	add	r1, sp, #4
 800060e:	6830      	ldr	r0, [r6, #0]
 8000610:	f001 fb9d 	bl	8001d4e <xStreamBufferSend>
 8000614:	f889 0000 	strb.w	r0, [r9]
			prev_time = (xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8000618:	f001 fece 	bl	80023b8 <xTaskGetTickCount>
 800061c:	4605      	mov	r5, r0
		task1_received_byte =  xStreamBufferReceive(sb_handle_task2_to_task1, task1_buffer, 9, pdMS_TO_TICKS(50));
 800061e:	4908      	ldr	r1, [pc, #32]	@ (8000640 <Task1+0x84>)
 8000620:	6838      	ldr	r0, [r7, #0]
 8000622:	2332      	movs	r3, #50	@ 0x32
 8000624:	2209      	movs	r2, #9
 8000626:	f001 fc17 	bl	8001e58 <xStreamBufferReceive>
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <Task1+0x88>)
 800062c:	7018      	strb	r0, [r3, #0]

		vTaskDelay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f001 ffd2 	bl	80025d8 <vTaskDelay>
		if(((xTaskGetTickCount() * (1000/configTICK_RATE_HZ)) - prev_time) > 500){
 8000634:	e7d7      	b.n	80005e6 <Task1+0x2a>
 8000636:	bf00      	nop
 8000638:	200000a4 	.word	0x200000a4
 800063c:	200000a0 	.word	0x200000a0
 8000640:	2000008f 	.word	0x2000008f
 8000644:	2000007e 	.word	0x2000007e
 8000648:	08003df0 	.word	0x08003df0
 800064c:	2000007f 	.word	0x2000007f

08000650 <Task2>:
	}
}

void Task2(void *param){
 8000650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sb_handle_task2_to_task1 = xStreamBufferCreate(15, 1);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	200f      	movs	r0, #15
 800065a:	f001 fb2a 	bl	8001cb2 <xStreamBufferGenericCreate>
	char txbuff[10] = {"\0"};
 800065e:	2500      	movs	r5, #0
	sb_handle_task2_to_task1 = xStreamBufferCreate(15, 1);
 8000660:	4e19      	ldr	r6, [pc, #100]	@ (80006c8 <Task2+0x78>)
	uint32_t prev_time = 0;
	while(1)
	{
		if(((xTaskGetTickCount() * (1000/configTICK_RATE_HZ)) - prev_time) > 500){
			cnt++;
			sprintf(txbuff,"task2:%3d", cnt);
 8000662:	4f1a      	ldr	r7, [pc, #104]	@ (80006cc <Task2+0x7c>)
			task2_sended_byte = xStreamBufferSend(sb_handle_task2_to_task1, txbuff, strlen(txbuff), pdMS_TO_TICKS(50));
 8000664:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80006dc <Task2+0x8c>
	sb_handle_task2_to_task1 = xStreamBufferCreate(15, 1);
 8000668:	6030      	str	r0, [r6, #0]
	char txbuff[10] = {"\0"};
 800066a:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800066e:	f8ad 500c 	strh.w	r5, [sp, #12]
	uint8_t cnt = 0;
 8000672:	462c      	mov	r4, r5
		if(((xTaskGetTickCount() * (1000/configTICK_RATE_HZ)) - prev_time) > 500){
 8000674:	f001 fea0 	bl	80023b8 <xTaskGetTickCount>
 8000678:	1b40      	subs	r0, r0, r5
 800067a:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800067e:	d914      	bls.n	80006aa <Task2+0x5a>
			cnt++;
 8000680:	3401      	adds	r4, #1
 8000682:	b2e4      	uxtb	r4, r4
			sprintf(txbuff,"task2:%3d", cnt);
 8000684:	4622      	mov	r2, r4
 8000686:	4639      	mov	r1, r7
 8000688:	a801      	add	r0, sp, #4
 800068a:	f002 fea7 	bl	80033dc <siprintf>
			task2_sended_byte = xStreamBufferSend(sb_handle_task2_to_task1, txbuff, strlen(txbuff), pdMS_TO_TICKS(50));
 800068e:	a801      	add	r0, sp, #4
 8000690:	f7ff fda6 	bl	80001e0 <strlen>
 8000694:	2332      	movs	r3, #50	@ 0x32
 8000696:	4602      	mov	r2, r0
 8000698:	a901      	add	r1, sp, #4
 800069a:	6830      	ldr	r0, [r6, #0]
 800069c:	f001 fb57 	bl	8001d4e <xStreamBufferSend>
 80006a0:	f888 0000 	strb.w	r0, [r8]
			prev_time = (xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 80006a4:	f001 fe88 	bl	80023b8 <xTaskGetTickCount>
 80006a8:	4605      	mov	r5, r0
		}
		vTaskDelay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ae:	f001 ff93 	bl	80025d8 <vTaskDelay>
		task2_received_byte =  xStreamBufferReceive(sb_handle_task1_to_task2, task2_buffer, 9, pdMS_TO_TICKS(50));
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <Task2+0x80>)
 80006b4:	4907      	ldr	r1, [pc, #28]	@ (80006d4 <Task2+0x84>)
 80006b6:	6800      	ldr	r0, [r0, #0]
 80006b8:	2332      	movs	r3, #50	@ 0x32
 80006ba:	2209      	movs	r2, #9
 80006bc:	f001 fbcc 	bl	8001e58 <xStreamBufferReceive>
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <Task2+0x88>)
 80006c2:	7018      	strb	r0, [r3, #0]
		if(((xTaskGetTickCount() * (1000/configTICK_RATE_HZ)) - prev_time) > 500){
 80006c4:	e7d6      	b.n	8000674 <Task2+0x24>
 80006c6:	bf00      	nop
 80006c8:	200000a0 	.word	0x200000a0
 80006cc:	08003dfa 	.word	0x08003dfa
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	20000080 	.word	0x20000080
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	2000007d 	.word	0x2000007d

080006e0 <SystemClock_Config>:
{
 80006e0:	b510      	push	{r4, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e4:	2214      	movs	r2, #20
 80006e6:	2100      	movs	r1, #0
 80006e8:	a809      	add	r0, sp, #36	@ 0x24
 80006ea:	f002 fe99 	bl	8003420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ee:	2214      	movs	r2, #20
 80006f0:	2100      	movs	r1, #0
 80006f2:	a803      	add	r0, sp, #12
 80006f4:	f002 fe94 	bl	8003420 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000774 <SystemClock_Config+0x94>)
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000700:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000704:	6411      	str	r1, [r2, #64]	@ 0x40
 8000706:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000708:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800070c:	9201      	str	r2, [sp, #4]
 800070e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <SystemClock_Config+0x98>)
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	6811      	ldr	r1, [r2, #0]
 8000716:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800071a:	6011      	str	r1, [r2, #0]
 800071c:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071e:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000724:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000726:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 100;
 800072c:	2364      	movs	r3, #100	@ 0x64
 800072e:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000732:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2101      	movs	r1, #1
 8000738:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073a:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	9412      	str	r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000744:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f000 fa99 	bl	8000c7c <HAL_RCC_OscConfig>
 800074a:	b108      	cbz	r0, 8000750 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074e:	e7fe      	b.n	800074e <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000760:	2103      	movs	r1, #3
 8000762:	a803      	add	r0, sp, #12
 8000764:	f000 fc66 	bl	8001034 <HAL_RCC_ClockConfig>
 8000768:	b108      	cbz	r0, 800076e <SystemClock_Config+0x8e>
 800076a:	b672      	cpsid	i
  while (1)
 800076c:	e7fe      	b.n	800076c <SystemClock_Config+0x8c>
}
 800076e:	b014      	add	sp, #80	@ 0x50
 8000770:	bd10      	pop	{r4, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <main>:
{
 800077c:	b500      	push	{lr}
 800077e:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 8000780:	f000 f932 	bl	80009e8 <HAL_Init>
  SystemClock_Config();
 8000784:	f7ff ffac 	bl	80006e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	2214      	movs	r2, #20
 800078a:	2100      	movs	r1, #0
 800078c:	eb0d 0002 	add.w	r0, sp, r2
 8000790:	f002 fe46 	bl	8003420 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	2400      	movs	r4, #0
 8000796:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <main+0xa4>)
 8000798:	9403      	str	r4, [sp, #12]
 800079a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800079c:	4821      	ldr	r0, [pc, #132]	@ (8000824 <main+0xa8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	f042 0204 	orr.w	r2, r2, #4
 80007a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80007a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007a6:	f002 0204 	and.w	r2, r2, #4
 80007aa:	9203      	str	r2, [sp, #12]
 80007ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	9404      	str	r4, [sp, #16]
 80007b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007be:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007c2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007c6:	f000 fa53 	bl	8000c70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BTN_Pin;
 80007ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80007ce:	4816      	ldr	r0, [pc, #88]	@ (8000828 <main+0xac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80007d2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2501      	movs	r5, #1
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80007da:	f000 f983 	bl	8000ae4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2320      	movs	r3, #32
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007e0:	a905      	add	r1, sp, #20
 80007e2:	4810      	ldr	r0, [pc, #64]	@ (8000824 <main+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f000 f97a 	bl	8000ae4 <HAL_GPIO_Init>
  osKernelInitialize();
 80007f0:	f000 fe30 	bl	8001454 <osKernelInitialize>
  xTaskCreate(Task1, "Task1", 128, NULL, 1, &task1_handle);
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <main+0xb0>)
 80007f6:	490e      	ldr	r1, [pc, #56]	@ (8000830 <main+0xb4>)
 80007f8:	480e      	ldr	r0, [pc, #56]	@ (8000834 <main+0xb8>)
 80007fa:	e9cd 5300 	strd	r5, r3, [sp]
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	4623      	mov	r3, r4
 8000802:	f001 fd53 	bl	80022ac <xTaskCreate>
  xTaskCreate(Task2, "Task2", 128, NULL, 2, &task2_handle);
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <main+0xbc>)
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	2302      	movs	r3, #2
 800080c:	490b      	ldr	r1, [pc, #44]	@ (800083c <main+0xc0>)
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	4623      	mov	r3, r4
 8000814:	480a      	ldr	r0, [pc, #40]	@ (8000840 <main+0xc4>)
 8000816:	f001 fd49 	bl	80022ac <xTaskCreate>
  vTaskStartScheduler();
 800081a:	f001 fd75 	bl	8002308 <vTaskStartScheduler>
  while (1)
 800081e:	e7fe      	b.n	800081e <main+0xa2>
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800
 800082c:	200000ac 	.word	0x200000ac
 8000830:	08003e04 	.word	0x08003e04
 8000834:	080005bd 	.word	0x080005bd
 8000838:	200000a8 	.word	0x200000a8
 800083c:	08003e0a 	.word	0x08003e0a
 8000840:	08000651 	.word	0x08000651

08000844 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1)
 8000844:	6802      	ldr	r2, [r0, #0]
 8000846:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000848:	429a      	cmp	r2, r3
 800084a:	d101      	bne.n	8000850 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800084c:	f000 b8e6 	b.w	8000a1c <HAL_IncTick>
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_MspInit+0x3c>)
 800085c:	2200      	movs	r2, #0
 800085e:	9200      	str	r2, [sp, #0]
 8000860:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000862:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000866:	6459      	str	r1, [r3, #68]	@ 0x44
 8000868:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800086a:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800086e:	9100      	str	r1, [sp, #0]
 8000870:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000876:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800087a:	6419      	str	r1, [r3, #64]	@ 0x40
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	210f      	movs	r1, #15
 8000888:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	f000 b8e9 	b.w	8000a64 <HAL_NVIC_SetPriority>
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	b088      	sub	sp, #32
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800089c:	2400      	movs	r4, #0
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <HAL_InitTick+0x7c>)
 80008a0:	9402      	str	r4, [sp, #8]
 80008a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008a4:	4d1c      	ldr	r5, [pc, #112]	@ (8000918 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a6:	f042 0201 	orr.w	r2, r2, #1
 80008aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008b4:	9302      	str	r3, [sp, #8]
{
 80008b6:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ba:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f000 fc64 	bl	8001188 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c0:	f000 fc52 	bl	8001168 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_InitTick+0x84>)
 80008c6:	602b      	str	r3, [r5, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008c8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80008cc:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <HAL_InitTick+0x88>)
 80008d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80008d4:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80008d6:	6068      	str	r0, [r5, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 80008d8:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 80008da:	612c      	str	r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	61ac      	str	r4, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 80008e0:	f000 fd7c 	bl	80013dc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80008e4:	4604      	mov	r4, r0
 80008e6:	b980      	cbnz	r0, 800090a <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008e8:	4628      	mov	r0, r5
 80008ea:	f000 fc6d 	bl	80011c8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80008ee:	4604      	mov	r4, r0
 80008f0:	b958      	cbnz	r0, 800090a <HAL_InitTick+0x72>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008f2:	2019      	movs	r0, #25
 80008f4:	f000 f8e8 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	2e0f      	cmp	r6, #15
 80008fa:	d809      	bhi.n	8000910 <HAL_InitTick+0x78>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008fc:	4622      	mov	r2, r4
 80008fe:	4631      	mov	r1, r6
 8000900:	2019      	movs	r0, #25
 8000902:	f000 f8af 	bl	8000a64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <HAL_InitTick+0x8c>)
 8000908:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800090a:	4620      	mov	r0, r4
 800090c:	b008      	add	sp, #32
 800090e:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8000910:	2401      	movs	r4, #1
 8000912:	e7fa      	b.n	800090a <HAL_InitTick+0x72>
 8000914:	40023800 	.word	0x40023800
 8000918:	200000b0 	.word	0x200000b0
 800091c:	40010000 	.word	0x40010000
 8000920:	000f4240 	.word	0x000f4240
 8000924:	20000008 	.word	0x20000008

08000928 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler>

0800092a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler>

0800092c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler>

0800092e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler>

08000930 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler>

08000932 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	4770      	bx	lr

08000934 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000934:	4801      	ldr	r0, [pc, #4]	@ (800093c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000936:	f000 bc7d 	b.w	8001234 <HAL_TIM_IRQHandler>
 800093a:	bf00      	nop
 800093c:	200000b0 	.word	0x200000b0

08000940 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <_sbrk+0x30>)
 8000942:	6811      	ldr	r1, [r2, #0]
{
 8000944:	b510      	push	{r4, lr}
 8000946:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000948:	b909      	cbnz	r1, 800094e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800094a:	490a      	ldr	r1, [pc, #40]	@ (8000974 <_sbrk+0x34>)
 800094c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	6810      	ldr	r0, [r2, #0]
 8000950:	4909      	ldr	r1, [pc, #36]	@ (8000978 <_sbrk+0x38>)
 8000952:	4c0a      	ldr	r4, [pc, #40]	@ (800097c <_sbrk+0x3c>)
 8000954:	4403      	add	r3, r0
 8000956:	1b09      	subs	r1, r1, r4
 8000958:	428b      	cmp	r3, r1
 800095a:	d906      	bls.n	800096a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800095c:	f002 fdc6 	bl	80034ec <__errno>
 8000960:	230c      	movs	r3, #12
 8000962:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000964:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000968:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800096a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800096c:	e7fc      	b.n	8000968 <_sbrk+0x28>
 800096e:	bf00      	nop
 8000970:	200000f8 	.word	0x200000f8
 8000974:	20004c30 	.word	0x20004c30
 8000978:	20020000 	.word	0x20020000
 800097c:	00000400 	.word	0x00000400

08000980 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4a03      	ldr	r2, [pc, #12]	@ (8000990 <SystemInit+0x10>)
 8000982:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000986:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800098a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000998:	f7ff fff2 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f002 fd99 	bl	80034f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fed9 	bl	800077c <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009d8:	08003e80 	.word	0x08003e80
  ldr r2, =_sbss
 80009dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009e0:	20004c2c 	.word	0x20004c2c

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_Init+0x30>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009f2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009fa:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f81b 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f7ff ff44 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff ff22 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000a14:	2000      	movs	r0, #0
 8000a16:	bd08      	pop	{r3, pc}
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a1c:	4a03      	ldr	r2, [pc, #12]	@ (8000a2c <HAL_IncTick+0x10>)
 8000a1e:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <HAL_IncTick+0x14>)
 8000a20:	6811      	ldr	r1, [r2, #0]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	440b      	add	r3, r1
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000fc 	.word	0x200000fc
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a34:	4b01      	ldr	r3, [pc, #4]	@ (8000a3c <HAL_GetTick+0x8>)
 8000a36:	6818      	ldr	r0, [r3, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200000fc 	.word	0x200000fc

08000a40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4907      	ldr	r1, [pc, #28]	@ (8000a60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a66:	b530      	push	{r4, r5, lr}
 8000a68:	68dc      	ldr	r4, [r3, #12]
 8000a6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	bf28      	it	cs
 8000a78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a80:	bf8c      	ite	hi
 8000a82:	3c03      	subhi	r4, #3
 8000a84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a86:	fa05 f303 	lsl.w	r3, r5, r3
 8000a8a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8e:	40a5      	lsls	r5, r4
 8000a90:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000a96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	bfac      	ite	ge
 8000a9e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	4a08      	ldrlt	r2, [pc, #32]	@ (8000ac4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	bfb8      	it	lt
 8000aaa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	bfaa      	itet	ge
 8000ab2:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000abc:	bd30      	pop	{r4, r5, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	e000ed14 	.word	0xe000ed14

08000ac8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	db07      	blt.n	8000adc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ace:	0941      	lsrs	r1, r0, #5
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f000 001f 	and.w	r0, r0, #31
 8000ad6:	4083      	lsls	r3, r0
 8000ad8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8000c6c <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aec:	4a5d      	ldr	r2, [pc, #372]	@ (8000c64 <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aee:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000af2:	2401      	movs	r4, #1
 8000af4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af6:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000afa:	43ac      	bics	r4, r5
 8000afc:	f040 80a3 	bne.w	8000c46 <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b00:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b02:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b04:	f005 0403 	and.w	r4, r5, #3
 8000b08:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b0c:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b10:	1e67      	subs	r7, r4, #1
 8000b12:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b14:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b18:	d834      	bhi.n	8000b84 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000b1a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b1c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b20:	68cf      	ldr	r7, [r1, #12]
 8000b22:	fa07 f708 	lsl.w	r7, r7, r8
 8000b26:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000b2a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b2c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2e:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b32:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000b36:	409f      	lsls	r7, r3
 8000b38:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b3c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b3e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b40:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b44:	688f      	ldr	r7, [r1, #8]
 8000b46:	fa07 f708 	lsl.w	r7, r7, r8
 8000b4a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000b50:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	d119      	bne.n	8000b88 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000b54:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b58:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b5c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b60:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b68:	f04f 0e0f 	mov.w	lr, #15
 8000b6c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000b70:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b74:	690f      	ldr	r7, [r1, #16]
 8000b76:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b7a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b7e:	f8ca 7020 	str.w	r7, [sl, #32]
 8000b82:	e001      	b.n	8000b88 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b84:	2c03      	cmp	r4, #3
 8000b86:	d1da      	bne.n	8000b3e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000b88:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b8a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b8e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b92:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b94:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000b98:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b9a:	d054      	beq.n	8000c46 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9c:	2400      	movs	r4, #0
 8000b9e:	9401      	str	r4, [sp, #4]
 8000ba0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000ba4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000ba8:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000bac:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000bb0:	f023 0703 	bic.w	r7, r3, #3
 8000bb4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000bb8:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000bbc:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000bc0:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bc2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc8:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bcc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bd0:	240f      	movs	r4, #15
 8000bd2:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bd6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bda:	4c23      	ldr	r4, [pc, #140]	@ (8000c68 <HAL_GPIO_Init+0x184>)
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	d039      	beq.n	8000c54 <HAL_GPIO_Init+0x170>
 8000be0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	d037      	beq.n	8000c58 <HAL_GPIO_Init+0x174>
 8000be8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000bec:	42a0      	cmp	r0, r4
 8000bee:	d035      	beq.n	8000c5c <HAL_GPIO_Init+0x178>
 8000bf0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d033      	beq.n	8000c60 <HAL_GPIO_Init+0x17c>
 8000bf8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000bfc:	42a0      	cmp	r0, r4
 8000bfe:	bf14      	ite	ne
 8000c00:	2407      	movne	r4, #7
 8000c02:	2404      	moveq	r4, #4
 8000c04:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c08:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c0c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8000c0e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c12:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c16:	bf0c      	ite	eq
 8000c18:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000c1a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8000c1c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000c1e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c20:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000c24:	bf0c      	ite	eq
 8000c26:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000c28:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8000c2a:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000c2c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c2e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c32:	bf0c      	ite	eq
 8000c34:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000c36:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8000c38:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c3c:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000c3e:	bf54      	ite	pl
 8000c40:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000c42:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000c44:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c46:	3301      	adds	r3, #1
 8000c48:	2b10      	cmp	r3, #16
 8000c4a:	f47f af51 	bne.w	8000af0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000c4e:	b003      	add	sp, #12
 8000c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c54:	2400      	movs	r4, #0
 8000c56:	e7d5      	b.n	8000c04 <HAL_GPIO_Init+0x120>
 8000c58:	2401      	movs	r4, #1
 8000c5a:	e7d3      	b.n	8000c04 <HAL_GPIO_Init+0x120>
 8000c5c:	2402      	movs	r4, #2
 8000c5e:	e7d1      	b.n	8000c04 <HAL_GPIO_Init+0x120>
 8000c60:	2403      	movs	r4, #3
 8000c62:	e7cf      	b.n	8000c04 <HAL_GPIO_Init+0x120>
 8000c64:	40013c00 	.word	0x40013c00
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c70:	b10a      	cbz	r2, 8000c76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c72:	6181      	str	r1, [r0, #24]
  }
}
 8000c74:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c76:	0409      	lsls	r1, r1, #16
 8000c78:	e7fb      	b.n	8000c72 <HAL_GPIO_WritePin+0x2>
	...

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c80:	4604      	mov	r4, r0
 8000c82:	b340      	cbz	r0, 8000cd6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c84:	6803      	ldr	r3, [r0, #0]
 8000c86:	07de      	lsls	r6, r3, #31
 8000c88:	d410      	bmi.n	8000cac <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	079d      	lsls	r5, r3, #30
 8000c8e:	d45b      	bmi.n	8000d48 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	0719      	lsls	r1, r3, #28
 8000c94:	f100 809d 	bmi.w	8000dd2 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	075a      	lsls	r2, r3, #29
 8000c9c:	f100 80bd 	bmi.w	8000e1a <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ca0:	69a3      	ldr	r3, [r4, #24]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8124 	bne.w	8000ef0 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e02c      	b.n	8000d06 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cac:	4b8d      	ldr	r3, [pc, #564]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	f002 020c 	and.w	r2, r2, #12
 8000cb4:	2a04      	cmp	r2, #4
 8000cb6:	d007      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cbe:	2a08      	cmp	r2, #8
 8000cc0:	d10b      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	0259      	lsls	r1, r3, #9
 8000cc6:	d508      	bpl.n	8000cda <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	4b86      	ldr	r3, [pc, #536]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	039a      	lsls	r2, r3, #14
 8000cce:	d5dc      	bpl.n	8000c8a <HAL_RCC_OscConfig+0xe>
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1d9      	bne.n	8000c8a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	6863      	ldr	r3, [r4, #4]
 8000cdc:	4d81      	ldr	r5, [pc, #516]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce2:	d113      	bne.n	8000d0c <HAL_RCC_OscConfig+0x90>
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cec:	f7ff fea2 	bl	8000a34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	4e7c      	ldr	r6, [pc, #496]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8000cf2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	039b      	lsls	r3, r3, #14
 8000cf8:	d4c7      	bmi.n	8000c8a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fe9b 	bl	8000a34 <HAL_GetTick>
 8000cfe:	1b40      	subs	r0, r0, r5
 8000d00:	2864      	cmp	r0, #100	@ 0x64
 8000d02:	d9f7      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000d04:	2003      	movs	r0, #3
}
 8000d06:	b002      	add	sp, #8
 8000d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d10:	d104      	bne.n	8000d1c <HAL_RCC_OscConfig+0xa0>
 8000d12:	682b      	ldr	r3, [r5, #0]
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d18:	602b      	str	r3, [r5, #0]
 8000d1a:	e7e3      	b.n	8000ce4 <HAL_RCC_OscConfig+0x68>
 8000d1c:	682a      	ldr	r2, [r5, #0]
 8000d1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d22:	602a      	str	r2, [r5, #0]
 8000d24:	682a      	ldr	r2, [r5, #0]
 8000d26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d2a:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1dd      	bne.n	8000cec <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8000d30:	f7ff fe80 	bl	8000a34 <HAL_GetTick>
 8000d34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	682b      	ldr	r3, [r5, #0]
 8000d38:	039f      	lsls	r7, r3, #14
 8000d3a:	d5a6      	bpl.n	8000c8a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fe7a 	bl	8000a34 <HAL_GetTick>
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	2864      	cmp	r0, #100	@ 0x64
 8000d44:	d9f7      	bls.n	8000d36 <HAL_RCC_OscConfig+0xba>
 8000d46:	e7dd      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d48:	4b66      	ldr	r3, [pc, #408]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	f012 0f0c 	tst.w	r2, #12
 8000d50:	d007      	beq.n	8000d62 <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d58:	2a08      	cmp	r2, #8
 8000d5a:	d111      	bne.n	8000d80 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	025d      	lsls	r5, r3, #9
 8000d60:	d40e      	bmi.n	8000d80 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	4a60      	ldr	r2, [pc, #384]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000d64:	6813      	ldr	r3, [r2, #0]
 8000d66:	0799      	lsls	r1, r3, #30
 8000d68:	d502      	bpl.n	8000d70 <HAL_RCC_OscConfig+0xf4>
 8000d6a:	68e3      	ldr	r3, [r4, #12]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d1b2      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d70:	6813      	ldr	r3, [r2, #0]
 8000d72:	6921      	ldr	r1, [r4, #16]
 8000d74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000d78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d7c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7e:	e787      	b.n	8000c90 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d80:	68e2      	ldr	r2, [r4, #12]
 8000d82:	4b59      	ldr	r3, [pc, #356]	@ (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	b1b2      	cbz	r2, 8000db4 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fe53 	bl	8000a34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8e:	4d55      	ldr	r5, [pc, #340]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8000d90:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d92:	682b      	ldr	r3, [r5, #0]
 8000d94:	079b      	lsls	r3, r3, #30
 8000d96:	d507      	bpl.n	8000da8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	6922      	ldr	r2, [r4, #16]
 8000d9c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000da0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000da4:	602b      	str	r3, [r5, #0]
 8000da6:	e773      	b.n	8000c90 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fe44 	bl	8000a34 <HAL_GetTick>
 8000dac:	1b80      	subs	r0, r0, r6
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9ef      	bls.n	8000d92 <HAL_RCC_OscConfig+0x116>
 8000db2:	e7a7      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000db4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fe3d 	bl	8000a34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	4e4a      	ldr	r6, [pc, #296]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8000dbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	6833      	ldr	r3, [r6, #0]
 8000dc0:	079f      	lsls	r7, r3, #30
 8000dc2:	f57f af65 	bpl.w	8000c90 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fe35 	bl	8000a34 <HAL_GetTick>
 8000dca:	1b40      	subs	r0, r0, r5
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f6      	bls.n	8000dbe <HAL_RCC_OscConfig+0x142>
 8000dd0:	e798      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000dd2:	6962      	ldr	r2, [r4, #20]
 8000dd4:	4b44      	ldr	r3, [pc, #272]	@ (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	b182      	cbz	r2, 8000dfa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000dde:	f7ff fe29 	bl	8000a34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4e40      	ldr	r6, [pc, #256]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8000de4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000de8:	079b      	lsls	r3, r3, #30
 8000dea:	f53f af55 	bmi.w	8000c98 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dee:	f7ff fe21 	bl	8000a34 <HAL_GetTick>
 8000df2:	1b40      	subs	r0, r0, r5
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d9f6      	bls.n	8000de6 <HAL_RCC_OscConfig+0x16a>
 8000df8:	e784      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000dfa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000dfe:	f7ff fe19 	bl	8000a34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e02:	4e38      	ldr	r6, [pc, #224]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8000e04:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e06:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000e08:	079f      	lsls	r7, r3, #30
 8000e0a:	f57f af45 	bpl.w	8000c98 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fe11 	bl	8000a34 <HAL_GetTick>
 8000e12:	1b40      	subs	r0, r0, r5
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d9f6      	bls.n	8000e06 <HAL_RCC_OscConfig+0x18a>
 8000e18:	e774      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1e:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8000e22:	d128      	bne.n	8000e76 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	9201      	str	r2, [sp, #4]
 8000e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e28:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e38:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	4d2c      	ldr	r5, [pc, #176]	@ (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	05d8      	lsls	r0, r3, #23
 8000e40:	d51b      	bpl.n	8000e7a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e42:	68a3      	ldr	r3, [r4, #8]
 8000e44:	4d27      	ldr	r5, [pc, #156]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d127      	bne.n	8000e9a <HAL_RCC_OscConfig+0x21e>
 8000e4a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8000e52:	f7ff fdef 	bl	8000a34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e56:	4e23      	ldr	r6, [pc, #140]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8000e58:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000e60:	079a      	lsls	r2, r3, #30
 8000e62:	d539      	bpl.n	8000ed8 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 8000e64:	2f00      	cmp	r7, #0
 8000e66:	f43f af1b 	beq.w	8000ca0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee4 <HAL_RCC_OscConfig+0x268>)
 8000e6c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e74:	e714      	b.n	8000ca0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000e76:	2700      	movs	r7, #0
 8000e78:	e7df      	b.n	8000e3a <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e80:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e82:	f7ff fdd7 	bl	8000a34 <HAL_GetTick>
 8000e86:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	05d9      	lsls	r1, r3, #23
 8000e8c:	d4d9      	bmi.n	8000e42 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8e:	f7ff fdd1 	bl	8000a34 <HAL_GetTick>
 8000e92:	1b80      	subs	r0, r0, r6
 8000e94:	2802      	cmp	r0, #2
 8000e96:	d9f7      	bls.n	8000e88 <HAL_RCC_OscConfig+0x20c>
 8000e98:	e734      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d104      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x22c>
 8000e9e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	672b      	str	r3, [r5, #112]	@ 0x70
 8000ea6:	e7d0      	b.n	8000e4a <HAL_RCC_OscConfig+0x1ce>
 8000ea8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	672a      	str	r2, [r5, #112]	@ 0x70
 8000eb0:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8000eb2:	f022 0204 	bic.w	r2, r2, #4
 8000eb6:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1ca      	bne.n	8000e52 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fdba 	bl	8000a34 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000ec4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8000ec8:	079b      	lsls	r3, r3, #30
 8000eca:	d5cb      	bpl.n	8000e64 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fdb2 	bl	8000a34 <HAL_GetTick>
 8000ed0:	1b80      	subs	r0, r0, r6
 8000ed2:	4540      	cmp	r0, r8
 8000ed4:	d9f7      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x24a>
 8000ed6:	e715      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fdac 	bl	8000a34 <HAL_GetTick>
 8000edc:	1b40      	subs	r0, r0, r5
 8000ede:	4540      	cmp	r0, r8
 8000ee0:	d9bd      	bls.n	8000e5e <HAL_RCC_OscConfig+0x1e2>
 8000ee2:	e70f      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	42470000 	.word	0x42470000
 8000eec:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ef0:	4d37      	ldr	r5, [pc, #220]	@ (8000fd0 <HAL_RCC_OscConfig+0x354>)
 8000ef2:	68aa      	ldr	r2, [r5, #8]
 8000ef4:	f002 020c 	and.w	r2, r2, #12
 8000ef8:	2a08      	cmp	r2, #8
 8000efa:	d03e      	beq.n	8000f7a <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <HAL_RCC_OscConfig+0x358>)
 8000f00:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8000f04:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f06:	d12b      	bne.n	8000f60 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8000f08:	f7ff fd94 	bl	8000a34 <HAL_GetTick>
 8000f0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	0199      	lsls	r1, r3, #6
 8000f12:	d41f      	bmi.n	8000f54 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f14:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000f1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000f22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f28:	0852      	lsrs	r2, r2, #1
 8000f2a:	3a01      	subs	r2, #1
 8000f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f30:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f34:	4d26      	ldr	r5, [pc, #152]	@ (8000fd0 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8000f36:	2201      	movs	r2, #1
 8000f38:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fd7b 	bl	8000a34 <HAL_GetTick>
 8000f3e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	019a      	lsls	r2, r3, #6
 8000f44:	f53f aeb0 	bmi.w	8000ca8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f48:	f7ff fd74 	bl	8000a34 <HAL_GetTick>
 8000f4c:	1b00      	subs	r0, r0, r4
 8000f4e:	2802      	cmp	r0, #2
 8000f50:	d9f6      	bls.n	8000f40 <HAL_RCC_OscConfig+0x2c4>
 8000f52:	e6d7      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f54:	f7ff fd6e 	bl	8000a34 <HAL_GetTick>
 8000f58:	1b80      	subs	r0, r0, r6
 8000f5a:	2802      	cmp	r0, #2
 8000f5c:	d9d7      	bls.n	8000f0e <HAL_RCC_OscConfig+0x292>
 8000f5e:	e6d1      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000f60:	f7ff fd68 	bl	8000a34 <HAL_GetTick>
 8000f64:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	f57f ae9d 	bpl.w	8000ca8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fd61 	bl	8000a34 <HAL_GetTick>
 8000f72:	1b00      	subs	r0, r0, r4
 8000f74:	2802      	cmp	r0, #2
 8000f76:	d9f6      	bls.n	8000f66 <HAL_RCC_OscConfig+0x2ea>
 8000f78:	e6c4      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f43f aeab 	beq.w	8000cd6 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8000f80:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f82:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f84:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f88:	4291      	cmp	r1, r2
 8000f8a:	f47f aea4 	bne.w	8000cd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f8e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f90:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f94:	428a      	cmp	r2, r1
 8000f96:	f47f ae9e 	bne.w	8000cd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f9c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000fa6:	f47f ae96 	bne.w	8000cd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000faa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000fac:	0852      	lsrs	r2, r2, #1
 8000fae:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000fb2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fb4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000fb8:	f47f ae8d 	bne.w	8000cd6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fbc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000fbe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fc2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000fc6:	bf14      	ite	ne
 8000fc8:	2001      	movne	r0, #1
 8000fca:	2000      	moveq	r0, #0
 8000fcc:	e69b      	b.n	8000d06 <HAL_RCC_OscConfig+0x8a>
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	42470000 	.word	0x42470000

08000fd8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fd8:	4913      	ldr	r1, [pc, #76]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000fda:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fdc:	688b      	ldr	r3, [r1, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d01c      	beq.n	8001020 <HAL_RCC_GetSysClockFreq+0x48>
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fea:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fec:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fee:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ff0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff4:	bf14      	ite	ne
 8000ff6:	480d      	ldrne	r0, [pc, #52]	@ (800102c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff8:	480d      	ldreq	r0, [pc, #52]	@ (8001030 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ffa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ffe:	bf18      	it	ne
 8001000:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001002:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001006:	fba1 0100 	umull	r0, r1, r1, r0
 800100a:	f7ff f941 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x50>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001016:	3301      	adds	r3, #1
 8001018:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800101a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800101e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <HAL_RCC_GetSysClockFreq+0x54>)
 8001022:	e7fc      	b.n	800101e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001026:	e7fa      	b.n	800101e <HAL_RCC_GetSysClockFreq+0x46>
 8001028:	40023800 	.word	0x40023800
 800102c:	017d7840 	.word	0x017d7840
 8001030:	00f42400 	.word	0x00f42400

08001034 <HAL_RCC_ClockConfig>:
{
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001038:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800103a:	4604      	mov	r4, r0
 800103c:	b910      	cbnz	r0, 8001044 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
}
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001044:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <HAL_RCC_ClockConfig+0x120>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	f002 0207 	and.w	r2, r2, #7
 800104c:	428a      	cmp	r2, r1
 800104e:	d328      	bcc.n	80010a2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	6821      	ldr	r1, [r4, #0]
 8001052:	078f      	lsls	r7, r1, #30
 8001054:	d42d      	bmi.n	80010b2 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	07c8      	lsls	r0, r1, #31
 8001058:	d440      	bmi.n	80010dc <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800105a:	4b3e      	ldr	r3, [pc, #248]	@ (8001154 <HAL_RCC_ClockConfig+0x120>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f002 0207 	and.w	r2, r2, #7
 8001062:	42aa      	cmp	r2, r5
 8001064:	d865      	bhi.n	8001132 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	0751      	lsls	r1, r2, #29
 800106a:	d46b      	bmi.n	8001144 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	0713      	lsls	r3, r2, #28
 800106e:	d507      	bpl.n	8001080 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001070:	4a39      	ldr	r2, [pc, #228]	@ (8001158 <HAL_RCC_ClockConfig+0x124>)
 8001072:	6921      	ldr	r1, [r4, #16]
 8001074:	6893      	ldr	r3, [r2, #8]
 8001076:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800107a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800107e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001080:	f7ff ffaa 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8001084:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <HAL_RCC_ClockConfig+0x124>)
 8001086:	4a35      	ldr	r2, [pc, #212]	@ (800115c <HAL_RCC_ClockConfig+0x128>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	40d8      	lsrs	r0, r3
 8001092:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <HAL_RCC_ClockConfig+0x12c>)
 8001094:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001096:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <HAL_RCC_ClockConfig+0x130>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f7ff fbfd 	bl	8000898 <HAL_InitTick>
  return HAL_OK;
 800109e:	2000      	movs	r0, #0
 80010a0:	e7ce      	b.n	8001040 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	428b      	cmp	r3, r1
 80010ae:	d1c6      	bne.n	800103e <HAL_RCC_ClockConfig+0xa>
 80010b0:	e7ce      	b.n	8001050 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b2:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <HAL_RCC_ClockConfig+0x124>)
 80010b4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b8:	bf1e      	ittt	ne
 80010ba:	689a      	ldrne	r2, [r3, #8]
 80010bc:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 80010c0:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c4:	bf42      	ittt	mi
 80010c6:	689a      	ldrmi	r2, [r3, #8]
 80010c8:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 80010cc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	68a0      	ldr	r0, [r4, #8]
 80010d2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80010d6:	4302      	orrs	r2, r0
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	e7bc      	b.n	8001056 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010dc:	6862      	ldr	r2, [r4, #4]
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_RCC_ClockConfig+0x124>)
 80010e0:	2a01      	cmp	r2, #1
 80010e2:	d11c      	bne.n	800111e <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	d0a8      	beq.n	800103e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ec:	4e1a      	ldr	r6, [pc, #104]	@ (8001158 <HAL_RCC_ClockConfig+0x124>)
 80010ee:	68b3      	ldr	r3, [r6, #8]
 80010f0:	f023 0303 	bic.w	r3, r3, #3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010f8:	f7ff fc9c 	bl	8000a34 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001100:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	68b3      	ldr	r3, [r6, #8]
 8001104:	6862      	ldr	r2, [r4, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800110e:	d0a4      	beq.n	800105a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001110:	f7ff fc90 	bl	8000a34 <HAL_GetTick>
 8001114:	1bc0      	subs	r0, r0, r7
 8001116:	4540      	cmp	r0, r8
 8001118:	d9f3      	bls.n	8001102 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800111a:	2003      	movs	r0, #3
 800111c:	e790      	b.n	8001040 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111e:	1e91      	subs	r1, r2, #2
 8001120:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001122:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001124:	d802      	bhi.n	800112c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800112a:	e7de      	b.n	80010ea <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	f013 0f02 	tst.w	r3, #2
 8001130:	e7db      	b.n	80010ea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	b2ea      	uxtb	r2, r5
 8001134:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	42ab      	cmp	r3, r5
 800113e:	f47f af7e 	bne.w	800103e <HAL_RCC_ClockConfig+0xa>
 8001142:	e790      	b.n	8001066 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001144:	4904      	ldr	r1, [pc, #16]	@ (8001158 <HAL_RCC_ClockConfig+0x124>)
 8001146:	68e0      	ldr	r0, [r4, #12]
 8001148:	688b      	ldr	r3, [r1, #8]
 800114a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800114e:	4303      	orrs	r3, r0
 8001150:	608b      	str	r3, [r1, #8]
 8001152:	e78b      	b.n	800106c <HAL_RCC_ClockConfig+0x38>
 8001154:	40023c00 	.word	0x40023c00
 8001158:	40023800 	.word	0x40023800
 800115c:	08003e5d 	.word	0x08003e5d
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <HAL_RCC_GetPCLK2Freq+0x14>)
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_RCC_GetPCLK2Freq+0x18>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001172:	5cd3      	ldrb	r3, [r2, r3]
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001176:	6810      	ldr	r0, [r2, #0]
}
 8001178:	40d8      	lsrs	r0, r3
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800
 8001180:	08003e55 	.word	0x08003e55
 8001184:	20000000 	.word	0x20000000

08001188 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001188:	230f      	movs	r3, #15
 800118a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_RCC_GetClockConfig+0x34>)
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800119c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80011a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80011ae:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_RCC_GetClockConfig+0x38>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	600b      	str	r3, [r1, #0]
}
 80011ba:	4770      	bx	lr
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011c8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d128      	bne.n	8001222 <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	f042 0201 	orr.w	r2, r2, #1
 80011de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011e0:	4a11      	ldr	r2, [pc, #68]	@ (8001228 <HAL_TIM_Base_Start_IT+0x60>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d012      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x44>
 80011e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ea:	d00f      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x44>
 80011ec:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00b      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x44>
 80011f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x44>
 80011fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001200:	4293      	cmp	r3, r2
 8001202:	d003      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x44>
 8001204:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001208:	4293      	cmp	r3, r2
 800120a:	d104      	bne.n	8001216 <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001212:	2a06      	cmp	r2, #6
 8001214:	d003      	beq.n	800121e <HAL_TIM_Base_Start_IT+0x56>
    {
      __HAL_TIM_ENABLE(htim);
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2000      	movs	r0, #0
 8001220:	4770      	bx	lr
    return HAL_ERROR;
 8001222:	2001      	movs	r0, #1
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40010000 	.word	0x40010000

0800122c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800122c:	4770      	bx	lr

0800122e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800122e:	4770      	bx	lr

08001230 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001230:	4770      	bx	lr

08001232 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001232:	4770      	bx	lr

08001234 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8001234:	6803      	ldr	r3, [r0, #0]
{
 8001236:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001238:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800123a:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800123c:	07b1      	lsls	r1, r6, #30
{
 800123e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001240:	d50d      	bpl.n	800125e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001242:	07aa      	lsls	r2, r5, #30
 8001244:	d50b      	bpl.n	800125e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001246:	f06f 0202 	mvn.w	r2, #2
 800124a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800124c:	2201      	movs	r2, #1
 800124e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	079b      	lsls	r3, r3, #30
 8001254:	d069      	beq.n	800132a <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8001256:	f7ff ffea 	bl	800122e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800125a:	2300      	movs	r3, #0
 800125c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800125e:	0771      	lsls	r1, r6, #29
 8001260:	d510      	bpl.n	8001284 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001262:	076a      	lsls	r2, r5, #29
 8001264:	d50e      	bpl.n	8001284 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	f06f 0204 	mvn.w	r2, #4
 800126c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800126e:	2202      	movs	r2, #2
 8001270:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001278:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800127a:	d05c      	beq.n	8001336 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800127c:	f7ff ffd7 	bl	800122e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001280:	2300      	movs	r3, #0
 8001282:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001284:	0733      	lsls	r3, r6, #28
 8001286:	d50f      	bpl.n	80012a8 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001288:	0728      	lsls	r0, r5, #28
 800128a:	d50d      	bpl.n	80012a8 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f06f 0208 	mvn.w	r2, #8
 8001292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001294:	2204      	movs	r2, #4
 8001296:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800129c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800129e:	d050      	beq.n	8001342 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80012a0:	f7ff ffc5 	bl	800122e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012a4:	2300      	movs	r3, #0
 80012a6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80012a8:	06f2      	lsls	r2, r6, #27
 80012aa:	d510      	bpl.n	80012ce <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80012ac:	06eb      	lsls	r3, r5, #27
 80012ae:	d50e      	bpl.n	80012ce <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	f06f 0210 	mvn.w	r2, #16
 80012b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012b8:	2208      	movs	r2, #8
 80012ba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80012c2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012c4:	d043      	beq.n	800134e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012c6:	f7ff ffb2 	bl	800122e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ca:	2300      	movs	r3, #0
 80012cc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80012ce:	07f0      	lsls	r0, r6, #31
 80012d0:	d508      	bpl.n	80012e4 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80012d2:	07e9      	lsls	r1, r5, #31
 80012d4:	d506      	bpl.n	80012e4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	f06f 0201 	mvn.w	r2, #1
 80012dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fab0 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80012e4:	0632      	lsls	r2, r6, #24
 80012e6:	d508      	bpl.n	80012fa <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80012e8:	062b      	lsls	r3, r5, #24
 80012ea:	d506      	bpl.n	80012fa <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80012f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012f4:	4620      	mov	r0, r4
 80012f6:	f000 f89e 	bl	8001436 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80012fa:	0670      	lsls	r0, r6, #25
 80012fc:	d508      	bpl.n	8001310 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80012fe:	0669      	lsls	r1, r5, #25
 8001300:	d506      	bpl.n	8001310 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001308:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff ff91 	bl	8001232 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001310:	06b2      	lsls	r2, r6, #26
 8001312:	d522      	bpl.n	800135a <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001314:	06ab      	lsls	r3, r5, #26
 8001316:	d520      	bpl.n	800135a <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800131e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001320:	611a      	str	r2, [r3, #16]
}
 8001322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001326:	f000 b885 	b.w	8001434 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800132a:	f7ff ff7f 	bl	800122c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff ff7e 	bl	8001230 <HAL_TIM_PWM_PulseFinishedCallback>
 8001334:	e791      	b.n	800125a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001336:	f7ff ff79 	bl	800122c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff ff78 	bl	8001230 <HAL_TIM_PWM_PulseFinishedCallback>
 8001340:	e79e      	b.n	8001280 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001342:	f7ff ff73 	bl	800122c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff ff72 	bl	8001230 <HAL_TIM_PWM_PulseFinishedCallback>
 800134c:	e7aa      	b.n	80012a4 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800134e:	f7ff ff6d 	bl	800122c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff ff6c 	bl	8001230 <HAL_TIM_PWM_PulseFinishedCallback>
 8001358:	e7b7      	b.n	80012ca <HAL_TIM_IRQHandler+0x96>
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}

0800135c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800135c:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 800135e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001360:	4290      	cmp	r0, r2
 8001362:	d00e      	beq.n	8001382 <TIM_Base_SetConfig+0x26>
 8001364:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001368:	d00b      	beq.n	8001382 <TIM_Base_SetConfig+0x26>
 800136a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800136e:	4290      	cmp	r0, r2
 8001370:	d007      	beq.n	8001382 <TIM_Base_SetConfig+0x26>
 8001372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001376:	4290      	cmp	r0, r2
 8001378:	d003      	beq.n	8001382 <TIM_Base_SetConfig+0x26>
 800137a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800137e:	4290      	cmp	r0, r2
 8001380:	d108      	bne.n	8001394 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001382:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001388:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800138a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800138c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001390:	4313      	orrs	r3, r2
 8001392:	e00a      	b.n	80013aa <TIM_Base_SetConfig+0x4e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001394:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <TIM_Base_SetConfig+0x7c>)
 8001396:	4290      	cmp	r0, r2
 8001398:	d0f7      	beq.n	800138a <TIM_Base_SetConfig+0x2e>
 800139a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800139e:	4290      	cmp	r0, r2
 80013a0:	d0f3      	beq.n	800138a <TIM_Base_SetConfig+0x2e>
 80013a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d0ef      	beq.n	800138a <TIM_Base_SetConfig+0x2e>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013aa:	694a      	ldr	r2, [r1, #20]
 80013ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013b0:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013b2:	688a      	ldr	r2, [r1, #8]
 80013b4:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013b6:	680a      	ldr	r2, [r1, #0]
 80013b8:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013ba:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <TIM_Base_SetConfig+0x78>)
 80013bc:	4290      	cmp	r0, r2
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013be:	bf04      	itt	eq
 80013c0:	690a      	ldreq	r2, [r1, #16]
 80013c2:	6302      	streq	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	f042 0204 	orr.w	r2, r2, #4
 80013ca:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013cc:	2201      	movs	r2, #1
 80013ce:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 80013d0:	6003      	str	r3, [r0, #0]
}
 80013d2:	4770      	bx	lr
 80013d4:	40010000 	.word	0x40010000
 80013d8:	40014000 	.word	0x40014000

080013dc <HAL_TIM_Base_Init>:
{
 80013dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80013de:	4604      	mov	r4, r0
 80013e0:	b330      	cbz	r0, 8001430 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013e2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80013e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80013ea:	b91b      	cbnz	r3, 80013f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80013ec:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80013f0:	f7ff fee8 	bl	80011c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80013f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013fc:	1d21      	adds	r1, r4, #4
 80013fe:	f7ff ffad 	bl	800135c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001402:	2301      	movs	r3, #1
 8001404:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8001408:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800140a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800140e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001412:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001416:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800141a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800141e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001422:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001426:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800142a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800142e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
 8001432:	e7fc      	b.n	800142e <HAL_TIM_Base_Init+0x52>

08001434 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8001434:	4770      	bx	lr

08001436 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001438:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800143a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800143e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001440:	f001 fa16 	bl	8002870 <xTaskGetSchedulerState>
 8001444:	2801      	cmp	r0, #1
 8001446:	d003      	beq.n	8001450 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8001448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800144c:	f001 bdf2 	b.w	8003034 <xPortSysTickHandler>
}
 8001450:	bd08      	pop	{r3, pc}
	...

08001454 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001454:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001458:	b92b      	cbnz	r3, 8001466 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <osKernelInitialize+0x20>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	b928      	cbnz	r0, 800146c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001464:	4770      	bx	lr
    stat = osErrorISR;
 8001466:	f06f 0005 	mvn.w	r0, #5
 800146a:	4770      	bx	lr
    } else {
      stat = osError;
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000850 	.word	0x20000850

08001478 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <vApplicationGetIdleTaskMemory+0x10>)
 800147a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <vApplicationGetIdleTaskMemory+0x14>)
 800147e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200007a8 	.word	0x200007a8
 800148c:	200005a8 	.word	0x200005a8

08001490 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <vApplicationGetTimerTaskMemory+0x10>)
 8001492:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <vApplicationGetTimerTaskMemory+0x14>)
 8001496:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800149c:	6013      	str	r3, [r2, #0]
}
 800149e:	4770      	bx	lr
 80014a0:	20000500 	.word	0x20000500
 80014a4:	20000100 	.word	0x20000100

080014a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014bc:	4770      	bx	lr

080014be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014c2:	4770      	bx	lr

080014c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80014c4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014c6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014cc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014ce:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80014d0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80014d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014d4:	3301      	adds	r3, #1
 80014d6:	6003      	str	r3, [r0, #0]
}
 80014d8:	4770      	bx	lr

080014da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014da:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014dc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014de:	1c63      	adds	r3, r4, #1
 80014e0:	d10a      	bne.n	80014f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014e2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014e8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014ea:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80014ec:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80014ee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80014f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014f2:	3301      	adds	r3, #1
 80014f4:	6003      	str	r3, [r0, #0]
}
 80014f6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80014f8:	f100 0208 	add.w	r2, r0, #8
 80014fc:	4613      	mov	r3, r2
 80014fe:	6852      	ldr	r2, [r2, #4]
 8001500:	6815      	ldr	r5, [r2, #0]
 8001502:	42a5      	cmp	r5, r4
 8001504:	d9fa      	bls.n	80014fc <vListInsert+0x22>
 8001506:	e7ed      	b.n	80014e4 <vListInsert+0xa>

08001508 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001508:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800150c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800150e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001510:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001516:	bf08      	it	eq
 8001518:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800151a:	2200      	movs	r2, #0
 800151c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	3a01      	subs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001524:	6818      	ldr	r0, [r3, #0]
}
 8001526:	4770      	bx	lr

08001528 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001528:	b510      	push	{r4, lr}
 800152a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800152c:	f001 fd1a 	bl	8002f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001530:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001532:	f001 fd37 	bl	8002fa4 <vPortExitCritical>

	return xReturn;
}
 8001536:	fab4 f084 	clz	r0, r4
 800153a:	0940      	lsrs	r0, r0, #5
 800153c:	bd10      	pop	{r4, pc}

0800153e <prvCopyDataToQueue>:
{
 800153e:	b570      	push	{r4, r5, r6, lr}
 8001540:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001542:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001544:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8001546:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001548:	b942      	cbnz	r2, 800155c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800154a:	6806      	ldr	r6, [r0, #0]
 800154c:	b99e      	cbnz	r6, 8001576 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800154e:	6880      	ldr	r0, [r0, #8]
 8001550:	f001 f99e 	bl	8002890 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001554:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001556:	3501      	adds	r5, #1
 8001558:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800155a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800155c:	b96e      	cbnz	r6, 800157a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800155e:	6840      	ldr	r0, [r0, #4]
 8001560:	f001 fff0 	bl	8003544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001568:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800156a:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800156c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800156e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001570:	bf24      	itt	cs
 8001572:	6823      	ldrcs	r3, [r4, #0]
 8001574:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001576:	2000      	movs	r0, #0
 8001578:	e7ed      	b.n	8001556 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800157a:	68c0      	ldr	r0, [r0, #12]
 800157c:	f001 ffe2 	bl	8003544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001580:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001582:	68e3      	ldr	r3, [r4, #12]
 8001584:	4251      	negs	r1, r2
 8001586:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001588:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800158a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800158c:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800158e:	bf3e      	ittt	cc
 8001590:	68a3      	ldrcc	r3, [r4, #8]
 8001592:	185b      	addcc	r3, r3, r1
 8001594:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001596:	2e02      	cmp	r6, #2
 8001598:	d1ed      	bne.n	8001576 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800159a:	b10d      	cbz	r5, 80015a0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800159c:	3d01      	subs	r5, #1
 800159e:	e7ea      	b.n	8001576 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80015a0:	4628      	mov	r0, r5
 80015a2:	e7d8      	b.n	8001556 <prvCopyDataToQueue+0x18>

080015a4 <prvCopyDataFromQueue>:
{
 80015a4:	4603      	mov	r3, r0
 80015a6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80015a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80015aa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80015ac:	b16a      	cbz	r2, 80015ca <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015ae:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80015b0:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015b2:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80015b4:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80015b6:	bf28      	it	cs
 80015b8:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015ba:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80015bc:	bf28      	it	cs
 80015be:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015c0:	68d9      	ldr	r1, [r3, #12]
}
 80015c2:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015c6:	f001 bfbd 	b.w	8003544 <memcpy>
}
 80015ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <prvUnlockQueue>:
{
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80015d4:	f001 fcc6 	bl	8002f64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80015d8:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015dc:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80015e0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80015e2:	2d00      	cmp	r5, #0
 80015e4:	dd01      	ble.n	80015ea <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80015e8:	b9b3      	cbnz	r3, 8001618 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 80015ea:	23ff      	movs	r3, #255	@ 0xff
 80015ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80015f0:	f001 fcd8 	bl	8002fa4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80015f4:	f001 fcb6 	bl	8002f64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80015f8:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015fc:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001600:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001602:	2d00      	cmp	r5, #0
 8001604:	dd01      	ble.n	800160a <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	b97b      	cbnz	r3, 800162a <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800160a:	23ff      	movs	r3, #255	@ 0xff
 800160c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8001610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001614:	f001 bcc6 	b.w	8002fa4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001618:	4630      	mov	r0, r6
 800161a:	f001 f879 	bl	8002710 <xTaskRemoveFromEventList>
 800161e:	b108      	cbz	r0, 8001624 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8001620:	f001 f91a 	bl	8002858 <vTaskMissedYield>
			--cTxLock;
 8001624:	3d01      	subs	r5, #1
 8001626:	b26d      	sxtb	r5, r5
 8001628:	e7db      	b.n	80015e2 <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800162a:	4630      	mov	r0, r6
 800162c:	f001 f870 	bl	8002710 <xTaskRemoveFromEventList>
 8001630:	b108      	cbz	r0, 8001636 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8001632:	f001 f911 	bl	8002858 <vTaskMissedYield>
				--cRxLock;
 8001636:	3d01      	subs	r5, #1
 8001638:	b26d      	sxtb	r5, r5
 800163a:	e7e2      	b.n	8001602 <prvUnlockQueue+0x32>

0800163c <xQueueGenericReset>:
{
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001640:	4604      	mov	r4, r0
 8001642:	b940      	cbnz	r0, 8001656 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	e7fe      	b.n	8001654 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001656:	f001 fc85 	bl	8002f64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800165a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800165e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001660:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001662:	434b      	muls	r3, r1
 8001664:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001666:	1a5b      	subs	r3, r3, r1
 8001668:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800166a:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800166c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800166e:	2000      	movs	r0, #0
 8001670:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001672:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001674:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001678:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800167c:	b9a5      	cbnz	r5, 80016a8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	b173      	cbz	r3, 80016a0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001682:	f104 0010 	add.w	r0, r4, #16
 8001686:	f001 f843 	bl	8002710 <xTaskRemoveFromEventList>
 800168a:	b148      	cbz	r0, 80016a0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800168c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001694:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80016a0:	f001 fc80 	bl	8002fa4 <vPortExitCritical>
}
 80016a4:	2001      	movs	r0, #1
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016a8:	f104 0010 	add.w	r0, r4, #16
 80016ac:	f7ff fefc 	bl	80014a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80016b4:	f7ff fef8 	bl	80014a8 <vListInitialise>
 80016b8:	e7f2      	b.n	80016a0 <xQueueGenericReset+0x64>

080016ba <xQueueGenericCreateStatic>:
	{
 80016ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016bc:	460d      	mov	r5, r1
 80016be:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80016c0:	b940      	cbnz	r0, 80016d4 <xQueueGenericCreateStatic+0x1a>
 80016c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	e7fe      	b.n	80016d2 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80016d4:	b943      	cbnz	r3, 80016e8 <xQueueGenericCreateStatic+0x2e>
 80016d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016da:	f383 8811 	msr	BASEPRI, r3
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f3bf 8f4f 	dsb	sy
 80016e6:	e7fe      	b.n	80016e6 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80016e8:	b14a      	cbz	r2, 80016fe <xQueueGenericCreateStatic+0x44>
 80016ea:	b991      	cbnz	r1, 8001712 <xQueueGenericCreateStatic+0x58>
 80016ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016f0:	f383 8811 	msr	BASEPRI, r3
 80016f4:	f3bf 8f6f 	isb	sy
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	e7fe      	b.n	80016fc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80016fe:	b141      	cbz	r1, 8001712 <xQueueGenericCreateStatic+0x58>
 8001700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001704:	f383 8811 	msr	BASEPRI, r3
 8001708:	f3bf 8f6f 	isb	sy
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	e7fe      	b.n	8001710 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001712:	2350      	movs	r3, #80	@ 0x50
 8001714:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	2b50      	cmp	r3, #80	@ 0x50
 800171a:	d008      	beq.n	800172e <xQueueGenericCreateStatic+0x74>
 800171c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	e7fe      	b.n	800172c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800172e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001730:	2d00      	cmp	r5, #0
 8001732:	bf08      	it	eq
 8001734:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8001736:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800173a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 800173e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001740:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001742:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001744:	f7ff ff7a 	bl	800163c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001748:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800174c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8001750:	4620      	mov	r0, r4
 8001752:	b003      	add	sp, #12
 8001754:	bd30      	pop	{r4, r5, pc}

08001756 <xQueueGenericSend>:
{
 8001756:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800175a:	460f      	mov	r7, r1
 800175c:	9201      	str	r2, [sp, #4]
 800175e:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8001760:	4604      	mov	r4, r0
 8001762:	b940      	cbnz	r0, 8001776 <xQueueGenericSend+0x20>
 8001764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	e7fe      	b.n	8001774 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001776:	b951      	cbnz	r1, 800178e <xQueueGenericSend+0x38>
 8001778:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800177a:	b143      	cbz	r3, 800178e <xQueueGenericSend+0x38>
 800177c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	e7fe      	b.n	800178c <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800178e:	2e02      	cmp	r6, #2
 8001790:	d10b      	bne.n	80017aa <xQueueGenericSend+0x54>
 8001792:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001794:	2b01      	cmp	r3, #1
 8001796:	d008      	beq.n	80017aa <xQueueGenericSend+0x54>
 8001798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	f3bf 8f6f 	isb	sy
 80017a4:	f3bf 8f4f 	dsb	sy
 80017a8:	e7fe      	b.n	80017a8 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017aa:	f001 f861 	bl	8002870 <xTaskGetSchedulerState>
 80017ae:	4605      	mov	r5, r0
 80017b0:	b320      	cbz	r0, 80017fc <xQueueGenericSend+0xa6>
 80017b2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80017b4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80017b8:	f001 fbd4 	bl	8002f64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80017bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80017be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d227      	bcs.n	8001814 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017c4:	4632      	mov	r2, r6
 80017c6:	4639      	mov	r1, r7
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff feb8 	bl	800153e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80017d0:	b11b      	cbz	r3, 80017da <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017d2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80017d6:	f000 ff9b 	bl	8002710 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80017da:	b148      	cbz	r0, 80017f0 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 80017dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80017e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80017f0:	f001 fbd8 	bl	8002fa4 <vPortExitCritical>
				return pdPASS;
 80017f4:	2001      	movs	r0, #1
}
 80017f6:	b004      	add	sp, #16
 80017f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017fc:	9b01      	ldr	r3, [sp, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0d8      	beq.n	80017b4 <xQueueGenericSend+0x5e>
 8001802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001806:	f383 8811 	msr	BASEPRI, r3
 800180a:	f3bf 8f6f 	isb	sy
 800180e:	f3bf 8f4f 	dsb	sy
 8001812:	e7fe      	b.n	8001812 <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001814:	2e02      	cmp	r6, #2
 8001816:	d0d5      	beq.n	80017c4 <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	b91b      	cbnz	r3, 8001824 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800181c:	f001 fbc2 	bl	8002fa4 <vPortExitCritical>
					return errQUEUE_FULL;
 8001820:	2000      	movs	r0, #0
 8001822:	e7e8      	b.n	80017f6 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8001824:	b915      	cbnz	r5, 800182c <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001826:	a802      	add	r0, sp, #8
 8001828:	f000 ffce 	bl	80027c8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800182c:	f001 fbba 	bl	8002fa4 <vPortExitCritical>
		vTaskSuspendAll();
 8001830:	f000 fdba 	bl	80023a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001834:	f001 fb96 	bl	8002f64 <vPortEnterCritical>
 8001838:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800183c:	2bff      	cmp	r3, #255	@ 0xff
 800183e:	bf08      	it	eq
 8001840:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8001844:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001848:	2bff      	cmp	r3, #255	@ 0xff
 800184a:	bf08      	it	eq
 800184c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8001850:	f001 fba8 	bl	8002fa4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001854:	a901      	add	r1, sp, #4
 8001856:	a802      	add	r0, sp, #8
 8001858:	f000 ffc2 	bl	80027e0 <xTaskCheckForTimeOut>
 800185c:	bb38      	cbnz	r0, 80018ae <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800185e:	f001 fb81 	bl	8002f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001862:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001864:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001866:	429a      	cmp	r2, r3
 8001868:	d10e      	bne.n	8001888 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800186a:	f001 fb9b 	bl	8002fa4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800186e:	9901      	ldr	r1, [sp, #4]
 8001870:	f104 0010 	add.w	r0, r4, #16
 8001874:	f000 ff14 	bl	80026a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fea9 	bl	80015d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800187e:	f000 fe37 	bl	80024f0 <xTaskResumeAll>
 8001882:	b148      	cbz	r0, 8001898 <xQueueGenericSend+0x142>
 8001884:	2501      	movs	r5, #1
 8001886:	e797      	b.n	80017b8 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8001888:	f001 fb8c 	bl	8002fa4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff fe9f 	bl	80015d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001892:	f000 fe2d 	bl	80024f0 <xTaskResumeAll>
 8001896:	e7f5      	b.n	8001884 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8001898:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800189c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	f3bf 8f6f 	isb	sy
 80018ac:	e7ea      	b.n	8001884 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fe8e 	bl	80015d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018b4:	f000 fe1c 	bl	80024f0 <xTaskResumeAll>
			return errQUEUE_FULL;
 80018b8:	e7b2      	b.n	8001820 <xQueueGenericSend+0xca>

080018ba <xQueueGenericSendFromISR>:
{
 80018ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018be:	4689      	mov	r9, r1
 80018c0:	4617      	mov	r7, r2
 80018c2:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80018c4:	4604      	mov	r4, r0
 80018c6:	b940      	cbnz	r0, 80018da <xQueueGenericSendFromISR+0x20>
 80018c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	f3bf 8f4f 	dsb	sy
 80018d8:	e7fe      	b.n	80018d8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018da:	b951      	cbnz	r1, 80018f2 <xQueueGenericSendFromISR+0x38>
 80018dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018de:	b143      	cbz	r3, 80018f2 <xQueueGenericSendFromISR+0x38>
 80018e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e4:	f383 8811 	msr	BASEPRI, r3
 80018e8:	f3bf 8f6f 	isb	sy
 80018ec:	f3bf 8f4f 	dsb	sy
 80018f0:	e7fe      	b.n	80018f0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018f2:	2e02      	cmp	r6, #2
 80018f4:	d10b      	bne.n	800190e <xQueueGenericSendFromISR+0x54>
 80018f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d008      	beq.n	800190e <xQueueGenericSendFromISR+0x54>
 80018fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	e7fe      	b.n	800190c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800190e:	f001 fc3b 	bl	8003188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001912:	f3ef 8811 	mrs	r8, BASEPRI
 8001916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800191a:	f383 8811 	msr	BASEPRI, r3
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001926:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001928:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800192a:	429a      	cmp	r2, r3
 800192c:	d301      	bcc.n	8001932 <xQueueGenericSendFromISR+0x78>
 800192e:	2e02      	cmp	r6, #2
 8001930:	d11e      	bne.n	8001970 <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001932:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001936:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001938:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800193a:	4632      	mov	r2, r6
 800193c:	4649      	mov	r1, r9
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fdfd 	bl	800153e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001944:	1c6b      	adds	r3, r5, #1
 8001946:	d10e      	bne.n	8001966 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001948:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800194a:	b13b      	cbz	r3, 800195c <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800194c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001950:	f000 fede 	bl	8002710 <xTaskRemoveFromEventList>
 8001954:	b110      	cbz	r0, 800195c <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8001956:	b10f      	cbz	r7, 800195c <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001958:	2301      	movs	r3, #1
 800195a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800195c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800195e:	f388 8811 	msr	BASEPRI, r8
}
 8001962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001966:	3501      	adds	r5, #1
 8001968:	b26d      	sxtb	r5, r5
 800196a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800196e:	e7f5      	b.n	800195c <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8001970:	2000      	movs	r0, #0
 8001972:	e7f4      	b.n	800195e <xQueueGenericSendFromISR+0xa4>

08001974 <xQueueReceive>:
{
 8001974:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001978:	460e      	mov	r6, r1
 800197a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800197c:	4604      	mov	r4, r0
 800197e:	b940      	cbnz	r0, 8001992 <xQueueReceive+0x1e>
	__asm volatile
 8001980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001984:	f383 8811 	msr	BASEPRI, r3
 8001988:	f3bf 8f6f 	isb	sy
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	e7fe      	b.n	8001990 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001992:	b951      	cbnz	r1, 80019aa <xQueueReceive+0x36>
 8001994:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001996:	b143      	cbz	r3, 80019aa <xQueueReceive+0x36>
 8001998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800199c:	f383 8811 	msr	BASEPRI, r3
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	f3bf 8f4f 	dsb	sy
 80019a8:	e7fe      	b.n	80019a8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019aa:	f000 ff61 	bl	8002870 <xTaskGetSchedulerState>
 80019ae:	4605      	mov	r5, r0
 80019b0:	b318      	cbz	r0, 80019fa <xQueueReceive+0x86>
 80019b2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80019b4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80019b8:	f001 fad4 	bl	8002f64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019bc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019be:	b347      	cbz	r7, 8001a12 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80019c0:	4631      	mov	r1, r6
 80019c2:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80019c4:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80019c6:	f7ff fded 	bl	80015a4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80019ca:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019cc:	6923      	ldr	r3, [r4, #16]
 80019ce:	b173      	cbz	r3, 80019ee <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019d0:	f104 0010 	add.w	r0, r4, #16
 80019d4:	f000 fe9c 	bl	8002710 <xTaskRemoveFromEventList>
 80019d8:	b148      	cbz	r0, 80019ee <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80019da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80019de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80019ee:	f001 fad9 	bl	8002fa4 <vPortExitCritical>
				return pdPASS;
 80019f2:	2001      	movs	r0, #1
}
 80019f4:	b004      	add	sp, #16
 80019f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019fa:	9b01      	ldr	r3, [sp, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0d9      	beq.n	80019b4 <xQueueReceive+0x40>
 8001a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a04:	f383 8811 	msr	BASEPRI, r3
 8001a08:	f3bf 8f6f 	isb	sy
 8001a0c:	f3bf 8f4f 	dsb	sy
 8001a10:	e7fe      	b.n	8001a10 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a12:	9b01      	ldr	r3, [sp, #4]
 8001a14:	b91b      	cbnz	r3, 8001a1e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8001a16:	f001 fac5 	bl	8002fa4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	e7ea      	b.n	80019f4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8001a1e:	b915      	cbnz	r5, 8001a26 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a20:	a802      	add	r0, sp, #8
 8001a22:	f000 fed1 	bl	80027c8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001a26:	f001 fabd 	bl	8002fa4 <vPortExitCritical>
		vTaskSuspendAll();
 8001a2a:	f000 fcbd 	bl	80023a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a2e:	f001 fa99 	bl	8002f64 <vPortEnterCritical>
 8001a32:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001a36:	2bff      	cmp	r3, #255	@ 0xff
 8001a38:	bf08      	it	eq
 8001a3a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8001a3e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001a42:	2bff      	cmp	r3, #255	@ 0xff
 8001a44:	bf08      	it	eq
 8001a46:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8001a4a:	f001 faab 	bl	8002fa4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a4e:	a901      	add	r1, sp, #4
 8001a50:	a802      	add	r0, sp, #8
 8001a52:	f000 fec5 	bl	80027e0 <xTaskCheckForTimeOut>
 8001a56:	bb00      	cbnz	r0, 8001a9a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff fd65 	bl	8001528 <prvIsQueueEmpty>
 8001a5e:	b1b0      	cbz	r0, 8001a8e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001a60:	9901      	ldr	r1, [sp, #4]
 8001a62:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001a66:	f000 fe1b 	bl	80026a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff fdb0 	bl	80015d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001a70:	f000 fd3e 	bl	80024f0 <xTaskResumeAll>
 8001a74:	b948      	cbnz	r0, 8001a8a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8001a76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	2501      	movs	r5, #1
 8001a8c:	e794      	b.n	80019b8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fd9e 	bl	80015d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a94:	f000 fd2c 	bl	80024f0 <xTaskResumeAll>
 8001a98:	e7f7      	b.n	8001a8a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff fd98 	bl	80015d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001aa0:	f000 fd26 	bl	80024f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fd3f 	bl	8001528 <prvIsQueueEmpty>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0ed      	beq.n	8001a8a <xQueueReceive+0x116>
 8001aae:	e7b4      	b.n	8001a1a <xQueueReceive+0xa6>

08001ab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001ab0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001ab2:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ab4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001ab6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8001aba:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8001abe:	b91d      	cbnz	r5, 8001ac8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001ac0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001ac4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001ac6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ac8:	3301      	adds	r3, #1
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d1f3      	bne.n	8001ab6 <vQueueAddToRegistry+0x6>
 8001ace:	e7fa      	b.n	8001ac6 <vQueueAddToRegistry+0x16>
 8001ad0:	20000854 	.word	0x20000854

08001ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	460d      	mov	r5, r1
 8001ada:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001adc:	f001 fa42 	bl	8002f64 <vPortEnterCritical>
 8001ae0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001ae4:	2bff      	cmp	r3, #255	@ 0xff
 8001ae6:	bf04      	itt	eq
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8001aee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001af2:	2bff      	cmp	r3, #255	@ 0xff
 8001af4:	bf04      	itt	eq
 8001af6:	2300      	moveq	r3, #0
 8001af8:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8001afc:	f001 fa52 	bl	8002fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001b00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001b02:	b92b      	cbnz	r3, 8001b10 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b04:	4632      	mov	r2, r6
 8001b06:	4629      	mov	r1, r5
 8001b08:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001b0c:	f000 fde2 	bl	80026d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001b10:	4620      	mov	r0, r4
	}
 8001b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8001b16:	f7ff bd5b 	b.w	80015d0 <prvUnlockQueue>

08001b1a <prvBytesInBuffer>:
static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8001b1a:	6882      	ldr	r2, [r0, #8]
 8001b1c:	6843      	ldr	r3, [r0, #4]
	xCount -= pxStreamBuffer->xTail;
 8001b1e:	6800      	ldr	r0, [r0, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8001b20:	4413      	add	r3, r2
	xCount -= pxStreamBuffer->xTail;
 8001b22:	1a18      	subs	r0, r3, r0
	if ( xCount >= pxStreamBuffer->xLength )
 8001b24:	4282      	cmp	r2, r0
	{
		xCount -= pxStreamBuffer->xLength;
 8001b26:	bf98      	it	ls
 8001b28:	1a80      	subls	r0, r0, r2
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
}
 8001b2a:	4770      	bx	lr

08001b2c <prvReadBytesFromBuffer>:
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	bf28      	it	cs
 8001b30:	4613      	movcs	r3, r2
{
 8001b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	4606      	mov	r6, r0
 8001b38:	4688      	mov	r8, r1
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8001b3a:	461d      	mov	r5, r3
	if( xCount > ( size_t ) 0 )
 8001b3c:	b383      	cbz	r3, 8001ba0 <prvReadBytesFromBuffer+0x74>
		xNextTail = pxStreamBuffer->xTail;
 8001b3e:	6804      	ldr	r4, [r0, #0]
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8001b40:	6883      	ldr	r3, [r0, #8]
 8001b42:	1b1f      	subs	r7, r3, r4
 8001b44:	42af      	cmp	r7, r5
 8001b46:	bf28      	it	cs
 8001b48:	462f      	movcs	r7, r5
		configASSERT( xFirstLength <= xMaxCount );
 8001b4a:	42ba      	cmp	r2, r7
 8001b4c:	d208      	bcs.n	8001b60 <prvReadBytesFromBuffer+0x34>
 8001b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	e7fe      	b.n	8001b5e <prvReadBytesFromBuffer+0x32>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8001b60:	19e2      	adds	r2, r4, r7
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d208      	bcs.n	8001b78 <prvReadBytesFromBuffer+0x4c>
 8001b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	e7fe      	b.n	8001b76 <prvReadBytesFromBuffer+0x4a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001b78:	6981      	ldr	r1, [r0, #24]
 8001b7a:	463a      	mov	r2, r7
 8001b7c:	4421      	add	r1, r4
 8001b7e:	4640      	mov	r0, r8
 8001b80:	f001 fce0 	bl	8003544 <memcpy>
		if( xCount > xFirstLength )
 8001b84:	42bd      	cmp	r5, r7
 8001b86:	d905      	bls.n	8001b94 <prvReadBytesFromBuffer+0x68>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001b88:	69b1      	ldr	r1, [r6, #24]
 8001b8a:	1bea      	subs	r2, r5, r7
 8001b8c:	eb08 0007 	add.w	r0, r8, r7
 8001b90:	f001 fcd8 	bl	8003544 <memcpy>
		if( xNextTail >= pxStreamBuffer->xLength )
 8001b94:	68b3      	ldr	r3, [r6, #8]
		xNextTail += xCount;
 8001b96:	442c      	add	r4, r5
		if( xNextTail >= pxStreamBuffer->xLength )
 8001b98:	42a3      	cmp	r3, r4
			xNextTail -= pxStreamBuffer->xLength;
 8001b9a:	bf98      	it	ls
 8001b9c:	1ae4      	subls	r4, r4, r3
		pxStreamBuffer->xTail = xNextTail;
 8001b9e:	6034      	str	r4, [r6, #0]
}
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ba6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8001ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001baa:	460e      	mov	r6, r1
 8001bac:	4604      	mov	r4, r0
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8001bae:	2155      	movs	r1, #85	@ 0x55
 8001bb0:	4630      	mov	r0, r6
{
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	461f      	mov	r7, r3
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8001bb6:	f001 fc33 	bl	8003420 <memset>
 8001bba:	42b0      	cmp	r0, r6
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	d008      	beq.n	8001bd2 <prvInitialiseNewStreamBuffer+0x2c>
 8001bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f3bf 8f6f 	isb	sy
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	e7fe      	b.n	8001bd0 <prvInitialiseNewStreamBuffer+0x2a>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8001bd2:	2224      	movs	r2, #36	@ 0x24
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f001 fc22 	bl	8003420 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
	pxStreamBuffer->xLength = xBufferSizeBytes;
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
	pxStreamBuffer->ucFlags = ucFlags;
 8001bdc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001be0:	7723      	strb	r3, [r4, #28]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8001be2:	e9c4 8702 	strd	r8, r7, [r4, #8]
	pxStreamBuffer->pucBuffer = pucBuffer;
 8001be6:	61a5      	str	r5, [r4, #24]
}
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bec <prvWriteBytesToBuffer.part.0>:
static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
 8001bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8001bf0:	6883      	ldr	r3, [r0, #8]
	xNextHead = pxStreamBuffer->xHead;
 8001bf2:	6845      	ldr	r5, [r0, #4]
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8001bf4:	1b5f      	subs	r7, r3, r5
 8001bf6:	4297      	cmp	r7, r2
 8001bf8:	bf28      	it	cs
 8001bfa:	4617      	movcs	r7, r2
static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
 8001bfc:	4616      	mov	r6, r2
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8001bfe:	19ea      	adds	r2, r5, r7
 8001c00:	4293      	cmp	r3, r2
static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
 8001c02:	4604      	mov	r4, r0
 8001c04:	4688      	mov	r8, r1
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8001c06:	d208      	bcs.n	8001c1a <prvWriteBytesToBuffer.part.0+0x2e>
 8001c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	e7fe      	b.n	8001c18 <prvWriteBytesToBuffer.part.0+0x2c>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001c1a:	6980      	ldr	r0, [r0, #24]
 8001c1c:	463a      	mov	r2, r7
 8001c1e:	4428      	add	r0, r5
 8001c20:	f001 fc90 	bl	8003544 <memcpy>
	if( xCount > xFirstLength )
 8001c24:	42be      	cmp	r6, r7
 8001c26:	d911      	bls.n	8001c4c <prvWriteBytesToBuffer.part.0+0x60>
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8001c28:	68a3      	ldr	r3, [r4, #8]
 8001c2a:	1bf2      	subs	r2, r6, r7
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d908      	bls.n	8001c42 <prvWriteBytesToBuffer.part.0+0x56>
 8001c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	e7fe      	b.n	8001c40 <prvWriteBytesToBuffer.part.0+0x54>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001c42:	69a0      	ldr	r0, [r4, #24]
 8001c44:	eb08 0107 	add.w	r1, r8, r7
 8001c48:	f001 fc7c 	bl	8003544 <memcpy>
	if( xNextHead >= pxStreamBuffer->xLength )
 8001c4c:	68a3      	ldr	r3, [r4, #8]
	xNextHead += xCount;
 8001c4e:	4435      	add	r5, r6
	if( xNextHead >= pxStreamBuffer->xLength )
 8001c50:	429d      	cmp	r5, r3
		xNextHead -= pxStreamBuffer->xLength;
 8001c52:	bf28      	it	cs
 8001c54:	1aed      	subcs	r5, r5, r3
	pxStreamBuffer->xHead = xNextHead;
 8001c56:	6065      	str	r5, [r4, #4]
}
 8001c58:	4630      	mov	r0, r6
 8001c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c5e <prvWriteMessageToBuffer>:
{
 8001c5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	9201      	str	r2, [sp, #4]
	if( xSpace == ( size_t ) 0 )
 8001c66:	b1fb      	cbz	r3, 8001ca8 <prvWriteMessageToBuffer+0x4a>
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8001c68:	7f01      	ldrb	r1, [r0, #28]
 8001c6a:	07c9      	lsls	r1, r1, #31
 8001c6c:	d40e      	bmi.n	8001c8c <prvWriteMessageToBuffer+0x2e>
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	bf94      	ite	ls
 8001c72:	9201      	strls	r2, [sp, #4]
 8001c74:	9301      	strhi	r3, [sp, #4]
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8001c76:	9a01      	ldr	r2, [sp, #4]
	configASSERT( xCount > ( size_t ) 0 );
 8001c78:	b98a      	cbnz	r2, 8001c9e <prvWriteMessageToBuffer+0x40>
 8001c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	e7fe      	b.n	8001c8a <prvWriteMessageToBuffer+0x2c>
	else if( xSpace >= xRequiredSpace )
 8001c8c:	9a06      	ldr	r2, [sp, #24]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d30d      	bcc.n	8001cae <prvWriteMessageToBuffer+0x50>
	configASSERT( xCount > ( size_t ) 0 );
 8001c92:	2204      	movs	r2, #4
 8001c94:	eb0d 0102 	add.w	r1, sp, r2
 8001c98:	f7ff ffa8 	bl	8001bec <prvWriteBytesToBuffer.part.0>
	if( xShouldWrite != pdFALSE )
 8001c9c:	e7eb      	b.n	8001c76 <prvWriteMessageToBuffer+0x18>
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ffa3 	bl	8001bec <prvWriteBytesToBuffer.part.0>
 8001ca6:	4603      	mov	r3, r0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	b003      	add	sp, #12
 8001cac:	bd30      	pop	{r4, r5, pc}
		xReturn = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e7fa      	b.n	8001ca8 <prvWriteMessageToBuffer+0x4a>

08001cb2 <xStreamBufferGenericCreate>:
		if( xIsMessageBuffer == pdTRUE )
 8001cb2:	2a01      	cmp	r2, #1
	{
 8001cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	460f      	mov	r7, r1
 8001cba:	4615      	mov	r5, r2
		if( xIsMessageBuffer == pdTRUE )
 8001cbc:	d10a      	bne.n	8001cd4 <xStreamBufferGenericCreate+0x22>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001cbe:	2804      	cmp	r0, #4
 8001cc0:	d813      	bhi.n	8001cea <xStreamBufferGenericCreate+0x38>
 8001cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	e7fe      	b.n	8001cd2 <xStreamBufferGenericCreate+0x20>
			configASSERT( xBufferSizeBytes > 0 );
 8001cd4:	b940      	cbnz	r0, 8001ce8 <xStreamBufferGenericCreate+0x36>
 8001cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	e7fe      	b.n	8001ce6 <xStreamBufferGenericCreate+0x34>
			ucFlags = 0;
 8001ce8:	2500      	movs	r5, #0
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001cea:	42bc      	cmp	r4, r7
 8001cec:	d208      	bcs.n	8001d00 <xStreamBufferGenericCreate+0x4e>
 8001cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	e7fe      	b.n	8001cfe <xStreamBufferGenericCreate+0x4c>
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8001d00:	f104 0025 	add.w	r0, r4, #37	@ 0x25
 8001d04:	f001 fa94 	bl	8003230 <pvPortMalloc>
		if( pucAllocatedMemory != NULL )
 8001d08:	4606      	mov	r6, r0
 8001d0a:	b148      	cbz	r0, 8001d20 <xStreamBufferGenericCreate+0x6e>
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8001d0c:	2f01      	cmp	r7, #1
 8001d0e:	463b      	mov	r3, r7
 8001d10:	9500      	str	r5, [sp, #0]
 8001d12:	bf38      	it	cc
 8001d14:	2301      	movcc	r3, #1
 8001d16:	1c62      	adds	r2, r4, #1
 8001d18:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8001d1c:	f7ff ff43 	bl	8001ba6 <prvInitialiseNewStreamBuffer>
	}
 8001d20:	4630      	mov	r0, r6
 8001d22:	b003      	add	sp, #12
 8001d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d26 <xStreamBufferSpacesAvailable>:
	configASSERT( pxStreamBuffer );
 8001d26:	b940      	cbnz	r0, 8001d3a <xStreamBufferSpacesAvailable+0x14>
 8001d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d2c:	f383 8811 	msr	BASEPRI, r3
 8001d30:	f3bf 8f6f 	isb	sy
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	e7fe      	b.n	8001d38 <xStreamBufferSpacesAvailable+0x12>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001d3a:	6882      	ldr	r2, [r0, #8]
 8001d3c:	6803      	ldr	r3, [r0, #0]
	xSpace -= pxStreamBuffer->xHead;
 8001d3e:	6841      	ldr	r1, [r0, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001d40:	18d0      	adds	r0, r2, r3
 8001d42:	3801      	subs	r0, #1
	xSpace -= ( size_t ) 1;
 8001d44:	1a40      	subs	r0, r0, r1
	if( xSpace >= pxStreamBuffer->xLength )
 8001d46:	4282      	cmp	r2, r0
		xSpace -= pxStreamBuffer->xLength;
 8001d48:	bf98      	it	ls
 8001d4a:	1a80      	subls	r0, r0, r2
}
 8001d4c:	4770      	bx	lr

08001d4e <xStreamBufferSend>:
{
 8001d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	4604      	mov	r4, r0
 8001d56:	4616      	mov	r6, r2
 8001d58:	9303      	str	r3, [sp, #12]
	configASSERT( pvTxData );
 8001d5a:	4688      	mov	r8, r1
 8001d5c:	b941      	cbnz	r1, 8001d70 <xStreamBufferSend+0x22>
 8001d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d62:	f383 8811 	msr	BASEPRI, r3
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	e7fe      	b.n	8001d6e <xStreamBufferSend+0x20>
	configASSERT( pxStreamBuffer );
 8001d70:	b940      	cbnz	r0, 8001d84 <xStreamBufferSend+0x36>
 8001d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	e7fe      	b.n	8001d82 <xStreamBufferSend+0x34>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001d84:	7f03      	ldrb	r3, [r0, #28]
 8001d86:	07db      	lsls	r3, r3, #31
 8001d88:	d50c      	bpl.n	8001da4 <xStreamBufferSend+0x56>
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001d8a:	f102 0904 	add.w	r9, r2, #4
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8001d8e:	454a      	cmp	r2, r9
 8001d90:	d309      	bcc.n	8001da6 <xStreamBufferSend+0x58>
 8001d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	e7fe      	b.n	8001da2 <xStreamBufferSend+0x54>
size_t xRequiredSpace = xDataLengthBytes;
 8001da4:	4691      	mov	r9, r2
	if( xTicksToWait != ( TickType_t ) 0 )
 8001da6:	9b03      	ldr	r3, [sp, #12]
 8001da8:	bb2b      	cbnz	r3, 8001df6 <xStreamBufferSend+0xa8>
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff ffbb 	bl	8001d26 <xStreamBufferSpacesAvailable>
 8001db0:	4605      	mov	r5, r0
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001db2:	462b      	mov	r3, r5
 8001db4:	f8cd 9000 	str.w	r9, [sp]
 8001db8:	4632      	mov	r2, r6
 8001dba:	4641      	mov	r1, r8
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff ff4e 	bl	8001c5e <prvWriteMessageToBuffer>
	if( xReturn > ( size_t ) 0 )
 8001dc2:	4605      	mov	r5, r0
 8001dc4:	b198      	cbz	r0, 8001dee <xStreamBufferSend+0xa0>
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff fea7 	bl	8001b1a <prvBytesInBuffer>
 8001dcc:	68e3      	ldr	r3, [r4, #12]
 8001dce:	4298      	cmp	r0, r3
 8001dd0:	d30d      	bcc.n	8001dee <xStreamBufferSend+0xa0>
			sbSEND_COMPLETED( pxStreamBuffer );
 8001dd2:	f000 fae9 	bl	80023a8 <vTaskSuspendAll>
 8001dd6:	6923      	ldr	r3, [r4, #16]
 8001dd8:	b13b      	cbz	r3, 8001dea <xStreamBufferSend+0x9c>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	6920      	ldr	r0, [r4, #16]
 8001de2:	f000 fde1 	bl	80029a8 <xTaskGenericNotify>
 8001de6:	2300      	movs	r3, #0
 8001de8:	6123      	str	r3, [r4, #16]
 8001dea:	f000 fb81 	bl	80024f0 <xTaskResumeAll>
}
 8001dee:	4628      	mov	r0, r5
 8001df0:	b007      	add	sp, #28
 8001df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		vTaskSetTimeOutState( &xTimeOut );
 8001df6:	a804      	add	r0, sp, #16
 8001df8:	f000 fcca 	bl	8002790 <vTaskSetTimeOutState>
			taskENTER_CRITICAL();
 8001dfc:	f001 f8b2 	bl	8002f64 <vPortEnterCritical>
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff ff90 	bl	8001d26 <xStreamBufferSpacesAvailable>
				if( xSpace < xRequiredSpace )
 8001e06:	4581      	cmp	r9, r0
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001e08:	4605      	mov	r5, r0
				if( xSpace < xRequiredSpace )
 8001e0a:	d922      	bls.n	8001e52 <xStreamBufferSend+0x104>
					( void ) xTaskNotifyStateClear( NULL );
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 fe43 	bl	8002a98 <xTaskNotifyStateClear>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8001e12:	6967      	ldr	r7, [r4, #20]
 8001e14:	b147      	cbz	r7, 8001e28 <xStreamBufferSend+0xda>
 8001e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	e7fe      	b.n	8001e26 <xStreamBufferSend+0xd8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8001e28:	f000 fd1c 	bl	8002864 <xTaskGetCurrentTaskHandle>
 8001e2c:	6160      	str	r0, [r4, #20]
			taskEXIT_CRITICAL();
 8001e2e:	f001 f8b9 	bl	8002fa4 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001e32:	4639      	mov	r1, r7
 8001e34:	9b03      	ldr	r3, [sp, #12]
 8001e36:	463a      	mov	r2, r7
 8001e38:	4638      	mov	r0, r7
 8001e3a:	f000 fd6b 	bl	8002914 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8001e3e:	6167      	str	r7, [r4, #20]
		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8001e40:	a903      	add	r1, sp, #12
 8001e42:	a804      	add	r0, sp, #16
 8001e44:	f000 fccc 	bl	80027e0 <xTaskCheckForTimeOut>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d0d7      	beq.n	8001dfc <xStreamBufferSend+0xae>
	if( xSpace == ( size_t ) 0 )
 8001e4c:	2d00      	cmp	r5, #0
 8001e4e:	d0ac      	beq.n	8001daa <xStreamBufferSend+0x5c>
 8001e50:	e7af      	b.n	8001db2 <xStreamBufferSend+0x64>
					taskEXIT_CRITICAL();
 8001e52:	f001 f8a7 	bl	8002fa4 <vPortExitCritical>
					break;
 8001e56:	e7f9      	b.n	8001e4c <xStreamBufferSend+0xfe>

08001e58 <xStreamBufferReceive>:
{
 8001e58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	4616      	mov	r6, r2
 8001e60:	469a      	mov	sl, r3
	configASSERT( pvRxData );
 8001e62:	460f      	mov	r7, r1
 8001e64:	b941      	cbnz	r1, 8001e78 <xStreamBufferReceive+0x20>
 8001e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	e7fe      	b.n	8001e76 <xStreamBufferReceive+0x1e>
	configASSERT( pxStreamBuffer );
 8001e78:	b940      	cbnz	r0, 8001e8c <xStreamBufferReceive+0x34>
 8001e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	e7fe      	b.n	8001e8a <xStreamBufferReceive+0x32>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001e8c:	f890 801c 	ldrb.w	r8, [r0, #28]
 8001e90:	f008 0801 	and.w	r8, r8, #1
 8001e94:	ea4f 0988 	mov.w	r9, r8, lsl #2
	if( xTicksToWait != ( TickType_t ) 0 )
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d050      	beq.n	8001f3e <xStreamBufferReceive+0xe6>
		taskENTER_CRITICAL();
 8001e9c:	f001 f862 	bl	8002f64 <vPortEnterCritical>
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff fe3a 	bl	8001b1a <prvBytesInBuffer>
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001ea6:	4581      	cmp	r9, r0
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001ea8:	4605      	mov	r5, r0
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001eaa:	d22d      	bcs.n	8001f08 <xStreamBufferReceive+0xb0>
		taskEXIT_CRITICAL();
 8001eac:	f001 f87a 	bl	8002fa4 <vPortExitCritical>
	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8001eb0:	f1b8 0f00 	cmp.w	r8, #0
 8001eb4:	d011      	beq.n	8001eda <xStreamBufferReceive+0x82>
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	eb0d 0102 	add.w	r1, sp, r2
 8001ebe:	4620      	mov	r0, r4
		xOriginalTail = pxStreamBuffer->xTail;
 8001ec0:	f8d4 8000 	ldr.w	r8, [r4]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8001ec4:	f7ff fe32 	bl	8001b2c <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8001ec8:	9b01      	ldr	r3, [sp, #4]
		if( xNextMessageLength > xBufferLengthBytes )
 8001eca:	429e      	cmp	r6, r3
		xBytesAvailable -= xBytesToStoreMessageLength;
 8001ecc:	f1a5 0504 	sub.w	r5, r5, #4
			pxStreamBuffer->xTail = xOriginalTail;
 8001ed0:	bf3a      	itte	cc
 8001ed2:	f8c4 8000 	strcc.w	r8, [r4]
			xNextMessageLength = 0;
 8001ed6:	2600      	movcc	r6, #0
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8001ed8:	461e      	movcs	r6, r3
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8001eda:	462b      	mov	r3, r5
 8001edc:	4632      	mov	r2, r6
 8001ede:	4639      	mov	r1, r7
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff fe23 	bl	8001b2c <prvReadBytesFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	b370      	cbz	r0, 8001f48 <xStreamBufferReceive+0xf0>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8001eea:	f000 fa5d 	bl	80023a8 <vTaskSuspendAll>
 8001eee:	6963      	ldr	r3, [r4, #20]
 8001ef0:	b13b      	cbz	r3, 8001f02 <xStreamBufferReceive+0xaa>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6960      	ldr	r0, [r4, #20]
 8001efa:	f000 fd55 	bl	80029a8 <xTaskGenericNotify>
 8001efe:	2300      	movs	r3, #0
 8001f00:	6163      	str	r3, [r4, #20]
 8001f02:	f000 faf5 	bl	80024f0 <xTaskResumeAll>
	return xReceivedLength;
 8001f06:	e020      	b.n	8001f4a <xStreamBufferReceive+0xf2>
				( void ) xTaskNotifyStateClear( NULL );
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f000 fdc5 	bl	8002a98 <xTaskNotifyStateClear>
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8001f0e:	6925      	ldr	r5, [r4, #16]
 8001f10:	b145      	cbz	r5, 8001f24 <xStreamBufferReceive+0xcc>
 8001f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f16:	f383 8811 	msr	BASEPRI, r3
 8001f1a:	f3bf 8f6f 	isb	sy
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	e7fe      	b.n	8001f22 <xStreamBufferReceive+0xca>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8001f24:	f000 fc9e 	bl	8002864 <xTaskGetCurrentTaskHandle>
 8001f28:	6120      	str	r0, [r4, #16]
		taskEXIT_CRITICAL();
 8001f2a:	f001 f83b 	bl	8002fa4 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001f2e:	4653      	mov	r3, sl
 8001f30:	462a      	mov	r2, r5
 8001f32:	4629      	mov	r1, r5
 8001f34:	4628      	mov	r0, r5
 8001f36:	f000 fced 	bl	8002914 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8001f3a:	6125      	str	r5, [r4, #16]
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001f3c:	4620      	mov	r0, r4
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001f3e:	f7ff fdec 	bl	8001b1a <prvBytesInBuffer>
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8001f42:	4581      	cmp	r9, r0
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001f44:	4605      	mov	r5, r0
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8001f46:	d3b3      	bcc.n	8001eb0 <xStreamBufferReceive+0x58>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8001f48:	2500      	movs	r5, #0
}
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	b002      	add	sp, #8
 8001f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001f54 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f58:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001f5a:	f001 f803 	bl	8002f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001f5e:	4b30      	ldr	r3, [pc, #192]	@ (8002020 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8001f60:	4e30      	ldr	r6, [pc, #192]	@ (8002024 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4f30      	ldr	r7, [pc, #192]	@ (8002028 <prvAddNewTaskToReadyList+0xd4>)
 8001f66:	3201      	adds	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001f6a:	6835      	ldr	r5, [r6, #0]
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	d14b      	bne.n	8002008 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001f70:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11f      	bne.n	8001fb8 <prvAddNewTaskToReadyList+0x64>
 8001f78:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f7a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f7c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f7e:	f7ff fa93 	bl	80014a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f82:	2d38      	cmp	r5, #56	@ 0x38
 8001f84:	f108 0814 	add.w	r8, r8, #20
 8001f88:	d1f7      	bne.n	8001f7a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f8a:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8002050 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8001f8e:	4d27      	ldr	r5, [pc, #156]	@ (800202c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8001f90:	4640      	mov	r0, r8
 8001f92:	f7ff fa89 	bl	80014a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f96:	4628      	mov	r0, r5
 8001f98:	f7ff fa86 	bl	80014a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f9c:	4824      	ldr	r0, [pc, #144]	@ (8002030 <prvAddNewTaskToReadyList+0xdc>)
 8001f9e:	f7ff fa83 	bl	80014a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001fa2:	4824      	ldr	r0, [pc, #144]	@ (8002034 <prvAddNewTaskToReadyList+0xe0>)
 8001fa4:	f7ff fa80 	bl	80014a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001fa8:	4823      	ldr	r0, [pc, #140]	@ (8002038 <prvAddNewTaskToReadyList+0xe4>)
 8001faa:	f7ff fa7d 	bl	80014a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <prvAddNewTaskToReadyList+0xe8>)
 8001fb0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <prvAddNewTaskToReadyList+0xec>)
 8001fb6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001fb8:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <prvAddNewTaskToReadyList+0xf0>)
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001fc0:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001fc2:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001fc4:	6811      	ldr	r1, [r2, #0]
 8001fc6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001fc8:	2014      	movs	r0, #20
 8001fca:	428b      	cmp	r3, r1
 8001fcc:	fb00 7003 	mla	r0, r0, r3, r7
 8001fd0:	f104 0104 	add.w	r1, r4, #4
 8001fd4:	bf88      	it	hi
 8001fd6:	6013      	strhi	r3, [r2, #0]
 8001fd8:	f7ff fa74 	bl	80014c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001fdc:	f000 ffe2 	bl	8002fa4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <prvAddNewTaskToReadyList+0xf8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b173      	cbz	r3, 8002004 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fe6:	6833      	ldr	r3, [r6, #0]
 8001fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d209      	bcs.n	8002004 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8001ff0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
}
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <prvAddNewTaskToReadyList+0xf8>)
 800200a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800200c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800200e:	2a00      	cmp	r2, #0
 8002010:	d1d2      	bne.n	8001fb8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002012:	6832      	ldr	r2, [r6, #0]
 8002014:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002016:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002018:	bf98      	it	ls
 800201a:	6034      	strls	r4, [r6, #0]
 800201c:	e7cc      	b.n	8001fb8 <prvAddNewTaskToReadyList+0x64>
 800201e:	bf00      	nop
 8002020:	200008b8 	.word	0x200008b8
 8002024:	20000d8c 	.word	0x20000d8c
 8002028:	2000092c 	.word	0x2000092c
 800202c:	20000904 	.word	0x20000904
 8002030:	200008e8 	.word	0x200008e8
 8002034:	200008d4 	.word	0x200008d4
 8002038:	200008bc 	.word	0x200008bc
 800203c:	20000900 	.word	0x20000900
 8002040:	200008fc 	.word	0x200008fc
 8002044:	2000089c 	.word	0x2000089c
 8002048:	200008b0 	.word	0x200008b0
 800204c:	200008ac 	.word	0x200008ac
 8002050:	20000918 	.word	0x20000918

08002054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002058:	4d15      	ldr	r5, [pc, #84]	@ (80020b0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800205a:	681c      	ldr	r4, [r3, #0]
{
 800205c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800205e:	6828      	ldr	r0, [r5, #0]
 8002060:	3004      	adds	r0, #4
{
 8002062:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002064:	f7ff fa50 	bl	8001508 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002068:	1c73      	adds	r3, r6, #1
 800206a:	d107      	bne.n	800207c <prvAddCurrentTaskToDelayedList+0x28>
 800206c:	b137      	cbz	r7, 800207c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800206e:	6829      	ldr	r1, [r5, #0]
 8002070:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002076:	3104      	adds	r1, #4
 8002078:	f7ff ba24 	b.w	80014c4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	19a4      	adds	r4, r4, r6
 8002080:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002082:	d307      	bcc.n	8002094 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <prvAddCurrentTaskToDelayedList+0x64>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	6829      	ldr	r1, [r5, #0]
}
 800208a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800208e:	3104      	adds	r1, #4
 8002090:	f7ff ba23 	b.w	80014da <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <prvAddCurrentTaskToDelayedList+0x68>)
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	6829      	ldr	r1, [r5, #0]
 800209a:	3104      	adds	r1, #4
 800209c:	f7ff fa1d 	bl	80014da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <prvAddCurrentTaskToDelayedList+0x6c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80020a6:	bf88      	it	hi
 80020a8:	601c      	strhi	r4, [r3, #0]
}
 80020aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ac:	200008b4 	.word	0x200008b4
 80020b0:	20000d8c 	.word	0x20000d8c
 80020b4:	200008bc 	.word	0x200008bc
 80020b8:	200008fc 	.word	0x200008fc
 80020bc:	20000900 	.word	0x20000900
 80020c0:	20000898 	.word	0x20000898

080020c4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <prvResetNextTaskUnblockTime+0x1c>)
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <prvResetNextTaskUnblockTime+0x20>)
 80020cc:	b919      	cbnz	r1, 80020d6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80020ce:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020da:	68d2      	ldr	r2, [r2, #12]
 80020dc:	6852      	ldr	r2, [r2, #4]
 80020de:	e7f8      	b.n	80020d2 <prvResetNextTaskUnblockTime+0xe>
 80020e0:	20000900 	.word	0x20000900
 80020e4:	20000898 	.word	0x20000898

080020e8 <prvDeleteTCB>:
	{
 80020e8:	b510      	push	{r4, lr}
 80020ea:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80020ec:	3054      	adds	r0, #84	@ 0x54
 80020ee:	f001 f99f 	bl	8003430 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020f2:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80020f6:	b93b      	cbnz	r3, 8002108 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 80020f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80020fa:	f001 f931 	bl	8003360 <vPortFree>
				vPortFree( pxTCB );
 80020fe:	4620      	mov	r0, r4
	}
 8002100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002104:	f001 b92c 	b.w	8003360 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002108:	2b01      	cmp	r3, #1
 800210a:	d0f8      	beq.n	80020fe <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800210c:	2b02      	cmp	r3, #2
 800210e:	d008      	beq.n	8002122 <prvDeleteTCB+0x3a>
 8002110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	e7fe      	b.n	8002120 <prvDeleteTCB+0x38>
	}
 8002122:	bd10      	pop	{r4, pc}

08002124 <prvIdleTask>:
{
 8002124:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002126:	4c13      	ldr	r4, [pc, #76]	@ (8002174 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002128:	4f13      	ldr	r7, [pc, #76]	@ (8002178 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800212a:	4d14      	ldr	r5, [pc, #80]	@ (800217c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	b973      	cbnz	r3, 800214e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002130:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <prvIdleTask+0x5c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d9f8      	bls.n	800212a <prvIdleTask+0x6>
				taskYIELD();
 8002138:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800213c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002140:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	e7ed      	b.n	800212a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800214e:	f000 ff09 	bl	8002f64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002156:	1d30      	adds	r0, r6, #4
 8002158:	f7ff f9d6 	bl	8001508 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	3b01      	subs	r3, #1
 8002160:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	3b01      	subs	r3, #1
 8002166:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002168:	f000 ff1c 	bl	8002fa4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800216c:	4630      	mov	r0, r6
 800216e:	f7ff ffbb 	bl	80020e8 <prvDeleteTCB>
 8002172:	e7db      	b.n	800212c <prvIdleTask+0x8>
 8002174:	200008d0 	.word	0x200008d0
 8002178:	200008d4 	.word	0x200008d4
 800217c:	200008b8 	.word	0x200008b8
 8002180:	2000092c 	.word	0x2000092c

08002184 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002188:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800218c:	0096      	lsls	r6, r2, #2
 800218e:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002190:	4607      	mov	r7, r0
 8002192:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002194:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002196:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002198:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800219a:	f001 f941 	bl	8003420 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800219e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80021a0:	3e04      	subs	r6, #4
 80021a2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021a4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80021a8:	2d00      	cmp	r5, #0
 80021aa:	d041      	beq.n	8002230 <prvInitialiseNewTask.constprop.0+0xac>
 80021ac:	1e6b      	subs	r3, r5, #1
 80021ae:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80021b2:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021b4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80021b8:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80021bc:	b109      	cbz	r1, 80021c2 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021be:	42ab      	cmp	r3, r5
 80021c0:	d1f8      	bne.n	80021b4 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021c2:	2300      	movs	r3, #0
 80021c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021c8:	9d08      	ldr	r5, [sp, #32]
 80021ca:	2d37      	cmp	r5, #55	@ 0x37
 80021cc:	bf28      	it	cs
 80021ce:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80021d0:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80021d4:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80021d6:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021d8:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80021da:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021de:	f7ff f96e 	bl	80014be <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021e2:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021e6:	f104 0018 	add.w	r0, r4, #24
 80021ea:	f7ff f968 	bl	80014be <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80021ee:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80021f2:	224c      	movs	r2, #76	@ 0x4c
 80021f4:	4651      	mov	r1, sl
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021f6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021f8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021fa:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021fc:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002200:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8002204:	f001 f90c 	bl	8003420 <memset>
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <prvInitialiseNewTask.constprop.0+0xb4>)
 800220a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800220c:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002210:	33d0      	adds	r3, #208	@ 0xd0
 8002212:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002214:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002216:	4642      	mov	r2, r8
 8002218:	4639      	mov	r1, r7
 800221a:	4630      	mov	r0, r6
 800221c:	f000 fe78 	bl	8002f10 <pxPortInitialiseStack>
 8002220:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8002222:	f1b9 0f00 	cmp.w	r9, #0
 8002226:	d001      	beq.n	800222c <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002228:	f8c9 4000 	str.w	r4, [r9]
}
 800222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002230:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8002234:	e7c8      	b.n	80021c8 <prvInitialiseNewTask.constprop.0+0x44>
 8002236:	bf00      	nop
 8002238:	20004ae4 	.word	0x20004ae4

0800223c <xTaskCreateStatic>:
	{
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002244:	b945      	cbnz	r5, 8002258 <xTaskCreateStatic+0x1c>
 8002246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	e7fe      	b.n	8002256 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002258:	b944      	cbnz	r4, 800226c <xTaskCreateStatic+0x30>
 800225a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225e:	f383 8811 	msr	BASEPRI, r3
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	e7fe      	b.n	800226a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800226c:	26a8      	movs	r6, #168	@ 0xa8
 800226e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002270:	9e05      	ldr	r6, [sp, #20]
 8002272:	2ea8      	cmp	r6, #168	@ 0xa8
 8002274:	d008      	beq.n	8002288 <xTaskCreateStatic+0x4c>
 8002276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	e7fe      	b.n	8002286 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002288:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800228a:	2502      	movs	r5, #2
 800228c:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002290:	ad04      	add	r5, sp, #16
 8002292:	9501      	str	r5, [sp, #4]
 8002294:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8002296:	9402      	str	r4, [sp, #8]
 8002298:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800229a:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800229c:	f7ff ff72 	bl	8002184 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022a0:	4620      	mov	r0, r4
 80022a2:	f7ff fe57 	bl	8001f54 <prvAddNewTaskToReadyList>
	}
 80022a6:	9804      	ldr	r0, [sp, #16]
 80022a8:	b006      	add	sp, #24
 80022aa:	bd70      	pop	{r4, r5, r6, pc}

080022ac <xTaskCreate>:
	{
 80022ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022b0:	4607      	mov	r7, r0
 80022b2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022b4:	0090      	lsls	r0, r2, #2
	{
 80022b6:	4688      	mov	r8, r1
 80022b8:	4616      	mov	r6, r2
 80022ba:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022bc:	f000 ffb8 	bl	8003230 <pvPortMalloc>
			if( pxStack != NULL )
 80022c0:	4605      	mov	r5, r0
 80022c2:	b920      	cbnz	r0, 80022ce <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80022c8:	b005      	add	sp, #20
 80022ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022ce:	20a8      	movs	r0, #168	@ 0xa8
 80022d0:	f000 ffae 	bl	8003230 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80022d4:	4604      	mov	r4, r0
 80022d6:	b198      	cbz	r0, 8002300 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022d8:	2300      	movs	r3, #0
 80022da:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80022e0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80022e6:	9002      	str	r0, [sp, #8]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4632      	mov	r2, r6
 80022ec:	464b      	mov	r3, r9
 80022ee:	4641      	mov	r1, r8
 80022f0:	4638      	mov	r0, r7
 80022f2:	f7ff ff47 	bl	8002184 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff fe2c 	bl	8001f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022fc:	2001      	movs	r0, #1
 80022fe:	e7e3      	b.n	80022c8 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8002300:	4628      	mov	r0, r5
 8002302:	f001 f82d 	bl	8003360 <vPortFree>
		if( pxNewTCB != NULL )
 8002306:	e7dd      	b.n	80022c4 <xTaskCreate+0x18>

08002308 <vTaskStartScheduler>:
{
 8002308:	b510      	push	{r4, lr}
 800230a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800230c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800230e:	aa07      	add	r2, sp, #28
 8002310:	a906      	add	r1, sp, #24
 8002312:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002314:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002318:	f7ff f8ae 	bl	8001478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800231c:	9b05      	ldr	r3, [sp, #20]
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	9b06      	ldr	r3, [sp, #24]
 8002322:	9a07      	ldr	r2, [sp, #28]
 8002324:	4919      	ldr	r1, [pc, #100]	@ (800238c <vTaskStartScheduler+0x84>)
 8002326:	481a      	ldr	r0, [pc, #104]	@ (8002390 <vTaskStartScheduler+0x88>)
 8002328:	e9cd 4300 	strd	r4, r3, [sp]
 800232c:	4623      	mov	r3, r4
 800232e:	f7ff ff85 	bl	800223c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002332:	b340      	cbz	r0, 8002386 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8002334:	f000 fc18 	bl	8002b68 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002338:	2801      	cmp	r0, #1
 800233a:	d119      	bne.n	8002370 <vTaskStartScheduler+0x68>
 800233c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <vTaskStartScheduler+0x8c>)
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <vTaskStartScheduler+0x90>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3354      	adds	r3, #84	@ 0x54
 8002354:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <vTaskStartScheduler+0x94>)
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <vTaskStartScheduler+0x98>)
 8002360:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <vTaskStartScheduler+0x9c>)
 8002364:	601c      	str	r4, [r3, #0]
}
 8002366:	b008      	add	sp, #32
 8002368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800236c:	f000 be8a 	b.w	8003084 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002370:	3001      	adds	r0, #1
 8002372:	d108      	bne.n	8002386 <vTaskStartScheduler+0x7e>
 8002374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	e7fe      	b.n	8002384 <vTaskStartScheduler+0x7c>
}
 8002386:	b008      	add	sp, #32
 8002388:	bd10      	pop	{r4, pc}
 800238a:	bf00      	nop
 800238c:	08003e10 	.word	0x08003e10
 8002390:	08002125 	.word	0x08002125
 8002394:	20000d8c 	.word	0x20000d8c
 8002398:	20000010 	.word	0x20000010
 800239c:	20000898 	.word	0x20000898
 80023a0:	200008ac 	.word	0x200008ac
 80023a4:	200008b4 	.word	0x200008b4

080023a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80023a8:	4a02      	ldr	r2, [pc, #8]	@ (80023b4 <vTaskSuspendAll+0xc>)
 80023aa:	6813      	ldr	r3, [r2, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000894 	.word	0x20000894

080023b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80023b8:	4b01      	ldr	r3, [pc, #4]	@ (80023c0 <xTaskGetTickCount+0x8>)
 80023ba:	6818      	ldr	r0, [r3, #0]
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200008b4 	.word	0x200008b4

080023c4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023c4:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <xTaskIncrementTick+0x100>)
 80023c6:	681b      	ldr	r3, [r3, #0]
{
 80023c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d172      	bne.n	80024b6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80023d0:	4b3d      	ldr	r3, [pc, #244]	@ (80024c8 <xTaskIncrementTick+0x104>)
 80023d2:	681c      	ldr	r4, [r3, #0]
 80023d4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80023d6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80023d8:	b9bc      	cbnz	r4, 800240a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80023da:	4b3c      	ldr	r3, [pc, #240]	@ (80024cc <xTaskIncrementTick+0x108>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	b142      	cbz	r2, 80023f4 <xTaskIncrementTick+0x30>
 80023e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	e7fe      	b.n	80023f2 <xTaskIncrementTick+0x2e>
 80023f4:	4a36      	ldr	r2, [pc, #216]	@ (80024d0 <xTaskIncrementTick+0x10c>)
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	6810      	ldr	r0, [r2, #0]
 80023fa:	6018      	str	r0, [r3, #0]
 80023fc:	6011      	str	r1, [r2, #0]
 80023fe:	4a35      	ldr	r2, [pc, #212]	@ (80024d4 <xTaskIncrementTick+0x110>)
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	f7ff fe5d 	bl	80020c4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800240a:	4d33      	ldr	r5, [pc, #204]	@ (80024d8 <xTaskIncrementTick+0x114>)
 800240c:	4e33      	ldr	r6, [pc, #204]	@ (80024dc <xTaskIncrementTick+0x118>)
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	4f33      	ldr	r7, [pc, #204]	@ (80024e0 <xTaskIncrementTick+0x11c>)
 8002412:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8002414:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002418:	d212      	bcs.n	8002440 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800241e:	2114      	movs	r1, #20
 8002420:	434a      	muls	r2, r1
 8002422:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8002424:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8002426:	4a2f      	ldr	r2, [pc, #188]	@ (80024e4 <xTaskIncrementTick+0x120>)
 8002428:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800242a:	bf28      	it	cs
 800242c:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8002430:	2a00      	cmp	r2, #0
 8002432:	bf18      	it	ne
 8002434:	f04f 0b01 	movne.w	fp, #1
}
 8002438:	4658      	mov	r0, fp
 800243a:	b003      	add	sp, #12
 800243c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002440:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80024cc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8002444:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80024ec <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002448:	f8d9 2000 	ldr.w	r2, [r9]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	b91a      	cbnz	r2, 8002458 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	602a      	str	r2, [r5, #0]
					break;
 8002456:	e7e0      	b.n	800241a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002458:	f8d9 2000 	ldr.w	r2, [r9]
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002462:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8002466:	428c      	cmp	r4, r1
 8002468:	d201      	bcs.n	800246e <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800246a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800246c:	e7d5      	b.n	800241a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800246e:	f108 0304 	add.w	r3, r8, #4
 8002472:	4618      	mov	r0, r3
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	f7ff f847 	bl	8001508 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800247a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800247e:	b119      	cbz	r1, 8002488 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002480:	f108 0018 	add.w	r0, r8, #24
 8002484:	f7ff f840 	bl	8001508 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002488:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800248c:	f8da 1000 	ldr.w	r1, [sl]
 8002490:	2314      	movs	r3, #20
 8002492:	4288      	cmp	r0, r1
 8002494:	bf88      	it	hi
 8002496:	f8ca 0000 	strhi.w	r0, [sl]
 800249a:	9901      	ldr	r1, [sp, #4]
 800249c:	fb03 6000 	mla	r0, r3, r0, r6
 80024a0:	f7ff f810 	bl	80014c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80024aa:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80024ac:	4291      	cmp	r1, r2
 80024ae:	bf28      	it	cs
 80024b0:	f04f 0b01 	movcs.w	fp, #1
 80024b4:	e7c8      	b.n	8002448 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 80024b6:	4a0c      	ldr	r2, [pc, #48]	@ (80024e8 <xTaskIncrementTick+0x124>)
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80024be:	f04f 0b00 	mov.w	fp, #0
 80024c2:	e7b9      	b.n	8002438 <xTaskIncrementTick+0x74>
 80024c4:	20000894 	.word	0x20000894
 80024c8:	200008b4 	.word	0x200008b4
 80024cc:	20000900 	.word	0x20000900
 80024d0:	200008fc 	.word	0x200008fc
 80024d4:	200008a0 	.word	0x200008a0
 80024d8:	20000898 	.word	0x20000898
 80024dc:	2000092c 	.word	0x2000092c
 80024e0:	20000d8c 	.word	0x20000d8c
 80024e4:	200008a4 	.word	0x200008a4
 80024e8:	200008a8 	.word	0x200008a8
 80024ec:	200008b0 	.word	0x200008b0

080024f0 <xTaskResumeAll>:
{
 80024f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80024f4:	4c30      	ldr	r4, [pc, #192]	@ (80025b8 <xTaskResumeAll+0xc8>)
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	b943      	cbnz	r3, 800250c <xTaskResumeAll+0x1c>
 80024fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	e7fe      	b.n	800250a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800250c:	f000 fd2a 	bl	8002f64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	3b01      	subs	r3, #1
 8002514:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002516:	6824      	ldr	r4, [r4, #0]
 8002518:	b12c      	cbz	r4, 8002526 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800251a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800251c:	f000 fd42 	bl	8002fa4 <vPortExitCritical>
}
 8002520:	4620      	mov	r0, r4
 8002522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002526:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <xTaskResumeAll+0xcc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f5      	beq.n	800251a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800252e:	4d24      	ldr	r5, [pc, #144]	@ (80025c0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002530:	4e24      	ldr	r6, [pc, #144]	@ (80025c4 <xTaskResumeAll+0xd4>)
 8002532:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80025d4 <xTaskResumeAll+0xe4>
 8002536:	e01d      	b.n	8002574 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002538:	68eb      	ldr	r3, [r5, #12]
 800253a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800253c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800253e:	f104 0018 	add.w	r0, r4, #24
 8002542:	f7fe ffe1 	bl	8001508 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002546:	4638      	mov	r0, r7
 8002548:	f7fe ffde 	bl	8001508 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800254c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800254e:	6832      	ldr	r2, [r6, #0]
 8002550:	2014      	movs	r0, #20
 8002552:	4293      	cmp	r3, r2
 8002554:	fb00 8003 	mla	r0, r0, r3, r8
 8002558:	4639      	mov	r1, r7
 800255a:	bf88      	it	hi
 800255c:	6033      	strhi	r3, [r6, #0]
 800255e:	f7fe ffb1 	bl	80014c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002562:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <xTaskResumeAll+0xd8>)
 8002564:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <xTaskResumeAll+0xdc>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1de      	bne.n	8002538 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800257a:	b10c      	cbz	r4, 8002580 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800257c:	f7ff fda2 	bl	80020c4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002580:	4d13      	ldr	r5, [pc, #76]	@ (80025d0 <xTaskResumeAll+0xe0>)
 8002582:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002584:	b144      	cbz	r4, 8002598 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8002586:	4e11      	ldr	r6, [pc, #68]	@ (80025cc <xTaskResumeAll+0xdc>)
 8002588:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800258a:	f7ff ff1b 	bl	80023c4 <xTaskIncrementTick>
 800258e:	b100      	cbz	r0, 8002592 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8002590:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002592:	3c01      	subs	r4, #1
 8002594:	d1f9      	bne.n	800258a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8002596:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <xTaskResumeAll+0xdc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0bc      	beq.n	800251a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80025a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80025b4:	2401      	movs	r4, #1
 80025b6:	e7b1      	b.n	800251c <xTaskResumeAll+0x2c>
 80025b8:	20000894 	.word	0x20000894
 80025bc:	200008b8 	.word	0x200008b8
 80025c0:	200008e8 	.word	0x200008e8
 80025c4:	200008b0 	.word	0x200008b0
 80025c8:	20000d8c 	.word	0x20000d8c
 80025cc:	200008a4 	.word	0x200008a4
 80025d0:	200008a8 	.word	0x200008a8
 80025d4:	2000092c 	.word	0x2000092c

080025d8 <vTaskDelay>:
	{
 80025d8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025da:	b950      	cbnz	r0, 80025f2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80025dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
	}
 80025f0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <vTaskDelay+0x44>)
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	b141      	cbz	r1, 800260a <vTaskDelay+0x32>
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	e7fe      	b.n	8002608 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800260a:	f7ff fecd 	bl	80023a8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800260e:	f7ff fd21 	bl	8002054 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002612:	f7ff ff6d 	bl	80024f0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002616:	2800      	cmp	r0, #0
 8002618:	d0e0      	beq.n	80025dc <vTaskDelay+0x4>
 800261a:	e7e9      	b.n	80025f0 <vTaskDelay+0x18>
 800261c:	20000894 	.word	0x20000894

08002620 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002620:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <vTaskSwitchContext+0x68>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b19      	ldr	r3, [pc, #100]	@ (800268c <vTaskSwitchContext+0x6c>)
{
 8002626:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002628:	b112      	cbz	r2, 8002630 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
}
 800262e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002630:	4d17      	ldr	r5, [pc, #92]	@ (8002690 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8002632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002634:	682a      	ldr	r2, [r5, #0]
 8002636:	4917      	ldr	r1, [pc, #92]	@ (8002694 <vTaskSwitchContext+0x74>)
 8002638:	2614      	movs	r6, #20
 800263a:	fb06 f302 	mul.w	r3, r6, r2
 800263e:	18c8      	adds	r0, r1, r3
 8002640:	58cc      	ldr	r4, [r1, r3]
 8002642:	b1ac      	cbz	r4, 8002670 <vTaskSwitchContext+0x50>
 8002644:	6844      	ldr	r4, [r0, #4]
 8002646:	3308      	adds	r3, #8
 8002648:	6864      	ldr	r4, [r4, #4]
 800264a:	6044      	str	r4, [r0, #4]
 800264c:	440b      	add	r3, r1
 800264e:	429c      	cmp	r4, r3
 8002650:	bf04      	itt	eq
 8002652:	6863      	ldreq	r3, [r4, #4]
 8002654:	6043      	streq	r3, [r0, #4]
 8002656:	2314      	movs	r3, #20
 8002658:	fb03 1102 	mla	r1, r3, r2, r1
 800265c:	684b      	ldr	r3, [r1, #4]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <vTaskSwitchContext+0x78>)
 8002662:	6019      	str	r1, [r3, #0]
 8002664:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <vTaskSwitchContext+0x7c>)
 800266a:	3354      	adds	r3, #84	@ 0x54
 800266c:	6013      	str	r3, [r2, #0]
}
 800266e:	e7de      	b.n	800262e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002670:	b942      	cbnz	r2, 8002684 <vTaskSwitchContext+0x64>
 8002672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	e7fe      	b.n	8002682 <vTaskSwitchContext+0x62>
 8002684:	3a01      	subs	r2, #1
 8002686:	e7d8      	b.n	800263a <vTaskSwitchContext+0x1a>
 8002688:	20000894 	.word	0x20000894
 800268c:	200008a4 	.word	0x200008a4
 8002690:	200008b0 	.word	0x200008b0
 8002694:	2000092c 	.word	0x2000092c
 8002698:	20000d8c 	.word	0x20000d8c
 800269c:	20000010 	.word	0x20000010

080026a0 <vTaskPlaceOnEventList>:
{
 80026a0:	b510      	push	{r4, lr}
 80026a2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80026a4:	b940      	cbnz	r0, 80026b8 <vTaskPlaceOnEventList+0x18>
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	e7fe      	b.n	80026b6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <vTaskPlaceOnEventList+0x30>)
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	3118      	adds	r1, #24
 80026be:	f7fe ff0c 	bl	80014da <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80026c2:	4620      	mov	r0, r4
 80026c4:	2101      	movs	r1, #1
}
 80026c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80026ca:	f7ff bcc3 	b.w	8002054 <prvAddCurrentTaskToDelayedList>
 80026ce:	bf00      	nop
 80026d0:	20000d8c 	.word	0x20000d8c

080026d4 <vTaskPlaceOnEventListRestricted>:
	{
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	460d      	mov	r5, r1
 80026d8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80026da:	b940      	cbnz	r0, 80026ee <vTaskPlaceOnEventListRestricted+0x1a>
 80026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	e7fe      	b.n	80026ec <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <vTaskPlaceOnEventListRestricted+0x38>)
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	3118      	adds	r1, #24
 80026f4:	f7fe fee6 	bl	80014c4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80026f8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80026fa:	4621      	mov	r1, r4
 80026fc:	bf0c      	ite	eq
 80026fe:	4628      	moveq	r0, r5
 8002700:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8002704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002708:	f7ff bca4 	b.w	8002054 <prvAddCurrentTaskToDelayedList>
 800270c:	20000d8c 	.word	0x20000d8c

08002710 <xTaskRemoveFromEventList>:
{
 8002710:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002712:	68c3      	ldr	r3, [r0, #12]
 8002714:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002716:	b944      	cbnz	r4, 800272a <xTaskRemoveFromEventList+0x1a>
 8002718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	e7fe      	b.n	8002728 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800272a:	f104 0518 	add.w	r5, r4, #24
 800272e:	4628      	mov	r0, r5
 8002730:	f7fe feea 	bl	8001508 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002734:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <xTaskRemoveFromEventList+0x68>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b9db      	cbnz	r3, 8002772 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800273a:	1d25      	adds	r5, r4, #4
 800273c:	4628      	mov	r0, r5
 800273e:	f7fe fee3 	bl	8001508 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002742:	4a0e      	ldr	r2, [pc, #56]	@ (800277c <xTaskRemoveFromEventList+0x6c>)
 8002744:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002746:	6811      	ldr	r1, [r2, #0]
 8002748:	428b      	cmp	r3, r1
 800274a:	bf88      	it	hi
 800274c:	6013      	strhi	r3, [r2, #0]
 800274e:	4a0c      	ldr	r2, [pc, #48]	@ (8002780 <xTaskRemoveFromEventList+0x70>)
 8002750:	2014      	movs	r0, #20
 8002752:	4629      	mov	r1, r5
 8002754:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002758:	f7fe feb4 	bl	80014c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <xTaskRemoveFromEventList+0x74>)
 800275e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002766:	bf83      	ittte	hi
 8002768:	4b07      	ldrhi	r3, [pc, #28]	@ (8002788 <xTaskRemoveFromEventList+0x78>)
 800276a:	2001      	movhi	r0, #1
 800276c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800276e:	2000      	movls	r0, #0
}
 8002770:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002772:	4806      	ldr	r0, [pc, #24]	@ (800278c <xTaskRemoveFromEventList+0x7c>)
 8002774:	4629      	mov	r1, r5
 8002776:	e7ef      	b.n	8002758 <xTaskRemoveFromEventList+0x48>
 8002778:	20000894 	.word	0x20000894
 800277c:	200008b0 	.word	0x200008b0
 8002780:	2000092c 	.word	0x2000092c
 8002784:	20000d8c 	.word	0x20000d8c
 8002788:	200008a4 	.word	0x200008a4
 800278c:	200008e8 	.word	0x200008e8

08002790 <vTaskSetTimeOutState>:
{
 8002790:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 8002792:	4604      	mov	r4, r0
 8002794:	b940      	cbnz	r0, 80027a8 <vTaskSetTimeOutState+0x18>
 8002796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	e7fe      	b.n	80027a6 <vTaskSetTimeOutState+0x16>
	taskENTER_CRITICAL();
 80027a8:	f000 fbdc 	bl	8002f64 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <vTaskSetTimeOutState+0x30>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80027b2:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <vTaskSetTimeOutState+0x34>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6063      	str	r3, [r4, #4]
}
 80027b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 80027bc:	f000 bbf2 	b.w	8002fa4 <vPortExitCritical>
 80027c0:	200008a0 	.word	0x200008a0
 80027c4:	200008b4 	.word	0x200008b4

080027c8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <vTaskInternalSetTimeOutState+0x10>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80027ce:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <vTaskInternalSetTimeOutState+0x14>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6043      	str	r3, [r0, #4]
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	200008a0 	.word	0x200008a0
 80027dc:	200008b4 	.word	0x200008b4

080027e0 <xTaskCheckForTimeOut>:
{
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80027e4:	4605      	mov	r5, r0
 80027e6:	b940      	cbnz	r0, 80027fa <xTaskCheckForTimeOut+0x1a>
 80027e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	e7fe      	b.n	80027f8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80027fa:	b941      	cbnz	r1, 800280e <xTaskCheckForTimeOut+0x2e>
 80027fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	e7fe      	b.n	800280c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800280e:	f000 fba9 	bl	8002f64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <xTaskCheckForTimeOut+0x70>)
 8002814:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	d010      	beq.n	800283e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800281c:	480d      	ldr	r0, [pc, #52]	@ (8002854 <xTaskCheckForTimeOut+0x74>)
 800281e:	682e      	ldr	r6, [r5, #0]
 8002820:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002822:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002824:	4286      	cmp	r6, r0
 8002826:	d001      	beq.n	800282c <xTaskCheckForTimeOut+0x4c>
 8002828:	428a      	cmp	r2, r1
 800282a:	d90f      	bls.n	800284c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800282c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800282e:	4283      	cmp	r3, r0
 8002830:	d90a      	bls.n	8002848 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8002832:	1a5b      	subs	r3, r3, r1
 8002834:	4413      	add	r3, r2
 8002836:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002838:	4628      	mov	r0, r5
 800283a:	f7ff ffc5 	bl	80027c8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800283e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002840:	f000 fbb0 	bl	8002fa4 <vPortExitCritical>
}
 8002844:	4620      	mov	r0, r4
 8002846:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800284c:	2401      	movs	r4, #1
 800284e:	e7f7      	b.n	8002840 <xTaskCheckForTimeOut+0x60>
 8002850:	200008b4 	.word	0x200008b4
 8002854:	200008a0 	.word	0x200008a0

08002858 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002858:	4b01      	ldr	r3, [pc, #4]	@ (8002860 <vTaskMissedYield+0x8>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]
}
 800285e:	4770      	bx	lr
 8002860:	200008a4 	.word	0x200008a4

08002864 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8002864:	4b01      	ldr	r3, [pc, #4]	@ (800286c <xTaskGetCurrentTaskHandle+0x8>)
 8002866:	6818      	ldr	r0, [r3, #0]
	}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000d8c 	.word	0x20000d8c

08002870 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <xTaskGetSchedulerState+0x18>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b133      	cbz	r3, 8002884 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002876:	4b05      	ldr	r3, [pc, #20]	@ (800288c <xTaskGetSchedulerState+0x1c>)
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	fab0 f080 	clz	r0, r0
 800287e:	0940      	lsrs	r0, r0, #5
 8002880:	0040      	lsls	r0, r0, #1
 8002882:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002884:	2001      	movs	r0, #1
	}
 8002886:	4770      	bx	lr
 8002888:	200008ac 	.word	0x200008ac
 800288c:	20000894 	.word	0x20000894

08002890 <xTaskPriorityDisinherit>:
	{
 8002890:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8002892:	b908      	cbnz	r0, 8002898 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8002894:	2000      	movs	r0, #0
	}
 8002896:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <xTaskPriorityDisinherit+0x78>)
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	4284      	cmp	r4, r0
 800289e:	d008      	beq.n	80028b2 <xTaskPriorityDisinherit+0x22>
 80028a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	e7fe      	b.n	80028b0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80028b2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80028b4:	b943      	cbnz	r3, 80028c8 <xTaskPriorityDisinherit+0x38>
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	e7fe      	b.n	80028c6 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80028c8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80028ca:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80028cc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80028ce:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80028d0:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80028d2:	d0df      	beq.n	8002894 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1dd      	bne.n	8002894 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028d8:	1d25      	adds	r5, r4, #4
 80028da:	4628      	mov	r0, r5
 80028dc:	f7fe fe14 	bl	8001508 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80028e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80028e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80028e8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80028ea:	4a08      	ldr	r2, [pc, #32]	@ (800290c <xTaskPriorityDisinherit+0x7c>)
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	428b      	cmp	r3, r1
 80028f0:	bf88      	it	hi
 80028f2:	6013      	strhi	r3, [r2, #0]
 80028f4:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <xTaskPriorityDisinherit+0x80>)
 80028f6:	2014      	movs	r0, #20
 80028f8:	fb00 2003 	mla	r0, r0, r3, r2
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7fe fde1 	bl	80014c4 <vListInsertEnd>
					xReturn = pdTRUE;
 8002902:	2001      	movs	r0, #1
		return xReturn;
 8002904:	e7c7      	b.n	8002896 <xTaskPriorityDisinherit+0x6>
 8002906:	bf00      	nop
 8002908:	20000d8c 	.word	0x20000d8c
 800290c:	200008b0 	.word	0x200008b0
 8002910:	2000092c 	.word	0x2000092c

08002914 <xTaskNotifyWait>:
	{
 8002914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002918:	4c22      	ldr	r4, [pc, #136]	@ (80029a4 <xTaskNotifyWait+0x90>)
	{
 800291a:	461e      	mov	r6, r3
 800291c:	4680      	mov	r8, r0
 800291e:	460f      	mov	r7, r1
 8002920:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8002922:	f000 fb1f 	bl	8002f64 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800292c:	2b02      	cmp	r3, #2
 800292e:	d018      	beq.n	8002962 <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002936:	ea23 0308 	bic.w	r3, r3, r8
 800293a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	f883 10a4 	strb.w	r1, [r3, #164]	@ 0xa4
				if( xTicksToWait > ( TickType_t ) 0 )
 8002946:	b166      	cbz	r6, 8002962 <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002948:	4630      	mov	r0, r6
 800294a:	f7ff fb83 	bl	8002054 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800294e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002956:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8002962:	f000 fb1f 	bl	8002fa4 <vPortExitCritical>
		taskENTER_CRITICAL();
 8002966:	f000 fafd 	bl	8002f64 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800296a:	b11d      	cbz	r5, 8002974 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002972:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800297a:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800297c:	bf01      	itttt	eq
 800297e:	6822      	ldreq	r2, [r4, #0]
 8002980:	f8d2 30a0 	ldreq.w	r3, [r2, #160]	@ 0xa0
 8002984:	43bb      	biceq	r3, r7
 8002986:	f8c2 30a0 	streq.w	r3, [r2, #160]	@ 0xa0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8002990:	bf0c      	ite	eq
 8002992:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8002994:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002996:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		taskEXIT_CRITICAL();
 800299a:	f000 fb03 	bl	8002fa4 <vPortExitCritical>
	}
 800299e:	4628      	mov	r0, r5
 80029a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029a4:	20000d8c 	.word	0x20000d8c

080029a8 <xTaskGenericNotify>:
	{
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	460d      	mov	r5, r1
 80029ac:	4616      	mov	r6, r2
 80029ae:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 80029b0:	4604      	mov	r4, r0
 80029b2:	b940      	cbnz	r0, 80029c6 <xTaskGenericNotify+0x1e>
 80029b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	e7fe      	b.n	80029c4 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 80029c6:	f000 facd 	bl	8002f64 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80029ca:	b117      	cbz	r7, 80029d2 <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80029cc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80029d0:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80029d2:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80029d6:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80029d8:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80029da:	f884 20a4 	strb.w	r2, [r4, #164]	@ 0xa4
			switch( eAction )
 80029de:	2e04      	cmp	r6, #4
 80029e0:	d830      	bhi.n	8002a44 <xTaskGenericNotify+0x9c>
 80029e2:	e8df f006 	tbb	[pc, r6]
 80029e6:	0308      	.short	0x0308
 80029e8:	2c26      	.short	0x2c26
 80029ea:	2a          	.byte	0x2a
 80029eb:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 80029ec:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 80029f0:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 80029f2:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d141      	bne.n	8002a7e <xTaskGenericNotify+0xd6>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029fa:	1d25      	adds	r5, r4, #4
 80029fc:	4628      	mov	r0, r5
 80029fe:	f7fe fd83 	bl	8001508 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002a02:	4a22      	ldr	r2, [pc, #136]	@ (8002a8c <xTaskGenericNotify+0xe4>)
 8002a04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002a06:	6811      	ldr	r1, [r2, #0]
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	bf88      	it	hi
 8002a0c:	6013      	strhi	r3, [r2, #0]
 8002a0e:	4a20      	ldr	r2, [pc, #128]	@ (8002a90 <xTaskGenericNotify+0xe8>)
 8002a10:	2014      	movs	r0, #20
 8002a12:	fb00 2003 	mla	r0, r0, r3, r2
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fe fd54 	bl	80014c4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002a1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a1e:	b1f3      	cbz	r3, 8002a5e <xTaskGenericNotify+0xb6>
 8002a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	e7fe      	b.n	8002a30 <xTaskGenericNotify+0x88>
					( pxTCB->ulNotifiedValue )++;
 8002a32:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 8002a36:	3201      	adds	r2, #1
 8002a38:	e7db      	b.n	80029f2 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d024      	beq.n	8002a88 <xTaskGenericNotify+0xe0>
						pxTCB->ulNotifiedValue = ulValue;
 8002a3e:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 8002a42:	e7d8      	b.n	80029f6 <xTaskGenericNotify+0x4e>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002a44:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 8002a48:	3201      	adds	r2, #1
 8002a4a:	d0d4      	beq.n	80029f6 <xTaskGenericNotify+0x4e>
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	e7fe      	b.n	8002a5c <xTaskGenericNotify+0xb4>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <xTaskGenericNotify+0xec>)
 8002a60:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d909      	bls.n	8002a7e <xTaskGenericNotify+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 8002a6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	f3bf 8f6f 	isb	sy
	{
 8002a7e:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8002a80:	f000 fa90 	bl	8002fa4 <vPortExitCritical>
	}
 8002a84:	4620      	mov	r0, r4
 8002a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 8002a88:	2400      	movs	r4, #0
 8002a8a:	e7f9      	b.n	8002a80 <xTaskGenericNotify+0xd8>
 8002a8c:	200008b0 	.word	0x200008b0
 8002a90:	2000092c 	.word	0x2000092c
 8002a94:	20000d8c 	.word	0x20000d8c

08002a98 <xTaskNotifyStateClear>:
	{
 8002a98:	b510      	push	{r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	b908      	cbnz	r0, 8002aa2 <xTaskNotifyStateClear+0xa>
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <xTaskNotifyStateClear+0x28>)
 8002aa0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8002aa2:	f000 fa5f 	bl	8002f64 <vPortEnterCritical>
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8002aa6:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8002aaa:	2000      	movs	r0, #0
 8002aac:	2b02      	cmp	r3, #2
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002aae:	bf0a      	itet	eq
 8002ab0:	f884 00a4 	strbeq.w	r0, [r4, #164]	@ 0xa4
				xReturn = pdFAIL;
 8002ab4:	4604      	movne	r4, r0
				xReturn = pdPASS;
 8002ab6:	2401      	moveq	r4, #1
		taskEXIT_CRITICAL();
 8002ab8:	f000 fa74 	bl	8002fa4 <vPortExitCritical>
	}
 8002abc:	4620      	mov	r0, r4
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	20000d8c 	.word	0x20000d8c

08002ac4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002ac4:	4291      	cmp	r1, r2
{
 8002ac6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ac8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002aca:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002acc:	d80a      	bhi.n	8002ae4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ace:	1ad2      	subs	r2, r2, r3
 8002ad0:	6983      	ldr	r3, [r0, #24]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20d      	bcs.n	8002af2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <prvInsertTimerInActiveList+0x34>)
 8002ad8:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	f7fe fcfd 	bl	80014da <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002ae0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8002ae2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d201      	bcs.n	8002aec <prvInsertTimerInActiveList+0x28>
 8002ae8:	4299      	cmp	r1, r3
 8002aea:	d202      	bcs.n	8002af2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002aec:	4b03      	ldr	r3, [pc, #12]	@ (8002afc <prvInsertTimerInActiveList+0x38>)
 8002aee:	1d01      	adds	r1, r0, #4
 8002af0:	e7f3      	b.n	8002ada <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002af2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002af4:	e7f5      	b.n	8002ae2 <prvInsertTimerInActiveList+0x1e>
 8002af6:	bf00      	nop
 8002af8:	20000e8c 	.word	0x20000e8c
 8002afc:	20000e90 	.word	0x20000e90

08002b00 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002b02:	4c11      	ldr	r4, [pc, #68]	@ (8002b48 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8002b04:	f000 fa2e 	bl	8002f64 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002b08:	6825      	ldr	r5, [r4, #0]
 8002b0a:	b9bd      	cbnz	r5, 8002b3c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002b0c:	4f0f      	ldr	r7, [pc, #60]	@ (8002b4c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8002b0e:	4e10      	ldr	r6, [pc, #64]	@ (8002b50 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8002b10:	4638      	mov	r0, r7
 8002b12:	f7fe fcc9 	bl	80014a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002b16:	4630      	mov	r0, r6
 8002b18:	f7fe fcc6 	bl	80014a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b58 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8002b20:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002b24:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8002b26:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002b28:	200a      	movs	r0, #10
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <prvCheckForValidListAndQueue+0x60>)
 8002b2c:	9500      	str	r5, [sp, #0]
 8002b2e:	f7fe fdc4 	bl	80016ba <xQueueGenericCreateStatic>
 8002b32:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002b34:	b110      	cbz	r0, 8002b3c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b36:	490b      	ldr	r1, [pc, #44]	@ (8002b64 <prvCheckForValidListAndQueue+0x64>)
 8002b38:	f7fe ffba 	bl	8001ab0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002b3c:	b003      	add	sp, #12
 8002b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002b42:	f000 ba2f 	b.w	8002fa4 <vPortExitCritical>
 8002b46:	bf00      	nop
 8002b48:	20000e88 	.word	0x20000e88
 8002b4c:	20000ea8 	.word	0x20000ea8
 8002b50:	20000e94 	.word	0x20000e94
 8002b54:	20000e90 	.word	0x20000e90
 8002b58:	20000de0 	.word	0x20000de0
 8002b5c:	20000e8c 	.word	0x20000e8c
 8002b60:	20000d90 	.word	0x20000d90
 8002b64:	08003e15 	.word	0x08003e15

08002b68 <xTimerCreateTimerTask>:
{
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002b6c:	f7ff ffc8 	bl	8002b00 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <xTimerCreateTimerTask+0x54>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b1b3      	cbz	r3, 8002ba4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002b76:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002b78:	aa07      	add	r2, sp, #28
 8002b7a:	a906      	add	r1, sp, #24
 8002b7c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002b7e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002b82:	f7fe fc85 	bl	8001490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002b86:	9b05      	ldr	r3, [sp, #20]
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	9b06      	ldr	r3, [sp, #24]
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	2302      	movs	r3, #2
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	9a07      	ldr	r2, [sp, #28]
 8002b94:	490a      	ldr	r1, [pc, #40]	@ (8002bc0 <xTimerCreateTimerTask+0x58>)
 8002b96:	480b      	ldr	r0, [pc, #44]	@ (8002bc4 <xTimerCreateTimerTask+0x5c>)
 8002b98:	4623      	mov	r3, r4
 8002b9a:	f7ff fb4f 	bl	800223c <xTaskCreateStatic>
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <xTimerCreateTimerTask+0x60>)
 8002ba0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8002ba2:	b940      	cbnz	r0, 8002bb6 <xTimerCreateTimerTask+0x4e>
 8002ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8002bb4:	e7fe      	b.n	8002bb4 <xTimerCreateTimerTask+0x4c>
}
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	b008      	add	sp, #32
 8002bba:	bd10      	pop	{r4, pc}
 8002bbc:	20000e88 	.word	0x20000e88
 8002bc0:	08003e1a 	.word	0x08003e1a
 8002bc4:	08002cc9 	.word	0x08002cc9
 8002bc8:	20000e84 	.word	0x20000e84

08002bcc <xTimerGenericCommand>:
{
 8002bcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002bce:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8002bd0:	4604      	mov	r4, r0
{
 8002bd2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002bd4:	b940      	cbnz	r0, 8002be8 <xTimerGenericCommand+0x1c>
 8002bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	e7fe      	b.n	8002be6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8002be8:	4d0d      	ldr	r5, [pc, #52]	@ (8002c20 <xTimerGenericCommand+0x54>)
 8002bea:	6828      	ldr	r0, [r5, #0]
 8002bec:	b180      	cbz	r0, 8002c10 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002bee:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002bf0:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002bf4:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002bf6:	dc0d      	bgt.n	8002c14 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002bf8:	f7ff fe3a 	bl	8002870 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bfc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002bfe:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002c00:	bf08      	it	eq
 8002c02:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002c04:	6828      	ldr	r0, [r5, #0]
 8002c06:	bf18      	it	ne
 8002c08:	461a      	movne	r2, r3
 8002c0a:	4669      	mov	r1, sp
 8002c0c:	f7fe fda3 	bl	8001756 <xQueueGenericSend>
}
 8002c10:	b004      	add	sp, #16
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c14:	2300      	movs	r3, #0
 8002c16:	4669      	mov	r1, sp
 8002c18:	f7fe fe4f 	bl	80018ba <xQueueGenericSendFromISR>
 8002c1c:	e7f8      	b.n	8002c10 <xTimerGenericCommand+0x44>
 8002c1e:	bf00      	nop
 8002c20:	20000e88 	.word	0x20000e88

08002c24 <prvSampleTimeNow>:
{
 8002c24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8002c28:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002cc4 <prvSampleTimeNow+0xa0>
{
 8002c2c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8002c2e:	f7ff fbc3 	bl	80023b8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002c32:	f8d8 3000 	ldr.w	r3, [r8]
 8002c36:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8002c38:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8002c3a:	d909      	bls.n	8002c50 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c3c:	4f1f      	ldr	r7, [pc, #124]	@ (8002cbc <prvSampleTimeNow+0x98>)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	b96a      	cbnz	r2, 8002c60 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8002c44:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <prvSampleTimeNow+0x9c>)
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8002c4a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <prvSampleTimeNow+0x2e>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8002c54:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8002c56:	f8c8 5000 	str.w	r5, [r8]
}
 8002c5a:	b002      	add	sp, #8
 8002c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c60:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c62:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c64:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c68:	f104 0a04 	add.w	sl, r4, #4
 8002c6c:	4650      	mov	r0, sl
 8002c6e:	f7fe fc4b 	bl	8001508 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c72:	6a23      	ldr	r3, [r4, #32]
 8002c74:	4620      	mov	r0, r4
 8002c76:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c78:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002c7c:	075b      	lsls	r3, r3, #29
 8002c7e:	d5de      	bpl.n	8002c3e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c80:	69a3      	ldr	r3, [r4, #24]
 8002c82:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8002c84:	4599      	cmp	r9, r3
 8002c86:	d206      	bcs.n	8002c96 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c88:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c8a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c8c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c8e:	4651      	mov	r1, sl
 8002c90:	f7fe fc23 	bl	80014da <vListInsert>
 8002c94:	e7d3      	b.n	8002c3e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c96:	2300      	movs	r3, #0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	464a      	mov	r2, r9
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff ff94 	bl	8002bcc <xTimerGenericCommand>
				configASSERT( xResult );
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d1ca      	bne.n	8002c3e <prvSampleTimeNow+0x1a>
 8002ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	e7fe      	b.n	8002cb8 <prvSampleTimeNow+0x94>
 8002cba:	bf00      	nop
 8002cbc:	20000e90 	.word	0x20000e90
 8002cc0:	20000e8c 	.word	0x20000e8c
 8002cc4:	20000e80 	.word	0x20000e80

08002cc8 <prvTimerTask>:
{
 8002cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ccc:	4d6e      	ldr	r5, [pc, #440]	@ (8002e88 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002cce:	4e6f      	ldr	r6, [pc, #444]	@ (8002e8c <prvTimerTask+0x1c4>)
{
 8002cd0:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002cd2:	682b      	ldr	r3, [r5, #0]
 8002cd4:	f8d3 8000 	ldr.w	r8, [r3]
 8002cd8:	f1b8 0f00 	cmp.w	r8, #0
 8002cdc:	d035      	beq.n	8002d4a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ce4:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8002ce6:	f7ff fb5f 	bl	80023a8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cea:	a804      	add	r0, sp, #16
 8002cec:	f7ff ff9a 	bl	8002c24 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8002cf0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cf2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d169      	bne.n	8002dcc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002cf8:	2c00      	cmp	r4, #0
 8002cfa:	d14c      	bne.n	8002d96 <prvTimerTask+0xce>
 8002cfc:	4540      	cmp	r0, r8
 8002cfe:	d350      	bcc.n	8002da2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8002d00:	f7ff fbf6 	bl	80024f0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d0a:	1d38      	adds	r0, r7, #4
 8002d0c:	f7fe fbfc 	bl	8001508 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d14:	0758      	lsls	r0, r3, #29
 8002d16:	d51a      	bpl.n	8002d4e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002d18:	69b9      	ldr	r1, [r7, #24]
 8002d1a:	4643      	mov	r3, r8
 8002d1c:	464a      	mov	r2, r9
 8002d1e:	4441      	add	r1, r8
 8002d20:	4638      	mov	r0, r7
 8002d22:	f7ff fecf 	bl	8002ac4 <prvInsertTimerInActiveList>
 8002d26:	b1b0      	cbz	r0, 8002d56 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4638      	mov	r0, r7
 8002d32:	f7ff ff4b 	bl	8002bcc <xTimerGenericCommand>
			configASSERT( xResult );
 8002d36:	b970      	cbnz	r0, 8002d56 <prvTimerTask+0x8e>
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	e7fe      	b.n	8002d48 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d4a:	2401      	movs	r4, #1
 8002d4c:	e7cb      	b.n	8002ce6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	4638      	mov	r0, r7
 8002d5a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d5c:	6830      	ldr	r0, [r6, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	a904      	add	r1, sp, #16
 8002d62:	f7fe fe07 	bl	8001974 <xQueueReceive>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	d0b3      	beq.n	8002cd2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002d6a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002d6c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db2f      	blt.n	8002dd2 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002d72:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002d74:	6963      	ldr	r3, [r4, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d132      	bne.n	8002de0 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d7a:	a803      	add	r0, sp, #12
 8002d7c:	f7ff ff52 	bl	8002c24 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8002d80:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d82:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	d8e9      	bhi.n	8002d5c <prvTimerTask+0x94>
 8002d88:	e8df f003 	tbb	[pc, r3]
 8002d8c:	572e2e2e 	.word	0x572e2e2e
 8002d90:	2e2e765e 	.word	0x2e2e765e
 8002d94:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d96:	4b3e      	ldr	r3, [pc, #248]	@ (8002e90 <prvTimerTask+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681c      	ldr	r4, [r3, #0]
 8002d9c:	fab4 f484 	clz	r4, r4
 8002da0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002da2:	6830      	ldr	r0, [r6, #0]
 8002da4:	4622      	mov	r2, r4
 8002da6:	eba8 0109 	sub.w	r1, r8, r9
 8002daa:	f7fe fe93 	bl	8001ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002dae:	f7ff fb9f 	bl	80024f0 <xTaskResumeAll>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d1d2      	bne.n	8002d5c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8002db6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	e7c7      	b.n	8002d5c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8002dcc:	f7ff fb90 	bl	80024f0 <xTaskResumeAll>
}
 8002dd0:	e7c4      	b.n	8002d5c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002dd2:	9b05      	ldr	r3, [sp, #20]
 8002dd4:	9907      	ldr	r1, [sp, #28]
 8002dd6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002dd8:	9b04      	ldr	r3, [sp, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	dbbe      	blt.n	8002d5c <prvTimerTask+0x94>
 8002dde:	e7c8      	b.n	8002d72 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002de0:	1d20      	adds	r0, r4, #4
 8002de2:	f7fe fb91 	bl	8001508 <uxListRemove>
 8002de6:	e7c8      	b.n	8002d7a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002de8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002dec:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002df6:	9b05      	ldr	r3, [sp, #20]
 8002df8:	4620      	mov	r0, r4
 8002dfa:	4419      	add	r1, r3
 8002dfc:	f7ff fe62 	bl	8002ac4 <prvInsertTimerInActiveList>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d0ab      	beq.n	8002d5c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e04:	6a23      	ldr	r3, [r4, #32]
 8002e06:	4620      	mov	r0, r4
 8002e08:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002e0a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002e0e:	0759      	lsls	r1, r3, #29
 8002e10:	d5a4      	bpl.n	8002d5c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002e12:	69a2      	ldr	r2, [r4, #24]
 8002e14:	9905      	ldr	r1, [sp, #20]
 8002e16:	2300      	movs	r3, #0
 8002e18:	440a      	add	r2, r1
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7ff fed4 	bl	8002bcc <xTimerGenericCommand>
							configASSERT( xResult );
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d199      	bne.n	8002d5c <prvTimerTask+0x94>
 8002e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	e7fe      	b.n	8002e38 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e3a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8002e46:	e789      	b.n	8002d5c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e48:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002e54:	9905      	ldr	r1, [sp, #20]
 8002e56:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002e58:	b941      	cbnz	r1, 8002e6c <prvTimerTask+0x1a4>
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	e7fe      	b.n	8002e6a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4401      	add	r1, r0
 8002e70:	4620      	mov	r0, r4
 8002e72:	f7ff fe27 	bl	8002ac4 <prvInsertTimerInActiveList>
					break;
 8002e76:	e771      	b.n	8002d5c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002e78:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8002e7c:	079a      	lsls	r2, r3, #30
 8002e7e:	d4de      	bmi.n	8002e3e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8002e80:	4620      	mov	r0, r4
 8002e82:	f000 fa6d 	bl	8003360 <vPortFree>
 8002e86:	e769      	b.n	8002d5c <prvTimerTask+0x94>
 8002e88:	20000e90 	.word	0x20000e90
 8002e8c:	20000e88 	.word	0x20000e88
 8002e90:	20000e8c 	.word	0x20000e8c

08002e94 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e94:	4808      	ldr	r0, [pc, #32]	@ (8002eb8 <prvPortStartFirstTask+0x24>)
 8002e96:	6800      	ldr	r0, [r0, #0]
 8002e98:	6800      	ldr	r0, [r0, #0]
 8002e9a:	f380 8808 	msr	MSP, r0
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f380 8814 	msr	CONTROL, r0
 8002ea6:	b662      	cpsie	i
 8002ea8:	b661      	cpsie	f
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	df00      	svc	0
 8002eb4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002eb6:	0000      	.short	0x0000
 8002eb8:	e000ed08 	.word	0xe000ed08

08002ebc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ebc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ecc <vPortEnableVFP+0x10>
 8002ec0:	6801      	ldr	r1, [r0, #0]
 8002ec2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002ec6:	6001      	str	r1, [r0, #0]
 8002ec8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002eca:	0000      	.short	0x0000
 8002ecc:	e000ed88 	.word	0xe000ed88

08002ed0 <prvTaskExitError>:
{
 8002ed0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <prvTaskExitError+0x3c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	d008      	beq.n	8002ef0 <prvTaskExitError+0x20>
 8002ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	e7fe      	b.n	8002eee <prvTaskExitError+0x1e>
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0fc      	beq.n	8002f00 <prvTaskExitError+0x30>
}
 8002f06:	b002      	add	sp, #8
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002f10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f14:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002f18:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <pxPortInitialiseStack+0x28>)
 8002f1a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f1e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f22:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f26:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002f2a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f2e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002f32:	3844      	subs	r0, #68	@ 0x44
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	08002ed1 	.word	0x08002ed1
 8002f3c:	00000000 	.word	0x00000000

08002f40 <SVC_Handler>:
	__asm volatile (
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <pxCurrentTCBConst2>)
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	6808      	ldr	r0, [r1, #0]
 8002f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	f380 8809 	msr	PSP, r0
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8811 	msr	BASEPRI, r0
 8002f5a:	4770      	bx	lr
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst2>:
 8002f60:	20000d8c 	.word	0x20000d8c

08002f64 <vPortEnterCritical>:
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <vPortEnterCritical+0x3c>)
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002f7a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002f7c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002f7e:	d10e      	bne.n	8002f9e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f84:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	b143      	cbz	r3, 8002f9e <vPortEnterCritical+0x3a>
 8002f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	e7fe      	b.n	8002f9c <vPortEnterCritical+0x38>
}
 8002f9e:	4770      	bx	lr
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002fa4:	4a08      	ldr	r2, [pc, #32]	@ (8002fc8 <vPortExitCritical+0x24>)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	b943      	cbnz	r3, 8002fbc <vPortExitCritical+0x18>
 8002faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	e7fe      	b.n	8002fba <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002fc0:	b90b      	cbnz	r3, 8002fc6 <vPortExitCritical+0x22>
	__asm volatile
 8002fc2:	f383 8811 	msr	BASEPRI, r3
}
 8002fc6:	4770      	bx	lr
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	00000000 	.word	0x00000000

08002fd0 <PendSV_Handler>:
	__asm volatile
 8002fd0:	f3ef 8009 	mrs	r0, PSP
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <pxCurrentTCBConst>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f01e 0f10 	tst.w	lr, #16
 8002fe0:	bf08      	it	eq
 8002fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fea:	6010      	str	r0, [r2, #0]
 8002fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002ff4:	f380 8811 	msr	BASEPRI, r0
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f7ff fb0e 	bl	8002620 <vTaskSwitchContext>
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f380 8811 	msr	BASEPRI, r0
 800300c:	bc09      	pop	{r0, r3}
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	6808      	ldr	r0, [r1, #0]
 8003012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003016:	f01e 0f10 	tst.w	lr, #16
 800301a:	bf08      	it	eq
 800301c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003020:	f380 8809 	msr	PSP, r0
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	f3af 8000 	nop.w

08003030 <pxCurrentTCBConst>:
 8003030:	20000d8c 	.word	0x20000d8c

08003034 <xPortSysTickHandler>:
{
 8003034:	b508      	push	{r3, lr}
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003046:	f7ff f9bd 	bl	80023c4 <xTaskIncrementTick>
 800304a:	b128      	cbz	r0, 8003058 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800304c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003054:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003058:	2300      	movs	r3, #0
 800305a:	f383 8811 	msr	BASEPRI, r3
}
 800305e:	bd08      	pop	{r3, pc}

08003060 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003060:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003064:	2300      	movs	r3, #0
 8003066:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003068:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <vPortSetupTimerInterrupt+0x20>)
 800306c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fbb3 f3f1 	udiv	r3, r3, r1
 8003076:	3b01      	subs	r3, #1
 8003078:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800307a:	2307      	movs	r3, #7
 800307c:	6113      	str	r3, [r2, #16]
}
 800307e:	4770      	bx	lr
 8003080:	20000000 	.word	0x20000000

08003084 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003084:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8003088:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800308a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800308e:	4a38      	ldr	r2, [pc, #224]	@ (8003170 <xPortStartScheduler+0xec>)
 8003090:	4291      	cmp	r1, r2
 8003092:	d108      	bne.n	80030a6 <xPortStartScheduler+0x22>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	e7fe      	b.n	80030a4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80030aa:	4b32      	ldr	r3, [pc, #200]	@ (8003174 <xPortStartScheduler+0xf0>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d108      	bne.n	80030c2 <xPortStartScheduler+0x3e>
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	e7fe      	b.n	80030c0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003178 <xPortStartScheduler+0xf4>)
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ca:	22ff      	movs	r2, #255	@ 0xff
 80030cc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030ce:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030d0:	4a2a      	ldr	r2, [pc, #168]	@ (800317c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80030dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030e0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030e2:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <xPortStartScheduler+0xfc>)
 80030e4:	2307      	movs	r3, #7
 80030e6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80030ec:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030ee:	0609      	lsls	r1, r1, #24
 80030f0:	d40a      	bmi.n	8003108 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d011      	beq.n	800311a <xPortStartScheduler+0x96>
 80030f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	e7fe      	b.n	8003106 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8003108:	3b01      	subs	r3, #1
 800310a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800310c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f88d 3003 	strb.w	r3, [sp, #3]
 8003118:	e7e6      	b.n	80030e8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800311a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800311e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003120:	9b01      	ldr	r3, [sp, #4]
 8003122:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003124:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003128:	b2db      	uxtb	r3, r3
 800312a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800312c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003134:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003138:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800313c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003140:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8003144:	f7ff ff8c 	bl	8003060 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003148:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <xPortStartScheduler+0x100>)
 800314a:	2500      	movs	r5, #0
 800314c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800314e:	f7ff feb5 	bl	8002ebc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003152:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8003156:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800315a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800315e:	f7ff fe99 	bl	8002e94 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003162:	f7ff fa5d 	bl	8002620 <vTaskSwitchContext>
	prvTaskExitError();
 8003166:	f7ff feb3 	bl	8002ed0 <prvTaskExitError>
}
 800316a:	4628      	mov	r0, r5
 800316c:	b003      	add	sp, #12
 800316e:	bd30      	pop	{r4, r5, pc}
 8003170:	410fc271 	.word	0x410fc271
 8003174:	410fc270 	.word	0x410fc270
 8003178:	e000e400 	.word	0xe000e400
 800317c:	20000ec0 	.word	0x20000ec0
 8003180:	20000ebc 	.word	0x20000ebc
 8003184:	2000000c 	.word	0x2000000c

08003188 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003188:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d90e      	bls.n	80031ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003190:	4a11      	ldr	r2, [pc, #68]	@ (80031d8 <vPortValidateInterruptPriority+0x50>)
 8003192:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003194:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <vPortValidateInterruptPriority+0x54>)
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d908      	bls.n	80031ae <vPortValidateInterruptPriority+0x26>
 800319c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	e7fe      	b.n	80031ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031b2:	4a0b      	ldr	r2, [pc, #44]	@ (80031e0 <vPortValidateInterruptPriority+0x58>)
 80031b4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031be:	4293      	cmp	r3, r2
 80031c0:	d908      	bls.n	80031d4 <vPortValidateInterruptPriority+0x4c>
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	e7fe      	b.n	80031d2 <vPortValidateInterruptPriority+0x4a>
	}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e3f0 	.word	0xe000e3f0
 80031dc:	20000ec0 	.word	0x20000ec0
 80031e0:	20000ebc 	.word	0x20000ebc

080031e4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031e4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <prvInsertBlockIntoFreeList+0x44>)
 80031e8:	461a      	mov	r2, r3
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4283      	cmp	r3, r0
 80031ee:	d3fb      	bcc.n	80031e8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031f0:	6854      	ldr	r4, [r2, #4]
 80031f2:	1911      	adds	r1, r2, r4
 80031f4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031f6:	bf01      	itttt	eq
 80031f8:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 80031fa:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031fc:	1909      	addeq	r1, r1, r4
 80031fe:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003200:	6844      	ldr	r4, [r0, #4]
 8003202:	1901      	adds	r1, r0, r4
 8003204:	428b      	cmp	r3, r1
 8003206:	d10c      	bne.n	8003222 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003208:	4908      	ldr	r1, [pc, #32]	@ (800322c <prvInsertBlockIntoFreeList+0x48>)
 800320a:	6809      	ldr	r1, [r1, #0]
 800320c:	428b      	cmp	r3, r1
 800320e:	d003      	beq.n	8003218 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	4421      	add	r1, r4
 8003214:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003216:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003218:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800321a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800321c:	bf18      	it	ne
 800321e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003220:	bd10      	pop	{r4, pc}
 8003222:	4619      	mov	r1, r3
 8003224:	e7f8      	b.n	8003218 <prvInsertBlockIntoFreeList+0x34>
 8003226:	bf00      	nop
 8003228:	20000edc 	.word	0x20000edc
 800322c:	20000ed8 	.word	0x20000ed8

08003230 <pvPortMalloc>:
{
 8003230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003234:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003236:	f7ff f8b7 	bl	80023a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800323a:	4942      	ldr	r1, [pc, #264]	@ (8003344 <pvPortMalloc+0x114>)
 800323c:	4d42      	ldr	r5, [pc, #264]	@ (8003348 <pvPortMalloc+0x118>)
 800323e:	680b      	ldr	r3, [r1, #0]
 8003240:	bb0b      	cbnz	r3, 8003286 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003242:	4a42      	ldr	r2, [pc, #264]	@ (800334c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003244:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003246:	bf1f      	itttt	ne
 8003248:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800324a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800324e:	f502 5270 	addne.w	r2, r2, #15360	@ 0x3c00
 8003252:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003254:	bf0c      	ite	eq
 8003256:	f44f 5370 	moveq.w	r3, #15360	@ 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800325a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800325c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800325e:	4e3c      	ldr	r6, [pc, #240]	@ (8003350 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8003260:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003262:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003266:	2000      	movs	r0, #0
 8003268:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800326a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800326c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003270:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003272:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8003276:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003278:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <pvPortMalloc+0x124>)
 800327a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800327c:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <pvPortMalloc+0x128>)
 800327e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003280:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003284:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003286:	682e      	ldr	r6, [r5, #0]
 8003288:	4226      	tst	r6, r4
 800328a:	d155      	bne.n	8003338 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800328c:	2c00      	cmp	r4, #0
 800328e:	d046      	beq.n	800331e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8003290:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003294:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003296:	bf1c      	itt	ne
 8003298:	f023 0307 	bicne.w	r3, r3, #7
 800329c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04a      	beq.n	8003338 <pvPortMalloc+0x108>
 80032a2:	4f2d      	ldr	r7, [pc, #180]	@ (8003358 <pvPortMalloc+0x128>)
 80032a4:	683c      	ldr	r4, [r7, #0]
 80032a6:	429c      	cmp	r4, r3
 80032a8:	d346      	bcc.n	8003338 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80032aa:	4a29      	ldr	r2, [pc, #164]	@ (8003350 <pvPortMalloc+0x120>)
 80032ac:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032ae:	6868      	ldr	r0, [r5, #4]
 80032b0:	4298      	cmp	r0, r3
 80032b2:	d204      	bcs.n	80032be <pvPortMalloc+0x8e>
 80032b4:	f8d5 c000 	ldr.w	ip, [r5]
 80032b8:	f1bc 0f00 	cmp.w	ip, #0
 80032bc:	d115      	bne.n	80032ea <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80032be:	6809      	ldr	r1, [r1, #0]
 80032c0:	42a9      	cmp	r1, r5
 80032c2:	d039      	beq.n	8003338 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032c4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032c6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032ca:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032cc:	1ac2      	subs	r2, r0, r3
 80032ce:	2a10      	cmp	r2, #16
 80032d0:	d912      	bls.n	80032f8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032d2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032d4:	0741      	lsls	r1, r0, #29
 80032d6:	d00b      	beq.n	80032f0 <pvPortMalloc+0xc0>
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	e7fe      	b.n	80032e8 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 80032ea:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80032ec:	4665      	mov	r5, ip
 80032ee:	e7de      	b.n	80032ae <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032f0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80032f2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032f4:	f7ff ff76 	bl	80031e4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032f8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032fa:	4916      	ldr	r1, [pc, #88]	@ (8003354 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032fc:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032fe:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8003300:	4a16      	ldr	r2, [pc, #88]	@ (800335c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003302:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003304:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800330a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800330c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800330e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8003310:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003314:	bf38      	it	cc
 8003316:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8003318:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800331a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800331e:	f7ff f8e7 	bl	80024f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003322:	0763      	lsls	r3, r4, #29
 8003324:	d00a      	beq.n	800333c <pvPortMalloc+0x10c>
 8003326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	e7fe      	b.n	8003336 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8003338:	2400      	movs	r4, #0
 800333a:	e7f0      	b.n	800331e <pvPortMalloc+0xee>
}
 800333c:	4620      	mov	r0, r4
 800333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003342:	bf00      	nop
 8003344:	20000ed8 	.word	0x20000ed8
 8003348:	20000ec4 	.word	0x20000ec4
 800334c:	20000ee4 	.word	0x20000ee4
 8003350:	20000edc 	.word	0x20000edc
 8003354:	20000ed0 	.word	0x20000ed0
 8003358:	20000ed4 	.word	0x20000ed4
 800335c:	20000ecc 	.word	0x20000ecc

08003360 <vPortFree>:
{
 8003360:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003362:	4604      	mov	r4, r0
 8003364:	b390      	cbz	r0, 80033cc <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003366:	4a1a      	ldr	r2, [pc, #104]	@ (80033d0 <vPortFree+0x70>)
 8003368:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	4213      	tst	r3, r2
 8003370:	d108      	bne.n	8003384 <vPortFree+0x24>
 8003372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	e7fe      	b.n	8003382 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003384:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003388:	b141      	cbz	r1, 800339c <vPortFree+0x3c>
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	e7fe      	b.n	800339a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800339c:	ea23 0302 	bic.w	r3, r3, r2
 80033a0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80033a4:	f7ff f800 	bl	80023a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80033a8:	4a0a      	ldr	r2, [pc, #40]	@ (80033d4 <vPortFree+0x74>)
 80033aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80033ae:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033b0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80033b4:	440b      	add	r3, r1
 80033b6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033b8:	f7ff ff14 	bl	80031e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80033bc:	4a06      	ldr	r2, [pc, #24]	@ (80033d8 <vPortFree+0x78>)
 80033be:	6813      	ldr	r3, [r2, #0]
}
 80033c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80033c4:	3301      	adds	r3, #1
 80033c6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80033c8:	f7ff b892 	b.w	80024f0 <xTaskResumeAll>
}
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	bf00      	nop
 80033d0:	20000ec4 	.word	0x20000ec4
 80033d4:	20000ed4 	.word	0x20000ed4
 80033d8:	20000ec8 	.word	0x20000ec8

080033dc <siprintf>:
 80033dc:	b40e      	push	{r1, r2, r3}
 80033de:	b510      	push	{r4, lr}
 80033e0:	b09d      	sub	sp, #116	@ 0x74
 80033e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80033e4:	9002      	str	r0, [sp, #8]
 80033e6:	9006      	str	r0, [sp, #24]
 80033e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80033ec:	480a      	ldr	r0, [pc, #40]	@ (8003418 <siprintf+0x3c>)
 80033ee:	9107      	str	r1, [sp, #28]
 80033f0:	9104      	str	r1, [sp, #16]
 80033f2:	490a      	ldr	r1, [pc, #40]	@ (800341c <siprintf+0x40>)
 80033f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033f8:	9105      	str	r1, [sp, #20]
 80033fa:	2400      	movs	r4, #0
 80033fc:	a902      	add	r1, sp, #8
 80033fe:	6800      	ldr	r0, [r0, #0]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003404:	f000 fa00 	bl	8003808 <_svfiprintf_r>
 8003408:	9b02      	ldr	r3, [sp, #8]
 800340a:	701c      	strb	r4, [r3, #0]
 800340c:	b01d      	add	sp, #116	@ 0x74
 800340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003412:	b003      	add	sp, #12
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000010 	.word	0x20000010
 800341c:	ffff0208 	.word	0xffff0208

08003420 <memset>:
 8003420:	4402      	add	r2, r0
 8003422:	4603      	mov	r3, r0
 8003424:	4293      	cmp	r3, r2
 8003426:	d100      	bne.n	800342a <memset+0xa>
 8003428:	4770      	bx	lr
 800342a:	f803 1b01 	strb.w	r1, [r3], #1
 800342e:	e7f9      	b.n	8003424 <memset+0x4>

08003430 <_reclaim_reent>:
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <_reclaim_reent+0xb8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4283      	cmp	r3, r0
 8003436:	b570      	push	{r4, r5, r6, lr}
 8003438:	4604      	mov	r4, r0
 800343a:	d053      	beq.n	80034e4 <_reclaim_reent+0xb4>
 800343c:	69c3      	ldr	r3, [r0, #28]
 800343e:	b31b      	cbz	r3, 8003488 <_reclaim_reent+0x58>
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	b163      	cbz	r3, 800345e <_reclaim_reent+0x2e>
 8003444:	2500      	movs	r5, #0
 8003446:	69e3      	ldr	r3, [r4, #28]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	5959      	ldr	r1, [r3, r5]
 800344c:	b9b1      	cbnz	r1, 800347c <_reclaim_reent+0x4c>
 800344e:	3504      	adds	r5, #4
 8003450:	2d80      	cmp	r5, #128	@ 0x80
 8003452:	d1f8      	bne.n	8003446 <_reclaim_reent+0x16>
 8003454:	69e3      	ldr	r3, [r4, #28]
 8003456:	4620      	mov	r0, r4
 8003458:	68d9      	ldr	r1, [r3, #12]
 800345a:	f000 f881 	bl	8003560 <_free_r>
 800345e:	69e3      	ldr	r3, [r4, #28]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	b111      	cbz	r1, 800346a <_reclaim_reent+0x3a>
 8003464:	4620      	mov	r0, r4
 8003466:	f000 f87b 	bl	8003560 <_free_r>
 800346a:	69e3      	ldr	r3, [r4, #28]
 800346c:	689d      	ldr	r5, [r3, #8]
 800346e:	b15d      	cbz	r5, 8003488 <_reclaim_reent+0x58>
 8003470:	4629      	mov	r1, r5
 8003472:	4620      	mov	r0, r4
 8003474:	682d      	ldr	r5, [r5, #0]
 8003476:	f000 f873 	bl	8003560 <_free_r>
 800347a:	e7f8      	b.n	800346e <_reclaim_reent+0x3e>
 800347c:	680e      	ldr	r6, [r1, #0]
 800347e:	4620      	mov	r0, r4
 8003480:	f000 f86e 	bl	8003560 <_free_r>
 8003484:	4631      	mov	r1, r6
 8003486:	e7e1      	b.n	800344c <_reclaim_reent+0x1c>
 8003488:	6961      	ldr	r1, [r4, #20]
 800348a:	b111      	cbz	r1, 8003492 <_reclaim_reent+0x62>
 800348c:	4620      	mov	r0, r4
 800348e:	f000 f867 	bl	8003560 <_free_r>
 8003492:	69e1      	ldr	r1, [r4, #28]
 8003494:	b111      	cbz	r1, 800349c <_reclaim_reent+0x6c>
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f862 	bl	8003560 <_free_r>
 800349c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800349e:	b111      	cbz	r1, 80034a6 <_reclaim_reent+0x76>
 80034a0:	4620      	mov	r0, r4
 80034a2:	f000 f85d 	bl	8003560 <_free_r>
 80034a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034a8:	b111      	cbz	r1, 80034b0 <_reclaim_reent+0x80>
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 f858 	bl	8003560 <_free_r>
 80034b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80034b2:	b111      	cbz	r1, 80034ba <_reclaim_reent+0x8a>
 80034b4:	4620      	mov	r0, r4
 80034b6:	f000 f853 	bl	8003560 <_free_r>
 80034ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034bc:	b111      	cbz	r1, 80034c4 <_reclaim_reent+0x94>
 80034be:	4620      	mov	r0, r4
 80034c0:	f000 f84e 	bl	8003560 <_free_r>
 80034c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80034c6:	b111      	cbz	r1, 80034ce <_reclaim_reent+0x9e>
 80034c8:	4620      	mov	r0, r4
 80034ca:	f000 f849 	bl	8003560 <_free_r>
 80034ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80034d0:	b111      	cbz	r1, 80034d8 <_reclaim_reent+0xa8>
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 f844 	bl	8003560 <_free_r>
 80034d8:	6a23      	ldr	r3, [r4, #32]
 80034da:	b11b      	cbz	r3, 80034e4 <_reclaim_reent+0xb4>
 80034dc:	4620      	mov	r0, r4
 80034de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80034e2:	4718      	bx	r3
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	bf00      	nop
 80034e8:	20000010 	.word	0x20000010

080034ec <__errno>:
 80034ec:	4b01      	ldr	r3, [pc, #4]	@ (80034f4 <__errno+0x8>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000010 	.word	0x20000010

080034f8 <__libc_init_array>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003530 <__libc_init_array+0x38>)
 80034fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003534 <__libc_init_array+0x3c>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	2600      	movs	r6, #0
 8003504:	42a6      	cmp	r6, r4
 8003506:	d109      	bne.n	800351c <__libc_init_array+0x24>
 8003508:	4d0b      	ldr	r5, [pc, #44]	@ (8003538 <__libc_init_array+0x40>)
 800350a:	4c0c      	ldr	r4, [pc, #48]	@ (800353c <__libc_init_array+0x44>)
 800350c:	f000 fc64 	bl	8003dd8 <_init>
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	2600      	movs	r6, #0
 8003516:	42a6      	cmp	r6, r4
 8003518:	d105      	bne.n	8003526 <__libc_init_array+0x2e>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003520:	4798      	blx	r3
 8003522:	3601      	adds	r6, #1
 8003524:	e7ee      	b.n	8003504 <__libc_init_array+0xc>
 8003526:	f855 3b04 	ldr.w	r3, [r5], #4
 800352a:	4798      	blx	r3
 800352c:	3601      	adds	r6, #1
 800352e:	e7f2      	b.n	8003516 <__libc_init_array+0x1e>
 8003530:	08003e78 	.word	0x08003e78
 8003534:	08003e78 	.word	0x08003e78
 8003538:	08003e78 	.word	0x08003e78
 800353c:	08003e7c 	.word	0x08003e7c

08003540 <__retarget_lock_acquire_recursive>:
 8003540:	4770      	bx	lr

08003542 <__retarget_lock_release_recursive>:
 8003542:	4770      	bx	lr

08003544 <memcpy>:
 8003544:	440a      	add	r2, r1
 8003546:	4291      	cmp	r1, r2
 8003548:	f100 33ff 	add.w	r3, r0, #4294967295
 800354c:	d100      	bne.n	8003550 <memcpy+0xc>
 800354e:	4770      	bx	lr
 8003550:	b510      	push	{r4, lr}
 8003552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800355a:	4291      	cmp	r1, r2
 800355c:	d1f9      	bne.n	8003552 <memcpy+0xe>
 800355e:	bd10      	pop	{r4, pc}

08003560 <_free_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4605      	mov	r5, r0
 8003564:	2900      	cmp	r1, #0
 8003566:	d041      	beq.n	80035ec <_free_r+0x8c>
 8003568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800356c:	1f0c      	subs	r4, r1, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	bfb8      	it	lt
 8003572:	18e4      	addlt	r4, r4, r3
 8003574:	f000 f8e0 	bl	8003738 <__malloc_lock>
 8003578:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <_free_r+0x90>)
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	b933      	cbnz	r3, 800358c <_free_r+0x2c>
 800357e:	6063      	str	r3, [r4, #4]
 8003580:	6014      	str	r4, [r2, #0]
 8003582:	4628      	mov	r0, r5
 8003584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003588:	f000 b8dc 	b.w	8003744 <__malloc_unlock>
 800358c:	42a3      	cmp	r3, r4
 800358e:	d908      	bls.n	80035a2 <_free_r+0x42>
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	1821      	adds	r1, r4, r0
 8003594:	428b      	cmp	r3, r1
 8003596:	bf01      	itttt	eq
 8003598:	6819      	ldreq	r1, [r3, #0]
 800359a:	685b      	ldreq	r3, [r3, #4]
 800359c:	1809      	addeq	r1, r1, r0
 800359e:	6021      	streq	r1, [r4, #0]
 80035a0:	e7ed      	b.n	800357e <_free_r+0x1e>
 80035a2:	461a      	mov	r2, r3
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b10b      	cbz	r3, 80035ac <_free_r+0x4c>
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d9fa      	bls.n	80035a2 <_free_r+0x42>
 80035ac:	6811      	ldr	r1, [r2, #0]
 80035ae:	1850      	adds	r0, r2, r1
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d10b      	bne.n	80035cc <_free_r+0x6c>
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	4401      	add	r1, r0
 80035b8:	1850      	adds	r0, r2, r1
 80035ba:	4283      	cmp	r3, r0
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	d1e0      	bne.n	8003582 <_free_r+0x22>
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	6053      	str	r3, [r2, #4]
 80035c6:	4408      	add	r0, r1
 80035c8:	6010      	str	r0, [r2, #0]
 80035ca:	e7da      	b.n	8003582 <_free_r+0x22>
 80035cc:	d902      	bls.n	80035d4 <_free_r+0x74>
 80035ce:	230c      	movs	r3, #12
 80035d0:	602b      	str	r3, [r5, #0]
 80035d2:	e7d6      	b.n	8003582 <_free_r+0x22>
 80035d4:	6820      	ldr	r0, [r4, #0]
 80035d6:	1821      	adds	r1, r4, r0
 80035d8:	428b      	cmp	r3, r1
 80035da:	bf04      	itt	eq
 80035dc:	6819      	ldreq	r1, [r3, #0]
 80035de:	685b      	ldreq	r3, [r3, #4]
 80035e0:	6063      	str	r3, [r4, #4]
 80035e2:	bf04      	itt	eq
 80035e4:	1809      	addeq	r1, r1, r0
 80035e6:	6021      	streq	r1, [r4, #0]
 80035e8:	6054      	str	r4, [r2, #4]
 80035ea:	e7ca      	b.n	8003582 <_free_r+0x22>
 80035ec:	bd38      	pop	{r3, r4, r5, pc}
 80035ee:	bf00      	nop
 80035f0:	20004c28 	.word	0x20004c28

080035f4 <sbrk_aligned>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003634 <sbrk_aligned+0x40>)
 80035f8:	460c      	mov	r4, r1
 80035fa:	6831      	ldr	r1, [r6, #0]
 80035fc:	4605      	mov	r5, r0
 80035fe:	b911      	cbnz	r1, 8003606 <sbrk_aligned+0x12>
 8003600:	f000 fba4 	bl	8003d4c <_sbrk_r>
 8003604:	6030      	str	r0, [r6, #0]
 8003606:	4621      	mov	r1, r4
 8003608:	4628      	mov	r0, r5
 800360a:	f000 fb9f 	bl	8003d4c <_sbrk_r>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	d103      	bne.n	800361a <sbrk_aligned+0x26>
 8003612:	f04f 34ff 	mov.w	r4, #4294967295
 8003616:	4620      	mov	r0, r4
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	1cc4      	adds	r4, r0, #3
 800361c:	f024 0403 	bic.w	r4, r4, #3
 8003620:	42a0      	cmp	r0, r4
 8003622:	d0f8      	beq.n	8003616 <sbrk_aligned+0x22>
 8003624:	1a21      	subs	r1, r4, r0
 8003626:	4628      	mov	r0, r5
 8003628:	f000 fb90 	bl	8003d4c <_sbrk_r>
 800362c:	3001      	adds	r0, #1
 800362e:	d1f2      	bne.n	8003616 <sbrk_aligned+0x22>
 8003630:	e7ef      	b.n	8003612 <sbrk_aligned+0x1e>
 8003632:	bf00      	nop
 8003634:	20004c24 	.word	0x20004c24

08003638 <_malloc_r>:
 8003638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800363c:	1ccd      	adds	r5, r1, #3
 800363e:	f025 0503 	bic.w	r5, r5, #3
 8003642:	3508      	adds	r5, #8
 8003644:	2d0c      	cmp	r5, #12
 8003646:	bf38      	it	cc
 8003648:	250c      	movcc	r5, #12
 800364a:	2d00      	cmp	r5, #0
 800364c:	4606      	mov	r6, r0
 800364e:	db01      	blt.n	8003654 <_malloc_r+0x1c>
 8003650:	42a9      	cmp	r1, r5
 8003652:	d904      	bls.n	800365e <_malloc_r+0x26>
 8003654:	230c      	movs	r3, #12
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	2000      	movs	r0, #0
 800365a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800365e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003734 <_malloc_r+0xfc>
 8003662:	f000 f869 	bl	8003738 <__malloc_lock>
 8003666:	f8d8 3000 	ldr.w	r3, [r8]
 800366a:	461c      	mov	r4, r3
 800366c:	bb44      	cbnz	r4, 80036c0 <_malloc_r+0x88>
 800366e:	4629      	mov	r1, r5
 8003670:	4630      	mov	r0, r6
 8003672:	f7ff ffbf 	bl	80035f4 <sbrk_aligned>
 8003676:	1c43      	adds	r3, r0, #1
 8003678:	4604      	mov	r4, r0
 800367a:	d158      	bne.n	800372e <_malloc_r+0xf6>
 800367c:	f8d8 4000 	ldr.w	r4, [r8]
 8003680:	4627      	mov	r7, r4
 8003682:	2f00      	cmp	r7, #0
 8003684:	d143      	bne.n	800370e <_malloc_r+0xd6>
 8003686:	2c00      	cmp	r4, #0
 8003688:	d04b      	beq.n	8003722 <_malloc_r+0xea>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	4639      	mov	r1, r7
 800368e:	4630      	mov	r0, r6
 8003690:	eb04 0903 	add.w	r9, r4, r3
 8003694:	f000 fb5a 	bl	8003d4c <_sbrk_r>
 8003698:	4581      	cmp	r9, r0
 800369a:	d142      	bne.n	8003722 <_malloc_r+0xea>
 800369c:	6821      	ldr	r1, [r4, #0]
 800369e:	1a6d      	subs	r5, r5, r1
 80036a0:	4629      	mov	r1, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7ff ffa6 	bl	80035f4 <sbrk_aligned>
 80036a8:	3001      	adds	r0, #1
 80036aa:	d03a      	beq.n	8003722 <_malloc_r+0xea>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	442b      	add	r3, r5
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	f8d8 3000 	ldr.w	r3, [r8]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	bb62      	cbnz	r2, 8003714 <_malloc_r+0xdc>
 80036ba:	f8c8 7000 	str.w	r7, [r8]
 80036be:	e00f      	b.n	80036e0 <_malloc_r+0xa8>
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	1b52      	subs	r2, r2, r5
 80036c4:	d420      	bmi.n	8003708 <_malloc_r+0xd0>
 80036c6:	2a0b      	cmp	r2, #11
 80036c8:	d917      	bls.n	80036fa <_malloc_r+0xc2>
 80036ca:	1961      	adds	r1, r4, r5
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	6025      	str	r5, [r4, #0]
 80036d0:	bf18      	it	ne
 80036d2:	6059      	strne	r1, [r3, #4]
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	bf08      	it	eq
 80036d8:	f8c8 1000 	streq.w	r1, [r8]
 80036dc:	5162      	str	r2, [r4, r5]
 80036de:	604b      	str	r3, [r1, #4]
 80036e0:	4630      	mov	r0, r6
 80036e2:	f000 f82f 	bl	8003744 <__malloc_unlock>
 80036e6:	f104 000b 	add.w	r0, r4, #11
 80036ea:	1d23      	adds	r3, r4, #4
 80036ec:	f020 0007 	bic.w	r0, r0, #7
 80036f0:	1ac2      	subs	r2, r0, r3
 80036f2:	bf1c      	itt	ne
 80036f4:	1a1b      	subne	r3, r3, r0
 80036f6:	50a3      	strne	r3, [r4, r2]
 80036f8:	e7af      	b.n	800365a <_malloc_r+0x22>
 80036fa:	6862      	ldr	r2, [r4, #4]
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	bf0c      	ite	eq
 8003700:	f8c8 2000 	streq.w	r2, [r8]
 8003704:	605a      	strne	r2, [r3, #4]
 8003706:	e7eb      	b.n	80036e0 <_malloc_r+0xa8>
 8003708:	4623      	mov	r3, r4
 800370a:	6864      	ldr	r4, [r4, #4]
 800370c:	e7ae      	b.n	800366c <_malloc_r+0x34>
 800370e:	463c      	mov	r4, r7
 8003710:	687f      	ldr	r7, [r7, #4]
 8003712:	e7b6      	b.n	8003682 <_malloc_r+0x4a>
 8003714:	461a      	mov	r2, r3
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	42a3      	cmp	r3, r4
 800371a:	d1fb      	bne.n	8003714 <_malloc_r+0xdc>
 800371c:	2300      	movs	r3, #0
 800371e:	6053      	str	r3, [r2, #4]
 8003720:	e7de      	b.n	80036e0 <_malloc_r+0xa8>
 8003722:	230c      	movs	r3, #12
 8003724:	6033      	str	r3, [r6, #0]
 8003726:	4630      	mov	r0, r6
 8003728:	f000 f80c 	bl	8003744 <__malloc_unlock>
 800372c:	e794      	b.n	8003658 <_malloc_r+0x20>
 800372e:	6005      	str	r5, [r0, #0]
 8003730:	e7d6      	b.n	80036e0 <_malloc_r+0xa8>
 8003732:	bf00      	nop
 8003734:	20004c28 	.word	0x20004c28

08003738 <__malloc_lock>:
 8003738:	4801      	ldr	r0, [pc, #4]	@ (8003740 <__malloc_lock+0x8>)
 800373a:	f7ff bf01 	b.w	8003540 <__retarget_lock_acquire_recursive>
 800373e:	bf00      	nop
 8003740:	20004c20 	.word	0x20004c20

08003744 <__malloc_unlock>:
 8003744:	4801      	ldr	r0, [pc, #4]	@ (800374c <__malloc_unlock+0x8>)
 8003746:	f7ff befc 	b.w	8003542 <__retarget_lock_release_recursive>
 800374a:	bf00      	nop
 800374c:	20004c20 	.word	0x20004c20

08003750 <__ssputs_r>:
 8003750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003754:	688e      	ldr	r6, [r1, #8]
 8003756:	461f      	mov	r7, r3
 8003758:	42be      	cmp	r6, r7
 800375a:	680b      	ldr	r3, [r1, #0]
 800375c:	4682      	mov	sl, r0
 800375e:	460c      	mov	r4, r1
 8003760:	4690      	mov	r8, r2
 8003762:	d82d      	bhi.n	80037c0 <__ssputs_r+0x70>
 8003764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003768:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800376c:	d026      	beq.n	80037bc <__ssputs_r+0x6c>
 800376e:	6965      	ldr	r5, [r4, #20]
 8003770:	6909      	ldr	r1, [r1, #16]
 8003772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003776:	eba3 0901 	sub.w	r9, r3, r1
 800377a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800377e:	1c7b      	adds	r3, r7, #1
 8003780:	444b      	add	r3, r9
 8003782:	106d      	asrs	r5, r5, #1
 8003784:	429d      	cmp	r5, r3
 8003786:	bf38      	it	cc
 8003788:	461d      	movcc	r5, r3
 800378a:	0553      	lsls	r3, r2, #21
 800378c:	d527      	bpl.n	80037de <__ssputs_r+0x8e>
 800378e:	4629      	mov	r1, r5
 8003790:	f7ff ff52 	bl	8003638 <_malloc_r>
 8003794:	4606      	mov	r6, r0
 8003796:	b360      	cbz	r0, 80037f2 <__ssputs_r+0xa2>
 8003798:	6921      	ldr	r1, [r4, #16]
 800379a:	464a      	mov	r2, r9
 800379c:	f7ff fed2 	bl	8003544 <memcpy>
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037aa:	81a3      	strh	r3, [r4, #12]
 80037ac:	6126      	str	r6, [r4, #16]
 80037ae:	6165      	str	r5, [r4, #20]
 80037b0:	444e      	add	r6, r9
 80037b2:	eba5 0509 	sub.w	r5, r5, r9
 80037b6:	6026      	str	r6, [r4, #0]
 80037b8:	60a5      	str	r5, [r4, #8]
 80037ba:	463e      	mov	r6, r7
 80037bc:	42be      	cmp	r6, r7
 80037be:	d900      	bls.n	80037c2 <__ssputs_r+0x72>
 80037c0:	463e      	mov	r6, r7
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	4632      	mov	r2, r6
 80037c6:	4641      	mov	r1, r8
 80037c8:	f000 faa6 	bl	8003d18 <memmove>
 80037cc:	68a3      	ldr	r3, [r4, #8]
 80037ce:	1b9b      	subs	r3, r3, r6
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	4433      	add	r3, r6
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	2000      	movs	r0, #0
 80037da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037de:	462a      	mov	r2, r5
 80037e0:	f000 fac4 	bl	8003d6c <_realloc_r>
 80037e4:	4606      	mov	r6, r0
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d1e0      	bne.n	80037ac <__ssputs_r+0x5c>
 80037ea:	6921      	ldr	r1, [r4, #16]
 80037ec:	4650      	mov	r0, sl
 80037ee:	f7ff feb7 	bl	8003560 <_free_r>
 80037f2:	230c      	movs	r3, #12
 80037f4:	f8ca 3000 	str.w	r3, [sl]
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	e7e9      	b.n	80037da <__ssputs_r+0x8a>
	...

08003808 <_svfiprintf_r>:
 8003808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380c:	4698      	mov	r8, r3
 800380e:	898b      	ldrh	r3, [r1, #12]
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	b09d      	sub	sp, #116	@ 0x74
 8003814:	4607      	mov	r7, r0
 8003816:	460d      	mov	r5, r1
 8003818:	4614      	mov	r4, r2
 800381a:	d510      	bpl.n	800383e <_svfiprintf_r+0x36>
 800381c:	690b      	ldr	r3, [r1, #16]
 800381e:	b973      	cbnz	r3, 800383e <_svfiprintf_r+0x36>
 8003820:	2140      	movs	r1, #64	@ 0x40
 8003822:	f7ff ff09 	bl	8003638 <_malloc_r>
 8003826:	6028      	str	r0, [r5, #0]
 8003828:	6128      	str	r0, [r5, #16]
 800382a:	b930      	cbnz	r0, 800383a <_svfiprintf_r+0x32>
 800382c:	230c      	movs	r3, #12
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	b01d      	add	sp, #116	@ 0x74
 8003836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383a:	2340      	movs	r3, #64	@ 0x40
 800383c:	616b      	str	r3, [r5, #20]
 800383e:	2300      	movs	r3, #0
 8003840:	9309      	str	r3, [sp, #36]	@ 0x24
 8003842:	2320      	movs	r3, #32
 8003844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003848:	f8cd 800c 	str.w	r8, [sp, #12]
 800384c:	2330      	movs	r3, #48	@ 0x30
 800384e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80039ec <_svfiprintf_r+0x1e4>
 8003852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003856:	f04f 0901 	mov.w	r9, #1
 800385a:	4623      	mov	r3, r4
 800385c:	469a      	mov	sl, r3
 800385e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003862:	b10a      	cbz	r2, 8003868 <_svfiprintf_r+0x60>
 8003864:	2a25      	cmp	r2, #37	@ 0x25
 8003866:	d1f9      	bne.n	800385c <_svfiprintf_r+0x54>
 8003868:	ebba 0b04 	subs.w	fp, sl, r4
 800386c:	d00b      	beq.n	8003886 <_svfiprintf_r+0x7e>
 800386e:	465b      	mov	r3, fp
 8003870:	4622      	mov	r2, r4
 8003872:	4629      	mov	r1, r5
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff6b 	bl	8003750 <__ssputs_r>
 800387a:	3001      	adds	r0, #1
 800387c:	f000 80a7 	beq.w	80039ce <_svfiprintf_r+0x1c6>
 8003880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003882:	445a      	add	r2, fp
 8003884:	9209      	str	r2, [sp, #36]	@ 0x24
 8003886:	f89a 3000 	ldrb.w	r3, [sl]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 809f 	beq.w	80039ce <_svfiprintf_r+0x1c6>
 8003890:	2300      	movs	r3, #0
 8003892:	f04f 32ff 	mov.w	r2, #4294967295
 8003896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800389a:	f10a 0a01 	add.w	sl, sl, #1
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	9307      	str	r3, [sp, #28]
 80038a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80038a8:	4654      	mov	r4, sl
 80038aa:	2205      	movs	r2, #5
 80038ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b0:	484e      	ldr	r0, [pc, #312]	@ (80039ec <_svfiprintf_r+0x1e4>)
 80038b2:	f7fc fc9d 	bl	80001f0 <memchr>
 80038b6:	9a04      	ldr	r2, [sp, #16]
 80038b8:	b9d8      	cbnz	r0, 80038f2 <_svfiprintf_r+0xea>
 80038ba:	06d0      	lsls	r0, r2, #27
 80038bc:	bf44      	itt	mi
 80038be:	2320      	movmi	r3, #32
 80038c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038c4:	0711      	lsls	r1, r2, #28
 80038c6:	bf44      	itt	mi
 80038c8:	232b      	movmi	r3, #43	@ 0x2b
 80038ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038ce:	f89a 3000 	ldrb.w	r3, [sl]
 80038d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80038d4:	d015      	beq.n	8003902 <_svfiprintf_r+0xfa>
 80038d6:	9a07      	ldr	r2, [sp, #28]
 80038d8:	4654      	mov	r4, sl
 80038da:	2000      	movs	r0, #0
 80038dc:	f04f 0c0a 	mov.w	ip, #10
 80038e0:	4621      	mov	r1, r4
 80038e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e6:	3b30      	subs	r3, #48	@ 0x30
 80038e8:	2b09      	cmp	r3, #9
 80038ea:	d94b      	bls.n	8003984 <_svfiprintf_r+0x17c>
 80038ec:	b1b0      	cbz	r0, 800391c <_svfiprintf_r+0x114>
 80038ee:	9207      	str	r2, [sp, #28]
 80038f0:	e014      	b.n	800391c <_svfiprintf_r+0x114>
 80038f2:	eba0 0308 	sub.w	r3, r0, r8
 80038f6:	fa09 f303 	lsl.w	r3, r9, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	46a2      	mov	sl, r4
 8003900:	e7d2      	b.n	80038a8 <_svfiprintf_r+0xa0>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	1d19      	adds	r1, r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	9103      	str	r1, [sp, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfbb      	ittet	lt
 800390e:	425b      	neglt	r3, r3
 8003910:	f042 0202 	orrlt.w	r2, r2, #2
 8003914:	9307      	strge	r3, [sp, #28]
 8003916:	9307      	strlt	r3, [sp, #28]
 8003918:	bfb8      	it	lt
 800391a:	9204      	strlt	r2, [sp, #16]
 800391c:	7823      	ldrb	r3, [r4, #0]
 800391e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003920:	d10a      	bne.n	8003938 <_svfiprintf_r+0x130>
 8003922:	7863      	ldrb	r3, [r4, #1]
 8003924:	2b2a      	cmp	r3, #42	@ 0x2a
 8003926:	d132      	bne.n	800398e <_svfiprintf_r+0x186>
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	9203      	str	r2, [sp, #12]
 8003930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003934:	3402      	adds	r4, #2
 8003936:	9305      	str	r3, [sp, #20]
 8003938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80039fc <_svfiprintf_r+0x1f4>
 800393c:	7821      	ldrb	r1, [r4, #0]
 800393e:	2203      	movs	r2, #3
 8003940:	4650      	mov	r0, sl
 8003942:	f7fc fc55 	bl	80001f0 <memchr>
 8003946:	b138      	cbz	r0, 8003958 <_svfiprintf_r+0x150>
 8003948:	9b04      	ldr	r3, [sp, #16]
 800394a:	eba0 000a 	sub.w	r0, r0, sl
 800394e:	2240      	movs	r2, #64	@ 0x40
 8003950:	4082      	lsls	r2, r0
 8003952:	4313      	orrs	r3, r2
 8003954:	3401      	adds	r4, #1
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395c:	4824      	ldr	r0, [pc, #144]	@ (80039f0 <_svfiprintf_r+0x1e8>)
 800395e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003962:	2206      	movs	r2, #6
 8003964:	f7fc fc44 	bl	80001f0 <memchr>
 8003968:	2800      	cmp	r0, #0
 800396a:	d036      	beq.n	80039da <_svfiprintf_r+0x1d2>
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <_svfiprintf_r+0x1ec>)
 800396e:	bb1b      	cbnz	r3, 80039b8 <_svfiprintf_r+0x1b0>
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	3307      	adds	r3, #7
 8003974:	f023 0307 	bic.w	r3, r3, #7
 8003978:	3308      	adds	r3, #8
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800397e:	4433      	add	r3, r6
 8003980:	9309      	str	r3, [sp, #36]	@ 0x24
 8003982:	e76a      	b.n	800385a <_svfiprintf_r+0x52>
 8003984:	fb0c 3202 	mla	r2, ip, r2, r3
 8003988:	460c      	mov	r4, r1
 800398a:	2001      	movs	r0, #1
 800398c:	e7a8      	b.n	80038e0 <_svfiprintf_r+0xd8>
 800398e:	2300      	movs	r3, #0
 8003990:	3401      	adds	r4, #1
 8003992:	9305      	str	r3, [sp, #20]
 8003994:	4619      	mov	r1, r3
 8003996:	f04f 0c0a 	mov.w	ip, #10
 800399a:	4620      	mov	r0, r4
 800399c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a0:	3a30      	subs	r2, #48	@ 0x30
 80039a2:	2a09      	cmp	r2, #9
 80039a4:	d903      	bls.n	80039ae <_svfiprintf_r+0x1a6>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0c6      	beq.n	8003938 <_svfiprintf_r+0x130>
 80039aa:	9105      	str	r1, [sp, #20]
 80039ac:	e7c4      	b.n	8003938 <_svfiprintf_r+0x130>
 80039ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80039b2:	4604      	mov	r4, r0
 80039b4:	2301      	movs	r3, #1
 80039b6:	e7f0      	b.n	800399a <_svfiprintf_r+0x192>
 80039b8:	ab03      	add	r3, sp, #12
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	462a      	mov	r2, r5
 80039be:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <_svfiprintf_r+0x1f0>)
 80039c0:	a904      	add	r1, sp, #16
 80039c2:	4638      	mov	r0, r7
 80039c4:	f3af 8000 	nop.w
 80039c8:	1c42      	adds	r2, r0, #1
 80039ca:	4606      	mov	r6, r0
 80039cc:	d1d6      	bne.n	800397c <_svfiprintf_r+0x174>
 80039ce:	89ab      	ldrh	r3, [r5, #12]
 80039d0:	065b      	lsls	r3, r3, #25
 80039d2:	f53f af2d 	bmi.w	8003830 <_svfiprintf_r+0x28>
 80039d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039d8:	e72c      	b.n	8003834 <_svfiprintf_r+0x2c>
 80039da:	ab03      	add	r3, sp, #12
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	462a      	mov	r2, r5
 80039e0:	4b05      	ldr	r3, [pc, #20]	@ (80039f8 <_svfiprintf_r+0x1f0>)
 80039e2:	a904      	add	r1, sp, #16
 80039e4:	4638      	mov	r0, r7
 80039e6:	f000 f879 	bl	8003adc <_printf_i>
 80039ea:	e7ed      	b.n	80039c8 <_svfiprintf_r+0x1c0>
 80039ec:	08003e22 	.word	0x08003e22
 80039f0:	08003e2c 	.word	0x08003e2c
 80039f4:	00000000 	.word	0x00000000
 80039f8:	08003751 	.word	0x08003751
 80039fc:	08003e28 	.word	0x08003e28

08003a00 <_printf_common>:
 8003a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	4616      	mov	r6, r2
 8003a06:	4698      	mov	r8, r3
 8003a08:	688a      	ldr	r2, [r1, #8]
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bfb8      	it	lt
 8003a14:	4613      	movlt	r3, r2
 8003a16:	6033      	str	r3, [r6, #0]
 8003a18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a1c:	4607      	mov	r7, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	b10a      	cbz	r2, 8003a26 <_printf_common+0x26>
 8003a22:	3301      	adds	r3, #1
 8003a24:	6033      	str	r3, [r6, #0]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	0699      	lsls	r1, r3, #26
 8003a2a:	bf42      	ittt	mi
 8003a2c:	6833      	ldrmi	r3, [r6, #0]
 8003a2e:	3302      	addmi	r3, #2
 8003a30:	6033      	strmi	r3, [r6, #0]
 8003a32:	6825      	ldr	r5, [r4, #0]
 8003a34:	f015 0506 	ands.w	r5, r5, #6
 8003a38:	d106      	bne.n	8003a48 <_printf_common+0x48>
 8003a3a:	f104 0a19 	add.w	sl, r4, #25
 8003a3e:	68e3      	ldr	r3, [r4, #12]
 8003a40:	6832      	ldr	r2, [r6, #0]
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	42ab      	cmp	r3, r5
 8003a46:	dc26      	bgt.n	8003a96 <_printf_common+0x96>
 8003a48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	3b00      	subs	r3, #0
 8003a50:	bf18      	it	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	0692      	lsls	r2, r2, #26
 8003a56:	d42b      	bmi.n	8003ab0 <_printf_common+0xb0>
 8003a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	4638      	mov	r0, r7
 8003a60:	47c8      	blx	r9
 8003a62:	3001      	adds	r0, #1
 8003a64:	d01e      	beq.n	8003aa4 <_printf_common+0xa4>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	6922      	ldr	r2, [r4, #16]
 8003a6a:	f003 0306 	and.w	r3, r3, #6
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf02      	ittt	eq
 8003a72:	68e5      	ldreq	r5, [r4, #12]
 8003a74:	6833      	ldreq	r3, [r6, #0]
 8003a76:	1aed      	subeq	r5, r5, r3
 8003a78:	68a3      	ldr	r3, [r4, #8]
 8003a7a:	bf0c      	ite	eq
 8003a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a80:	2500      	movne	r5, #0
 8003a82:	4293      	cmp	r3, r2
 8003a84:	bfc4      	itt	gt
 8003a86:	1a9b      	subgt	r3, r3, r2
 8003a88:	18ed      	addgt	r5, r5, r3
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	341a      	adds	r4, #26
 8003a8e:	42b5      	cmp	r5, r6
 8003a90:	d11a      	bne.n	8003ac8 <_printf_common+0xc8>
 8003a92:	2000      	movs	r0, #0
 8003a94:	e008      	b.n	8003aa8 <_printf_common+0xa8>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4652      	mov	r2, sl
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	47c8      	blx	r9
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d103      	bne.n	8003aac <_printf_common+0xac>
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aac:	3501      	adds	r5, #1
 8003aae:	e7c6      	b.n	8003a3e <_printf_common+0x3e>
 8003ab0:	18e1      	adds	r1, r4, r3
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	2030      	movs	r0, #48	@ 0x30
 8003ab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003aba:	4422      	add	r2, r4
 8003abc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	e7c7      	b.n	8003a58 <_printf_common+0x58>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	4622      	mov	r2, r4
 8003acc:	4641      	mov	r1, r8
 8003ace:	4638      	mov	r0, r7
 8003ad0:	47c8      	blx	r9
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d0e6      	beq.n	8003aa4 <_printf_common+0xa4>
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7d9      	b.n	8003a8e <_printf_common+0x8e>
	...

08003adc <_printf_i>:
 8003adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	7e0f      	ldrb	r7, [r1, #24]
 8003ae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ae4:	2f78      	cmp	r7, #120	@ 0x78
 8003ae6:	4691      	mov	r9, r2
 8003ae8:	4680      	mov	r8, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	469a      	mov	sl, r3
 8003aee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003af2:	d807      	bhi.n	8003b04 <_printf_i+0x28>
 8003af4:	2f62      	cmp	r7, #98	@ 0x62
 8003af6:	d80a      	bhi.n	8003b0e <_printf_i+0x32>
 8003af8:	2f00      	cmp	r7, #0
 8003afa:	f000 80d1 	beq.w	8003ca0 <_printf_i+0x1c4>
 8003afe:	2f58      	cmp	r7, #88	@ 0x58
 8003b00:	f000 80b8 	beq.w	8003c74 <_printf_i+0x198>
 8003b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b0c:	e03a      	b.n	8003b84 <_printf_i+0xa8>
 8003b0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b12:	2b15      	cmp	r3, #21
 8003b14:	d8f6      	bhi.n	8003b04 <_printf_i+0x28>
 8003b16:	a101      	add	r1, pc, #4	@ (adr r1, 8003b1c <_printf_i+0x40>)
 8003b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b1c:	08003b75 	.word	0x08003b75
 8003b20:	08003b89 	.word	0x08003b89
 8003b24:	08003b05 	.word	0x08003b05
 8003b28:	08003b05 	.word	0x08003b05
 8003b2c:	08003b05 	.word	0x08003b05
 8003b30:	08003b05 	.word	0x08003b05
 8003b34:	08003b89 	.word	0x08003b89
 8003b38:	08003b05 	.word	0x08003b05
 8003b3c:	08003b05 	.word	0x08003b05
 8003b40:	08003b05 	.word	0x08003b05
 8003b44:	08003b05 	.word	0x08003b05
 8003b48:	08003c87 	.word	0x08003c87
 8003b4c:	08003bb3 	.word	0x08003bb3
 8003b50:	08003c41 	.word	0x08003c41
 8003b54:	08003b05 	.word	0x08003b05
 8003b58:	08003b05 	.word	0x08003b05
 8003b5c:	08003ca9 	.word	0x08003ca9
 8003b60:	08003b05 	.word	0x08003b05
 8003b64:	08003bb3 	.word	0x08003bb3
 8003b68:	08003b05 	.word	0x08003b05
 8003b6c:	08003b05 	.word	0x08003b05
 8003b70:	08003c49 	.word	0x08003c49
 8003b74:	6833      	ldr	r3, [r6, #0]
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6032      	str	r2, [r6, #0]
 8003b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b84:	2301      	movs	r3, #1
 8003b86:	e09c      	b.n	8003cc2 <_printf_i+0x1e6>
 8003b88:	6833      	ldr	r3, [r6, #0]
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	1d19      	adds	r1, r3, #4
 8003b8e:	6031      	str	r1, [r6, #0]
 8003b90:	0606      	lsls	r6, r0, #24
 8003b92:	d501      	bpl.n	8003b98 <_printf_i+0xbc>
 8003b94:	681d      	ldr	r5, [r3, #0]
 8003b96:	e003      	b.n	8003ba0 <_printf_i+0xc4>
 8003b98:	0645      	lsls	r5, r0, #25
 8003b9a:	d5fb      	bpl.n	8003b94 <_printf_i+0xb8>
 8003b9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	da03      	bge.n	8003bac <_printf_i+0xd0>
 8003ba4:	232d      	movs	r3, #45	@ 0x2d
 8003ba6:	426d      	negs	r5, r5
 8003ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bac:	4858      	ldr	r0, [pc, #352]	@ (8003d10 <_printf_i+0x234>)
 8003bae:	230a      	movs	r3, #10
 8003bb0:	e011      	b.n	8003bd6 <_printf_i+0xfa>
 8003bb2:	6821      	ldr	r1, [r4, #0]
 8003bb4:	6833      	ldr	r3, [r6, #0]
 8003bb6:	0608      	lsls	r0, r1, #24
 8003bb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bbc:	d402      	bmi.n	8003bc4 <_printf_i+0xe8>
 8003bbe:	0649      	lsls	r1, r1, #25
 8003bc0:	bf48      	it	mi
 8003bc2:	b2ad      	uxthmi	r5, r5
 8003bc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bc6:	4852      	ldr	r0, [pc, #328]	@ (8003d10 <_printf_i+0x234>)
 8003bc8:	6033      	str	r3, [r6, #0]
 8003bca:	bf14      	ite	ne
 8003bcc:	230a      	movne	r3, #10
 8003bce:	2308      	moveq	r3, #8
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bd6:	6866      	ldr	r6, [r4, #4]
 8003bd8:	60a6      	str	r6, [r4, #8]
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	db05      	blt.n	8003bea <_printf_i+0x10e>
 8003bde:	6821      	ldr	r1, [r4, #0]
 8003be0:	432e      	orrs	r6, r5
 8003be2:	f021 0104 	bic.w	r1, r1, #4
 8003be6:	6021      	str	r1, [r4, #0]
 8003be8:	d04b      	beq.n	8003c82 <_printf_i+0x1a6>
 8003bea:	4616      	mov	r6, r2
 8003bec:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bf0:	fb03 5711 	mls	r7, r3, r1, r5
 8003bf4:	5dc7      	ldrb	r7, [r0, r7]
 8003bf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bfa:	462f      	mov	r7, r5
 8003bfc:	42bb      	cmp	r3, r7
 8003bfe:	460d      	mov	r5, r1
 8003c00:	d9f4      	bls.n	8003bec <_printf_i+0x110>
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d10b      	bne.n	8003c1e <_printf_i+0x142>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	07df      	lsls	r7, r3, #31
 8003c0a:	d508      	bpl.n	8003c1e <_printf_i+0x142>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	6861      	ldr	r1, [r4, #4]
 8003c10:	4299      	cmp	r1, r3
 8003c12:	bfde      	ittt	le
 8003c14:	2330      	movle	r3, #48	@ 0x30
 8003c16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c1e:	1b92      	subs	r2, r2, r6
 8003c20:	6122      	str	r2, [r4, #16]
 8003c22:	f8cd a000 	str.w	sl, [sp]
 8003c26:	464b      	mov	r3, r9
 8003c28:	aa03      	add	r2, sp, #12
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4640      	mov	r0, r8
 8003c2e:	f7ff fee7 	bl	8003a00 <_printf_common>
 8003c32:	3001      	adds	r0, #1
 8003c34:	d14a      	bne.n	8003ccc <_printf_i+0x1f0>
 8003c36:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3a:	b004      	add	sp, #16
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	f043 0320 	orr.w	r3, r3, #32
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	4832      	ldr	r0, [pc, #200]	@ (8003d14 <_printf_i+0x238>)
 8003c4a:	2778      	movs	r7, #120	@ 0x78
 8003c4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	6831      	ldr	r1, [r6, #0]
 8003c54:	061f      	lsls	r7, r3, #24
 8003c56:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c5a:	d402      	bmi.n	8003c62 <_printf_i+0x186>
 8003c5c:	065f      	lsls	r7, r3, #25
 8003c5e:	bf48      	it	mi
 8003c60:	b2ad      	uxthmi	r5, r5
 8003c62:	6031      	str	r1, [r6, #0]
 8003c64:	07d9      	lsls	r1, r3, #31
 8003c66:	bf44      	itt	mi
 8003c68:	f043 0320 	orrmi.w	r3, r3, #32
 8003c6c:	6023      	strmi	r3, [r4, #0]
 8003c6e:	b11d      	cbz	r5, 8003c78 <_printf_i+0x19c>
 8003c70:	2310      	movs	r3, #16
 8003c72:	e7ad      	b.n	8003bd0 <_printf_i+0xf4>
 8003c74:	4826      	ldr	r0, [pc, #152]	@ (8003d10 <_printf_i+0x234>)
 8003c76:	e7e9      	b.n	8003c4c <_printf_i+0x170>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f023 0320 	bic.w	r3, r3, #32
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	e7f6      	b.n	8003c70 <_printf_i+0x194>
 8003c82:	4616      	mov	r6, r2
 8003c84:	e7bd      	b.n	8003c02 <_printf_i+0x126>
 8003c86:	6833      	ldr	r3, [r6, #0]
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	6961      	ldr	r1, [r4, #20]
 8003c8c:	1d18      	adds	r0, r3, #4
 8003c8e:	6030      	str	r0, [r6, #0]
 8003c90:	062e      	lsls	r6, r5, #24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	d501      	bpl.n	8003c9a <_printf_i+0x1be>
 8003c96:	6019      	str	r1, [r3, #0]
 8003c98:	e002      	b.n	8003ca0 <_printf_i+0x1c4>
 8003c9a:	0668      	lsls	r0, r5, #25
 8003c9c:	d5fb      	bpl.n	8003c96 <_printf_i+0x1ba>
 8003c9e:	8019      	strh	r1, [r3, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6123      	str	r3, [r4, #16]
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	e7bc      	b.n	8003c22 <_printf_i+0x146>
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	6032      	str	r2, [r6, #0]
 8003cae:	681e      	ldr	r6, [r3, #0]
 8003cb0:	6862      	ldr	r2, [r4, #4]
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f7fc fa9b 	bl	80001f0 <memchr>
 8003cba:	b108      	cbz	r0, 8003cc0 <_printf_i+0x1e4>
 8003cbc:	1b80      	subs	r0, r0, r6
 8003cbe:	6060      	str	r0, [r4, #4]
 8003cc0:	6863      	ldr	r3, [r4, #4]
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cca:	e7aa      	b.n	8003c22 <_printf_i+0x146>
 8003ccc:	6923      	ldr	r3, [r4, #16]
 8003cce:	4632      	mov	r2, r6
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	47d0      	blx	sl
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d0ad      	beq.n	8003c36 <_printf_i+0x15a>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	079b      	lsls	r3, r3, #30
 8003cde:	d413      	bmi.n	8003d08 <_printf_i+0x22c>
 8003ce0:	68e0      	ldr	r0, [r4, #12]
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	4298      	cmp	r0, r3
 8003ce6:	bfb8      	it	lt
 8003ce8:	4618      	movlt	r0, r3
 8003cea:	e7a6      	b.n	8003c3a <_printf_i+0x15e>
 8003cec:	2301      	movs	r3, #1
 8003cee:	4632      	mov	r2, r6
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	47d0      	blx	sl
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d09d      	beq.n	8003c36 <_printf_i+0x15a>
 8003cfa:	3501      	adds	r5, #1
 8003cfc:	68e3      	ldr	r3, [r4, #12]
 8003cfe:	9903      	ldr	r1, [sp, #12]
 8003d00:	1a5b      	subs	r3, r3, r1
 8003d02:	42ab      	cmp	r3, r5
 8003d04:	dcf2      	bgt.n	8003cec <_printf_i+0x210>
 8003d06:	e7eb      	b.n	8003ce0 <_printf_i+0x204>
 8003d08:	2500      	movs	r5, #0
 8003d0a:	f104 0619 	add.w	r6, r4, #25
 8003d0e:	e7f5      	b.n	8003cfc <_printf_i+0x220>
 8003d10:	08003e33 	.word	0x08003e33
 8003d14:	08003e44 	.word	0x08003e44

08003d18 <memmove>:
 8003d18:	4288      	cmp	r0, r1
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	eb01 0402 	add.w	r4, r1, r2
 8003d20:	d902      	bls.n	8003d28 <memmove+0x10>
 8003d22:	4284      	cmp	r4, r0
 8003d24:	4623      	mov	r3, r4
 8003d26:	d807      	bhi.n	8003d38 <memmove+0x20>
 8003d28:	1e43      	subs	r3, r0, #1
 8003d2a:	42a1      	cmp	r1, r4
 8003d2c:	d008      	beq.n	8003d40 <memmove+0x28>
 8003d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d36:	e7f8      	b.n	8003d2a <memmove+0x12>
 8003d38:	4402      	add	r2, r0
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d100      	bne.n	8003d42 <memmove+0x2a>
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d4a:	e7f7      	b.n	8003d3c <memmove+0x24>

08003d4c <_sbrk_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d06      	ldr	r5, [pc, #24]	@ (8003d68 <_sbrk_r+0x1c>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4604      	mov	r4, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	602b      	str	r3, [r5, #0]
 8003d58:	f7fc fdf2 	bl	8000940 <_sbrk>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_sbrk_r+0x1a>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_sbrk_r+0x1a>
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	20004c1c 	.word	0x20004c1c

08003d6c <_realloc_r>:
 8003d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d70:	4607      	mov	r7, r0
 8003d72:	4614      	mov	r4, r2
 8003d74:	460d      	mov	r5, r1
 8003d76:	b921      	cbnz	r1, 8003d82 <_realloc_r+0x16>
 8003d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	f7ff bc5b 	b.w	8003638 <_malloc_r>
 8003d82:	b92a      	cbnz	r2, 8003d90 <_realloc_r+0x24>
 8003d84:	f7ff fbec 	bl	8003560 <_free_r>
 8003d88:	4625      	mov	r5, r4
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d90:	f000 f81a 	bl	8003dc8 <_malloc_usable_size_r>
 8003d94:	4284      	cmp	r4, r0
 8003d96:	4606      	mov	r6, r0
 8003d98:	d802      	bhi.n	8003da0 <_realloc_r+0x34>
 8003d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d9e:	d8f4      	bhi.n	8003d8a <_realloc_r+0x1e>
 8003da0:	4621      	mov	r1, r4
 8003da2:	4638      	mov	r0, r7
 8003da4:	f7ff fc48 	bl	8003638 <_malloc_r>
 8003da8:	4680      	mov	r8, r0
 8003daa:	b908      	cbnz	r0, 8003db0 <_realloc_r+0x44>
 8003dac:	4645      	mov	r5, r8
 8003dae:	e7ec      	b.n	8003d8a <_realloc_r+0x1e>
 8003db0:	42b4      	cmp	r4, r6
 8003db2:	4622      	mov	r2, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	bf28      	it	cs
 8003db8:	4632      	movcs	r2, r6
 8003dba:	f7ff fbc3 	bl	8003544 <memcpy>
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f7ff fbcd 	bl	8003560 <_free_r>
 8003dc6:	e7f1      	b.n	8003dac <_realloc_r+0x40>

08003dc8 <_malloc_usable_size_r>:
 8003dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dcc:	1f18      	subs	r0, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bfbc      	itt	lt
 8003dd2:	580b      	ldrlt	r3, [r1, r0]
 8003dd4:	18c0      	addlt	r0, r0, r3
 8003dd6:	4770      	bx	lr

08003dd8 <_init>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	bf00      	nop
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr

08003de4 <_fini>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	bf00      	nop
 8003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dea:	bc08      	pop	{r3}
 8003dec:	469e      	mov	lr, r3
 8003dee:	4770      	bx	lr
